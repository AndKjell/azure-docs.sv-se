<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="5461876b-bde9-49a4-8f50-8a614bfa765d" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="5461876b-bde9-49a4-8f50-8a614bfa765d" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="d2aa26bf-a4e2-4bf4-865a-afcbfe332c48">
        <trans-unit id="706defe0-b42b-476f-9afd-e922d280643a" xml:space="preserve">
          <source>Author Logic App definitions</source>
          <target state="new">Author Logic App definitions</target>
        </trans-unit>
        <trans-unit id="97021028-7b7e-44ca-922a-6092d6e4345f" xml:space="preserve">
          <source>Learn how to write the JSON definition for Logic apps.</source>
          <target state="new">Learn how to write the JSON definition for Logic apps.</target>
        </trans-unit>
        <trans-unit id="161dd8e6-ec55-479e-94b0-d8151f107a15" xml:space="preserve">
          <source>This topic demonstrates how to use <bpt id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;linkText&gt;</bpt>App Services Logic Apps<ept id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;/linkText&gt;</ept><bpt id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;title&gt;</bpt><ept id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;/title&gt;</ept> definitions, which is a simple, declarative JSON language.</source>
          <target state="new">This topic demonstrates how to use <bpt id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;linkText&gt;</bpt>App Services Logic Apps<ept id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;/linkText&gt;</ept><bpt id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;title&gt;</bpt><ept id="d21340c8-56b7-4f3c-8a43-1f274f2c4637">&lt;/title&gt;</ept> definitions, which is a simple, declarative JSON language.</target>
        </trans-unit>
        <trans-unit id="180a0bdb-627f-483f-b530-6a98d17f7c6c" xml:space="preserve">
          <source>If you haven't done so yet, check out <bpt id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;linkText&gt;</bpt>how to Create a new Logic app<ept id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;/linkText&gt;</ept><bpt id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;title&gt;</bpt><ept id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;/title&gt;</ept> first.</source>
          <target state="new">If you haven't done so yet, check out <bpt id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;linkText&gt;</bpt>how to Create a new Logic app<ept id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;/linkText&gt;</ept><bpt id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;title&gt;</bpt><ept id="5e8e15c7-415a-445d-a074-cfe7540c4e53">&lt;/title&gt;</ept> first.</target>
        </trans-unit>
        <trans-unit id="ce32c07b-ae1b-4a14-9d6d-75bb94dd2022" xml:space="preserve">
          <source>You can also read the <bpt id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;linkText&gt;</bpt>full reference material of the definition language on MSDN<ept id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;/linkText&gt;</ept><bpt id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;title&gt;</bpt><ept id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;/title&gt;</ept>.</source>
          <target state="new">You can also read the <bpt id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;linkText&gt;</bpt>full reference material of the definition language on MSDN<ept id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;/linkText&gt;</ept><bpt id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;title&gt;</bpt><ept id="0a176130-4302-471a-9e4c-17e494afdabe">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="2d089ab2-fa9b-4127-bbd5-4768464ab78d" xml:space="preserve">
          <source>A common pattern is to have one step that gets a list of items, and then you have a series of two or more actions that you want to do on the list.</source>
          <target state="new">A common pattern is to have one step that gets a list of items, and then you have a series of two or more actions that you want to do on the list.</target>
        </trans-unit>
        <trans-unit id="7ee40d43-094e-4246-bf30-362b50c27334" xml:space="preserve">
          <source><bpt id="2596d115-961e-454e-aee7-e0ebd2ae5677">&lt;linkText&gt;</bpt>Repeat over lists<ept id="2596d115-961e-454e-aee7-e0ebd2ae5677">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="2596d115-961e-454e-aee7-e0ebd2ae5677">&lt;linkText&gt;</bpt>Repeat over lists<ept id="2596d115-961e-454e-aee7-e0ebd2ae5677">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="d7b17242-b76f-4df8-91a6-c7bd7b89f363" xml:space="preserve">
          <source>In this example there are 3 actions:</source>
          <target state="new">In this example there are 3 actions:</target>
        </trans-unit>
        <trans-unit id="c24db0f6-acb6-4cd2-a2e8-5e31b6678e1c" xml:space="preserve">
          <source>Get a list of articles.</source>
          <target state="new">Get a list of articles.</target>
        </trans-unit>
        <trans-unit id="09348081-3157-45d7-8194-8d032b8e8296" xml:space="preserve">
          <source>This returns back an object that contains an array.</source>
          <target state="new">This returns back an object that contains an array.</target>
        </trans-unit>
        <trans-unit id="39c5ef04-764a-47c8-8a25-1d7fbd9fd437" xml:space="preserve">
          <source>An action that goes to a link property on each article, which will return back the actual location of the article.</source>
          <target state="new">An action that goes to a link property on each article, which will return back the actual location of the article.</target>
        </trans-unit>
        <trans-unit id="690d58f5-5332-4fbe-a5dc-6ad8eaaa838f" xml:space="preserve">
          <source>An action that iterates over all of the results from the second action to download the actual articles.</source>
          <target state="new">An action that iterates over all of the results from the second action to download the actual articles.</target>
        </trans-unit>
        <trans-unit id="7a35b2e2-9adb-4029-a967-bf5e4a1777c8" xml:space="preserve">
          <source>As covered in <bpt id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;linkText&gt;</bpt>use logic app features<ept id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;/linkText&gt;</ept><bpt id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;title&gt;</bpt><ept id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;/title&gt;</ept>, you iterate over the first list by using the <bpt id="6e9996ee-dfca-4879-b240-6c9b52ac39fc">&lt;code&gt;</bpt>repeat:<ept id="6e9996ee-dfca-4879-b240-6c9b52ac39fc">&lt;/code&gt;</ept> property on the second action.</source>
          <target state="new">As covered in <bpt id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;linkText&gt;</bpt>use logic app features<ept id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;/linkText&gt;</ept><bpt id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;title&gt;</bpt><ept id="4814e1bd-4c6f-4a76-87f0-00cf85694122">&lt;/title&gt;</ept>, you iterate over the first list by using the <bpt id="6e9996ee-dfca-4879-b240-6c9b52ac39fc">&lt;code&gt;</bpt>repeat:<ept id="6e9996ee-dfca-4879-b240-6c9b52ac39fc">&lt;/code&gt;</ept> property on the second action.</target>
        </trans-unit>
        <trans-unit id="fff7209e-8e13-4efa-b91b-6391180a3af0" xml:space="preserve">
          <source>However, for the third action, you need to select the <bpt id="05beaed3-71b8-4742-8564-45faab857f80">&lt;code&gt;</bpt>@actions('readLinks').outputs.repeatItems<ept id="05beaed3-71b8-4742-8564-45faab857f80">&lt;/code&gt;</ept> property, because the second executed for each article.</source>
          <target state="new">However, for the third action, you need to select the <bpt id="05beaed3-71b8-4742-8564-45faab857f80">&lt;code&gt;</bpt>@actions('readLinks').outputs.repeatItems<ept id="05beaed3-71b8-4742-8564-45faab857f80">&lt;/code&gt;</ept> property, because the second executed for each article.</target>
        </trans-unit>
        <trans-unit id="20e8fdf9-bf83-45ae-94b7-98c0a5ef77f9" xml:space="preserve">
          <source>Inside the action you can use either the: [<bpt id="31fbe9d4-82e4-4287-8544-77703e5affeb">&lt;code&gt;</bpt>repeatItem()<ept id="31fbe9d4-82e4-4287-8544-77703e5affeb">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatItem), the [<bpt id="11a0b5b4-8c94-442f-8b12-4af0ddd057ba">&lt;code&gt;</bpt>repeatOutputs()<ept id="11a0b5b4-8c94-442f-8b12-4af0ddd057ba">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs) or [<bpt id="003fb732-0110-4460-aec9-895a2b2a6ce6">&lt;code&gt;</bpt>repeatBody()<ept id="003fb732-0110-4460-aec9-895a2b2a6ce6">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatBody) functions.</source>
          <target state="new">Inside the action you can use either the: [<bpt id="31fbe9d4-82e4-4287-8544-77703e5affeb">&lt;code&gt;</bpt>repeatItem()<ept id="31fbe9d4-82e4-4287-8544-77703e5affeb">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatItem), the [<bpt id="11a0b5b4-8c94-442f-8b12-4af0ddd057ba">&lt;code&gt;</bpt>repeatOutputs()<ept id="11a0b5b4-8c94-442f-8b12-4af0ddd057ba">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs) or [<bpt id="003fb732-0110-4460-aec9-895a2b2a6ce6">&lt;code&gt;</bpt>repeatBody()<ept id="003fb732-0110-4460-aec9-895a2b2a6ce6">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatBody) functions.</target>
        </trans-unit>
        <trans-unit id="ebb601fe-1de7-4997-922c-babe7ca2507a" xml:space="preserve">
          <source>In this example, I wanted to get the <bpt id="2e532663-47db-49c0-975a-9817360567f8">&lt;code&gt;</bpt>location<ept id="2e532663-47db-49c0-975a-9817360567f8">&lt;/code&gt;</ept> header, so I used the [<bpt id="0f0a9f21-5954-4f59-9226-5913ab328f44">&lt;code&gt;</bpt>repeatOutputs()<ept id="0f0a9f21-5954-4f59-9226-5913ab328f44">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs) function to get the outputs of the action execution from the second action that we are now iterating over.</source>
          <target state="new">In this example, I wanted to get the <bpt id="2e532663-47db-49c0-975a-9817360567f8">&lt;code&gt;</bpt>location<ept id="2e532663-47db-49c0-975a-9817360567f8">&lt;/code&gt;</ept> header, so I used the [<bpt id="0f0a9f21-5954-4f59-9226-5913ab328f44">&lt;code&gt;</bpt>repeatOutputs()<ept id="0f0a9f21-5954-4f59-9226-5913ab328f44">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs) function to get the outputs of the action execution from the second action that we are now iterating over.</target>
        </trans-unit>
        <trans-unit id="6f2ca933-9df3-4a27-b03a-e88c4e3c01cf" xml:space="preserve">
          <source>Next, let's say that we want to get completely different content depending on a value of a property.</source>
          <target state="new">Next, let's say that we want to get completely different content depending on a value of a property.</target>
        </trans-unit>
        <trans-unit id="f3a469d2-4fd7-4398-bb7b-7ddda7c405f9" xml:space="preserve">
          <source>We can create a map of values to destinations as a parameter.</source>
          <target state="new">We can create a map of values to destinations as a parameter.</target>
        </trans-unit>
        <trans-unit id="d6b13eec-0f1f-40d6-9efc-62e837bb40ca" xml:space="preserve">
          <source>In this case, we first get a list of articles, and then the second step looks up in a map, based on the category that was defined as a parameter, which URL to get the content from.</source>
          <target state="new">In this case, we first get a list of articles, and then the second step looks up in a map, based on the category that was defined as a parameter, which URL to get the content from.</target>
        </trans-unit>
        <trans-unit id="d7184a0c-9f0c-400a-ba5b-8c693a22f617" xml:space="preserve">
          <source>Two items to pay attention here: the [<bpt id="020ec550-caed-41ed-ad6d-9a4ad8e68abd">&lt;code&gt;</bpt>intersection()<ept id="020ec550-caed-41ed-ad6d-9a4ad8e68abd">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#intersection) function is used to check to see if the category matches one of the known categories defined.</source>
          <target state="new">Two items to pay attention here: the [<bpt id="020ec550-caed-41ed-ad6d-9a4ad8e68abd">&lt;code&gt;</bpt>intersection()<ept id="020ec550-caed-41ed-ad6d-9a4ad8e68abd">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#intersection) function is used to check to see if the category matches one of the known categories defined.</target>
        </trans-unit>
        <trans-unit id="f2d4f1c2-5cec-435e-aba3-6e1cb661a3c1" xml:space="preserve">
          <source>Second, once we get the category, we can pull the item of the map using square brackets: <bpt id="5370898b-4ea7-4635-8af8-65f2f1869ad0">&lt;code&gt;</bpt>parameters[...]<ept id="5370898b-4ea7-4635-8af8-65f2f1869ad0">&lt;/code&gt;</ept>.</source>
          <target state="new">Second, once we get the category, we can pull the item of the map using square brackets: <bpt id="5370898b-4ea7-4635-8af8-65f2f1869ad0">&lt;code&gt;</bpt>parameters[...]<ept id="5370898b-4ea7-4635-8af8-65f2f1869ad0">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="fb2fdfc3-d174-4024-bc48-039ea2704456" xml:space="preserve">
          <source>It can often be easier to manage your Logic Apps when they are more discreet.</source>
          <target state="new">It can often be easier to manage your Logic Apps when they are more discreet.</target>
        </trans-unit>
        <trans-unit id="5979d594-7d53-4158-bbe6-6b465cd776e2" xml:space="preserve">
          <source>You can do this by factoring your logic into multiple definitions and calling them from the same parent definition.</source>
          <target state="new">You can do this by factoring your logic into multiple definitions and calling them from the same parent definition.</target>
        </trans-unit>
        <trans-unit id="7c4e6a62-2735-4aea-aab1-e67824d03839" xml:space="preserve">
          <source>In this example, there will be a parent Logic app that receives orders, and a child logic app that executes some steps for each order.</source>
          <target state="new">In this example, there will be a parent Logic app that receives orders, and a child logic app that executes some steps for each order.</target>
        </trans-unit>
        <trans-unit id="4faa836c-cb4e-4959-9064-e1b14f0d53ad" xml:space="preserve">
          <source>In the parent logic app:</source>
          <target state="new">In the parent logic app:</target>
        </trans-unit>
        <trans-unit id="25c54a22-4b40-440b-a6b4-3fa456e15cfc" xml:space="preserve">
          <source>Then, in the child logic app you'll use the [<bpt id="4cdd9e92-898a-420d-a068-ac41df9eba23">&lt;code&gt;</bpt>triggerBody()<ept id="4cdd9e92-898a-420d-a068-ac41df9eba23">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerBody) function to get the values that were passed into the child workflow.</source>
          <target state="new">Then, in the child logic app you'll use the [<bpt id="4cdd9e92-898a-420d-a068-ac41df9eba23">&lt;code&gt;</bpt>triggerBody()<ept id="4cdd9e92-898a-420d-a068-ac41df9eba23">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerBody) function to get the values that were passed into the child workflow.</target>
        </trans-unit>
        <trans-unit id="14215757-f2ff-4b92-a017-6289f73ebdfa" xml:space="preserve">
          <source>You'll then populate the outputs with the data that you want to return to the parent flow.</source>
          <target state="new">You'll then populate the outputs with the data that you want to return to the parent flow.</target>
        </trans-unit>
        <trans-unit id="c31192fc-0400-42dd-8791-193696a0111a" xml:space="preserve">
          <source>You can read about the <bpt id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;linkText&gt;</bpt>Logic app type action on MSDN<ept id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;/linkText&gt;</ept><bpt id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;title&gt;</bpt><ept id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;/title&gt;</ept>.</source>
          <target state="new">You can read about the <bpt id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;linkText&gt;</bpt>Logic app type action on MSDN<ept id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;/linkText&gt;</ept><bpt id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;title&gt;</bpt><ept id="2606a538-b333-4430-bdaf-a9d383c0229d">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="63d43704-dd37-4177-8de2-4decef645ef7" xml:space="preserve">
          <source>The Logic app designer does not support Logic app type actions so you will need to edit the definition manually.</source>
          <target state="new">The Logic app designer does not support Logic app type actions so you will need to edit the definition manually.</target>
        </trans-unit>
        <trans-unit id="05fc1cef-a7e1-4e8d-bff1-7294034ce59d" xml:space="preserve">
          <source>You commonly want to be able to write a <bpt id="39fa6aea-c7d6-4eb5-bc40-6e626f1e4baf">&lt;em&gt;</bpt>remediation step<ept id="39fa6aea-c7d6-4eb5-bc40-6e626f1e4baf">&lt;/em&gt;</ept> -- some logic that executes, if , <bpt id="180165f7-cc8a-4559-9c6e-a71752ab8ff9">&lt;strong&gt;</bpt>and only if<ept id="180165f7-cc8a-4559-9c6e-a71752ab8ff9">&lt;/strong&gt;</ept>, one or more of your calls failed.</source>
          <target state="new">You commonly want to be able to write a <bpt id="39fa6aea-c7d6-4eb5-bc40-6e626f1e4baf">&lt;em&gt;</bpt>remediation step<ept id="39fa6aea-c7d6-4eb5-bc40-6e626f1e4baf">&lt;/em&gt;</ept> -- some logic that executes, if , <bpt id="180165f7-cc8a-4559-9c6e-a71752ab8ff9">&lt;strong&gt;</bpt>and only if<ept id="180165f7-cc8a-4559-9c6e-a71752ab8ff9">&lt;/strong&gt;</ept>, one or more of your calls failed.</target>
        </trans-unit>
        <trans-unit id="341514c6-c523-4223-9391-2ccc7d69088c" xml:space="preserve">
          <source>In this example, we are getting data from a variety of places, but if the call fails, I want to POST a message somewhere so I can track down that failure later.</source>
          <target state="new">In this example, we are getting data from a variety of places, but if the call fails, I want to POST a message somewhere so I can track down that failure later.</target>
        </trans-unit>
        <trans-unit id="6348770c-bef7-4e46-a797-627417179bc7" xml:space="preserve">
          <source>I am using two conditions because in the first step I am repeating over a list.</source>
          <target state="new">I am using two conditions because in the first step I am repeating over a list.</target>
        </trans-unit>
        <trans-unit id="1a40289f-334d-405c-a314-2e400c9a4007" xml:space="preserve">
          <source>If you just had a single action, you'd only need one condition (the first one).</source>
          <target state="new">If you just had a single action, you'd only need one condition (the first one).</target>
        </trans-unit>
        <trans-unit id="a87b82c0-f28e-4a56-a0c7-3620a942cd13" xml:space="preserve">
          <source>Also note that you can use the <bpt id="f4995c4a-c64d-46c7-96b3-ddbc7ac3bbbe">&lt;em&gt;</bpt>inputs<ept id="f4995c4a-c64d-46c7-96b3-ddbc7ac3bbbe">&lt;/em&gt;</ept> to the failed action in your remediation step -- here I pass the failed URL to the second step.</source>
          <target state="new">Also note that you can use the <bpt id="f4995c4a-c64d-46c7-96b3-ddbc7ac3bbbe">&lt;em&gt;</bpt>inputs<ept id="f4995c4a-c64d-46c7-96b3-ddbc7ac3bbbe">&lt;/em&gt;</ept> to the failed action in your remediation step -- here I pass the failed URL to the second step.</target>
        </trans-unit>
        <trans-unit id="26f471cc-d696-4fae-a0a4-cc3b2e131738" xml:space="preserve">
          <source><bpt id="61141c64-ba4b-4cc7-9fad-cbcf7b0ac1bb">&lt;linkText&gt;</bpt>Remediation<ept id="61141c64-ba4b-4cc7-9fad-cbcf7b0ac1bb">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="61141c64-ba4b-4cc7-9fad-cbcf7b0ac1bb">&lt;linkText&gt;</bpt>Remediation<ept id="61141c64-ba4b-4cc7-9fad-cbcf7b0ac1bb">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="1bcc35fd-3a62-4372-8074-e458c9136c7c" xml:space="preserve">
          <source>Finally, because you have now handled the error, we no longer mark the run as <bpt id="baebf171-ee42-4181-9545-1ea7991fbab5">&lt;strong&gt;</bpt>Failed<ept id="baebf171-ee42-4181-9545-1ea7991fbab5">&lt;/strong&gt;</ept>.</source>
          <target state="new">Finally, because you have now handled the error, we no longer mark the run as <bpt id="baebf171-ee42-4181-9545-1ea7991fbab5">&lt;strong&gt;</bpt>Failed<ept id="baebf171-ee42-4181-9545-1ea7991fbab5">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="4d9c915e-ecc7-441d-abce-85113cab2adc" xml:space="preserve">
          <source>As you can see here, this run is <bpt id="72be1e3a-3a6a-4901-aeab-656ea86acb28">&lt;strong&gt;</bpt>Succeeded<ept id="72be1e3a-3a6a-4901-aeab-656ea86acb28">&lt;/strong&gt;</ept> even though one step Failed, because I wrote the step to handle this failure.</source>
          <target state="new">As you can see here, this run is <bpt id="72be1e3a-3a6a-4901-aeab-656ea86acb28">&lt;strong&gt;</bpt>Succeeded<ept id="72be1e3a-3a6a-4901-aeab-656ea86acb28">&lt;/strong&gt;</ept> even though one step Failed, because I wrote the step to handle this failure.</target>
        </trans-unit>
        <trans-unit id="904a6ff6-569a-4137-93ee-d04980bb7b57" xml:space="preserve">
          <source>To have multiple actions execution in parellel, rather than in sequence, you need to remove the <bpt id="ff75edff-0abf-4299-8b4b-8341802157a0">&lt;code&gt;</bpt>dependsOn<ept id="ff75edff-0abf-4299-8b4b-8341802157a0">&lt;/code&gt;</ept> condition that links those two actions together.</source>
          <target state="new">To have multiple actions execution in parellel, rather than in sequence, you need to remove the <bpt id="ff75edff-0abf-4299-8b4b-8341802157a0">&lt;code&gt;</bpt>dependsOn<ept id="ff75edff-0abf-4299-8b4b-8341802157a0">&lt;/code&gt;</ept> condition that links those two actions together.</target>
        </trans-unit>
        <trans-unit id="163650a8-9d01-47cc-9287-03e3128f9623" xml:space="preserve">
          <source>Once the dependency is removed, actions will automatically execute in parallel, unless they need data from each other.</source>
          <target state="new">Once the dependency is removed, actions will automatically execute in parallel, unless they need data from each other.</target>
        </trans-unit>
        <trans-unit id="cad7d536-fad3-4fef-8db4-580e356e2920" xml:space="preserve">
          <source><bpt id="c59992fa-ded3-4912-8c71-fa2336d21a4a">&lt;linkText&gt;</bpt>Branches<ept id="c59992fa-ded3-4912-8c71-fa2336d21a4a">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="c59992fa-ded3-4912-8c71-fa2336d21a4a">&lt;linkText&gt;</bpt>Branches<ept id="c59992fa-ded3-4912-8c71-fa2336d21a4a">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="03acd586-8fd1-46f9-bcdb-430db5de071c" xml:space="preserve">
          <source>As you can see in the example above, branch1 and branch2 just depend on the content from readData.</source>
          <target state="new">As you can see in the example above, branch1 and branch2 just depend on the content from readData.</target>
        </trans-unit>
        <trans-unit id="15f2c48f-3a8c-4147-802a-c3e6aaf56e87" xml:space="preserve">
          <source>As a result, both of these branches will run in parallel:</source>
          <target state="new">As a result, both of these branches will run in parallel:</target>
        </trans-unit>
        <trans-unit id="1c2147a7-6403-4939-a8fd-c1a62b7cae7c" xml:space="preserve">
          <source><bpt id="983a92fe-20b5-48ab-8598-454b2d3d0f2a">&lt;linkText&gt;</bpt>Parallel<ept id="983a92fe-20b5-48ab-8598-454b2d3d0f2a">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="983a92fe-20b5-48ab-8598-454b2d3d0f2a">&lt;linkText&gt;</bpt>Parallel<ept id="983a92fe-20b5-48ab-8598-454b2d3d0f2a">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="be82c3f7-c363-4274-998f-7835b1ad0f35" xml:space="preserve">
          <source>You can see the timestamp for both branches is identical.</source>
          <target state="new">You can see the timestamp for both branches is identical.</target>
        </trans-unit>
        <trans-unit id="ae4b6b0d-1111-427e-ad35-e27f4dccf3f9" xml:space="preserve">
          <source>You can combine two conditional flows of logic (that may or may not have executed) by having a single action that takes data from both branches.</source>
          <target state="new">You can combine two conditional flows of logic (that may or may not have executed) by having a single action that takes data from both branches.</target>
        </trans-unit>
        <trans-unit id="9b721311-ef0b-4043-9953-ffbc3dd2ae1a" xml:space="preserve">
          <source>Your strategy for this varies depending on if you are handling one item, or a collection of items.</source>
          <target state="new">Your strategy for this varies depending on if you are handling one item, or a collection of items.</target>
        </trans-unit>
        <trans-unit id="85956830-15a8-427a-b40b-eb997d645aa8" xml:space="preserve">
          <source>In the case of a single item, you'll want to use the [<bpt id="7f62c6e0-e98d-406f-b555-49b7a7892e4b">&lt;code&gt;</bpt>coalesce()<ept id="7f62c6e0-e98d-406f-b555-49b7a7892e4b">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#coalesce) function:</source>
          <target state="new">In the case of a single item, you'll want to use the [<bpt id="7f62c6e0-e98d-406f-b555-49b7a7892e4b">&lt;code&gt;</bpt>coalesce()<ept id="7f62c6e0-e98d-406f-b555-49b7a7892e4b">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#coalesce) function:</target>
        </trans-unit>
        <trans-unit id="f03be00e-20d5-407b-b598-47bb7e886a78" xml:space="preserve">
          <source>Alternatively, when your first two branches both operate on a list of orders, for example, you'll want to use the [<bpt id="86512bb1-8a2e-42b1-bf98-bc23d05ffba5">&lt;code&gt;</bpt>union()<ept id="86512bb1-8a2e-42b1-bf98-bc23d05ffba5">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#union) function to combine the data from both branches.</source>
          <target state="new">Alternatively, when your first two branches both operate on a list of orders, for example, you'll want to use the [<bpt id="86512bb1-8a2e-42b1-bf98-bc23d05ffba5">&lt;code&gt;</bpt>union()<ept id="86512bb1-8a2e-42b1-bf98-bc23d05ffba5">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#union) function to combine the data from both branches.</target>
        </trans-unit>
        <trans-unit id="764d9cbe-3561-4d09-9413-ff0e0faad2ad" xml:space="preserve">
          <source>There are variety of functions that can be used to maniplate string.</source>
          <target state="new">There are variety of functions that can be used to maniplate string.</target>
        </trans-unit>
        <trans-unit id="905f5139-cc0a-4c1d-869f-1ed22975c0b2" xml:space="preserve">
          <source>Let's take an example where we have a string that we want to pass to a system, but we are not confident that character encoding will be handled properly.</source>
          <target state="new">Let's take an example where we have a string that we want to pass to a system, but we are not confident that character encoding will be handled properly.</target>
        </trans-unit>
        <trans-unit id="d50583fb-f88a-4c3a-8696-2cc4b7c3e095" xml:space="preserve">
          <source>One option is to base64 encode this string.</source>
          <target state="new">One option is to base64 encode this string.</target>
        </trans-unit>
        <trans-unit id="08af1ddd-15fb-4413-8476-a1979d2d8731" xml:space="preserve">
          <source>However, to avoid escaping in a URL we are going to replace a few characters.</source>
          <target state="new">However, to avoid escaping in a URL we are going to replace a few characters.</target>
        </trans-unit>
        <trans-unit id="579b4c25-6b87-43cf-a3d9-f3a1d30bad28" xml:space="preserve">
          <source>We also want a substring of the the order's name because the first 5 characters are not used.</source>
          <target state="new">We also want a substring of the the order's name because the first 5 characters are not used.</target>
        </trans-unit>
        <trans-unit id="d5f88750-0ca6-4339-af8e-ec42d25254f2" xml:space="preserve">
          <source>Working from the inside out:</source>
          <target state="new">Working from the inside out:</target>
        </trans-unit>
        <trans-unit id="415fa9c9-6665-456a-b476-969800d89ad8" xml:space="preserve">
          <source>Get the [<bpt id="13bdd434-fc87-4a0b-8327-9c24312c31b4">&lt;code&gt;</bpt>length()<ept id="13bdd434-fc87-4a0b-8327-9c24312c31b4">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#length)  of the orderer's name, this returns back the total number of characters</source>
          <target state="new">Get the [<bpt id="13bdd434-fc87-4a0b-8327-9c24312c31b4">&lt;code&gt;</bpt>length()<ept id="13bdd434-fc87-4a0b-8327-9c24312c31b4">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#length)  of the orderer's name, this returns back the total number of characters</target>
        </trans-unit>
        <trans-unit id="392a9a90-239c-43e3-8bdb-292b19122c7d" xml:space="preserve">
          <source>Subtract 5 (because we'll want a shorter string)</source>
          <target state="new">Subtract 5 (because we'll want a shorter string)</target>
        </trans-unit>
        <trans-unit id="dbbb66a7-064d-4478-bc17-0ba536b8c9fc" xml:space="preserve">
          <source>Actually take the [<bpt id="c2e3b82b-e4dd-4412-8409-365572fbb672">&lt;code&gt;</bpt>substring()<ept id="c2e3b82b-e4dd-4412-8409-365572fbb672">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#substring) .</source>
          <target state="new">Actually take the [<bpt id="c2e3b82b-e4dd-4412-8409-365572fbb672">&lt;code&gt;</bpt>substring()<ept id="c2e3b82b-e4dd-4412-8409-365572fbb672">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#substring) .</target>
        </trans-unit>
        <trans-unit id="d4680d33-c812-4151-be63-1ca2f2d6f918" xml:space="preserve">
          <source>We start at index <bpt id="83799592-7428-4041-aaa8-5109d2f30781">&lt;code&gt;</bpt>5<ept id="83799592-7428-4041-aaa8-5109d2f30781">&lt;/code&gt;</ept> and go the remainder of the string.</source>
          <target state="new">We start at index <bpt id="83799592-7428-4041-aaa8-5109d2f30781">&lt;code&gt;</bpt>5<ept id="83799592-7428-4041-aaa8-5109d2f30781">&lt;/code&gt;</ept> and go the remainder of the string.</target>
        </trans-unit>
        <trans-unit id="38b80044-31d1-4357-bbee-7442fb49fef9" xml:space="preserve">
          <source>Convert this substring to a [<bpt id="6a1bb66c-68de-45d7-bed8-1dda59799e01">&lt;code&gt;</bpt>base64()<ept id="6a1bb66c-68de-45d7-bed8-1dda59799e01">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#base64) string</source>
          <target state="new">Convert this substring to a [<bpt id="6a1bb66c-68de-45d7-bed8-1dda59799e01">&lt;code&gt;</bpt>base64()<ept id="6a1bb66c-68de-45d7-bed8-1dda59799e01">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#base64) string</target>
        </trans-unit>
        <trans-unit id="4016d6e1-8265-4e3d-9a8a-1da1d526d8f5" xml:space="preserve">
          <source>[<bpt id="7509a10b-5304-4676-ad29-20f78dfa94a5">&lt;code&gt;</bpt>replace()<ept id="7509a10b-5304-4676-ad29-20f78dfa94a5">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace)  all of the <bpt id="65ac7c1a-39d7-407c-906b-64e90e9ff11b">&lt;code&gt;</bpt>+<ept id="65ac7c1a-39d7-407c-906b-64e90e9ff11b">&lt;/code&gt;</ept> characters with <bpt id="fc8772af-900f-43a5-8c06-fbbe76a8f273">&lt;code&gt;</bpt>-<ept id="fc8772af-900f-43a5-8c06-fbbe76a8f273">&lt;/code&gt;</ept></source>
          <target state="new">[<bpt id="7509a10b-5304-4676-ad29-20f78dfa94a5">&lt;code&gt;</bpt>replace()<ept id="7509a10b-5304-4676-ad29-20f78dfa94a5">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace)  all of the <bpt id="65ac7c1a-39d7-407c-906b-64e90e9ff11b">&lt;code&gt;</bpt>+<ept id="65ac7c1a-39d7-407c-906b-64e90e9ff11b">&lt;/code&gt;</ept> characters with <bpt id="fc8772af-900f-43a5-8c06-fbbe76a8f273">&lt;code&gt;</bpt>-<ept id="fc8772af-900f-43a5-8c06-fbbe76a8f273">&lt;/code&gt;</ept></target>
        </trans-unit>
        <trans-unit id="60a5fdfe-d18e-4834-85bb-4648b5f2131b" xml:space="preserve">
          <source>[<bpt id="2c5fa6aa-668e-45a6-83f7-f8fbbb2bb550">&lt;code&gt;</bpt>replace()<ept id="2c5fa6aa-668e-45a6-83f7-f8fbbb2bb550">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace) all of the <bpt id="b7a6d5db-5d57-4633-8598-fd1855a167bf">&lt;code&gt;</bpt>/<ept id="b7a6d5db-5d57-4633-8598-fd1855a167bf">&lt;/code&gt;</ept> characters with <bpt id="2dabeb87-eed0-4446-9570-35659eee6c7f">&lt;code&gt;</bpt>_<ept id="2dabeb87-eed0-4446-9570-35659eee6c7f">&lt;/code&gt;</ept></source>
          <target state="new">[<bpt id="2c5fa6aa-668e-45a6-83f7-f8fbbb2bb550">&lt;code&gt;</bpt>replace()<ept id="2c5fa6aa-668e-45a6-83f7-f8fbbb2bb550">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace) all of the <bpt id="b7a6d5db-5d57-4633-8598-fd1855a167bf">&lt;code&gt;</bpt>/<ept id="b7a6d5db-5d57-4633-8598-fd1855a167bf">&lt;/code&gt;</ept> characters with <bpt id="2dabeb87-eed0-4446-9570-35659eee6c7f">&lt;code&gt;</bpt>_<ept id="2dabeb87-eed0-4446-9570-35659eee6c7f">&lt;/code&gt;</ept></target>
        </trans-unit>
        <trans-unit id="45292094-1ce8-4b12-963c-ae4cc5841112" xml:space="preserve">
          <source>Date Times can be useful, particularly when you are trying to pull data from a data source that doesn't naturally support <bpt id="0085a4c7-fc66-43c8-9ccf-c831be633a9b">&lt;strong&gt;</bpt>Triggers<ept id="0085a4c7-fc66-43c8-9ccf-c831be633a9b">&lt;/strong&gt;</ept>.</source>
          <target state="new">Date Times can be useful, particularly when you are trying to pull data from a data source that doesn't naturally support <bpt id="0085a4c7-fc66-43c8-9ccf-c831be633a9b">&lt;strong&gt;</bpt>Triggers<ept id="0085a4c7-fc66-43c8-9ccf-c831be633a9b">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="8958de0e-9bab-4900-a359-fe6a38ab538b" xml:space="preserve">
          <source>You can also use Date Times to figure out how long various steps are taking.</source>
          <target state="new">You can also use Date Times to figure out how long various steps are taking.</target>
        </trans-unit>
        <trans-unit id="8affc4fd-6a1b-406a-8706-84e7a6b5d60a" xml:space="preserve">
          <source>In this example, we are extracting the <bpt id="856ff14c-0fc3-42a2-a06f-0bc654ddde35">&lt;code&gt;</bpt>startTime<ept id="856ff14c-0fc3-42a2-a06f-0bc654ddde35">&lt;/code&gt;</ept> of the previous step.</source>
          <target state="new">In this example, we are extracting the <bpt id="856ff14c-0fc3-42a2-a06f-0bc654ddde35">&lt;code&gt;</bpt>startTime<ept id="856ff14c-0fc3-42a2-a06f-0bc654ddde35">&lt;/code&gt;</ept> of the previous step.</target>
        </trans-unit>
        <trans-unit id="8825b08e-19f4-4743-bd08-8b0fc4cb9883" xml:space="preserve">
          <source>Then we are getting the current time and subtracting one second :[<bpt id="cfc8f4ba-2c41-48fe-bc8e-0006c1fbf707">&lt;code&gt;</bpt>addseconds(..., -1)<ept id="cfc8f4ba-2c41-48fe-bc8e-0006c1fbf707">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#addseconds) (you could use other units of time such as <bpt id="0129a030-83a9-491c-a945-e08678747297">&lt;code&gt;</bpt>minutes<ept id="0129a030-83a9-491c-a945-e08678747297">&lt;/code&gt;</ept> or <bpt id="387904b2-191f-433b-9be6-389523610e8e">&lt;code&gt;</bpt>hours<ept id="387904b2-191f-433b-9be6-389523610e8e">&lt;/code&gt;</ept>).</source>
          <target state="new">Then we are getting the current time and subtracting one second :[<bpt id="cfc8f4ba-2c41-48fe-bc8e-0006c1fbf707">&lt;code&gt;</bpt>addseconds(..., -1)<ept id="cfc8f4ba-2c41-48fe-bc8e-0006c1fbf707">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#addseconds) (you could use other units of time such as <bpt id="0129a030-83a9-491c-a945-e08678747297">&lt;code&gt;</bpt>minutes<ept id="0129a030-83a9-491c-a945-e08678747297">&lt;/code&gt;</ept> or <bpt id="387904b2-191f-433b-9be6-389523610e8e">&lt;code&gt;</bpt>hours<ept id="387904b2-191f-433b-9be6-389523610e8e">&lt;/code&gt;</ept>).</target>
        </trans-unit>
        <trans-unit id="eea88aae-f158-4ebf-9b0d-005695657dd9" xml:space="preserve">
          <source>Finally, we can compare these two values.</source>
          <target state="new">Finally, we can compare these two values.</target>
        </trans-unit>
        <trans-unit id="8a416c12-1167-481e-89c3-b9b7dc6672ad" xml:space="preserve">
          <source>If the first is less than the second, then that means more than one second has elapsed since the order was first placed.</source>
          <target state="new">If the first is less than the second, then that means more than one second has elapsed since the order was first placed.</target>
        </trans-unit>
        <trans-unit id="16b59a34-077a-4c8f-b293-bc51e5d6ee8c" xml:space="preserve">
          <source>Also note that we can use string formatters to format dates: in the query string I use [<bpt id="5a179cef-7c64-4226-9220-a3e8847db808">&lt;code&gt;</bpt>utcnow('r')<ept id="5a179cef-7c64-4226-9220-a3e8847db808">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#utcnow) to get the RFC1123.</source>
          <target state="new">Also note that we can use string formatters to format dates: in the query string I use [<bpt id="5a179cef-7c64-4226-9220-a3e8847db808">&lt;code&gt;</bpt>utcnow('r')<ept id="5a179cef-7c64-4226-9220-a3e8847db808">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#utcnow) to get the RFC1123.</target>
        </trans-unit>
        <trans-unit id="da9fff9f-5f8b-404c-b33a-0381e2df13f3" xml:space="preserve">
          <source>All date formatting <bpt id="480b00db-6221-4c78-b67b-588db72aa882">&lt;linkText&gt;</bpt>is documented on MSDN<ept id="480b00db-6221-4c78-b67b-588db72aa882">&lt;/linkText&gt;</ept><bpt id="480b00db-6221-4c78-b67b-588db72aa882">&lt;title&gt;</bpt><ept id="480b00db-6221-4c78-b67b-588db72aa882">&lt;/title&gt;</ept>.</source>
          <target state="new">All date formatting <bpt id="480b00db-6221-4c78-b67b-588db72aa882">&lt;linkText&gt;</bpt>is documented on MSDN<ept id="480b00db-6221-4c78-b67b-588db72aa882">&lt;/linkText&gt;</ept><bpt id="480b00db-6221-4c78-b67b-588db72aa882">&lt;title&gt;</bpt><ept id="480b00db-6221-4c78-b67b-588db72aa882">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="d351f157-31b1-4f79-b33c-fd353b51f2c0" xml:space="preserve">
          <source>Let's say you have different behaviors that you want to run based on some value that you use to kick off your Logic app.</source>
          <target state="new">Let's say you have different behaviors that you want to run based on some value that you use to kick off your Logic app.</target>
        </trans-unit>
        <trans-unit id="b4a9241d-61eb-4e99-9f01-d1ee80e17767" xml:space="preserve">
          <source>You can use the [<bpt id="62825b6b-9726-408e-b968-8ca570d33236">&lt;code&gt;</bpt>triggerOutputs()<ept id="62825b6b-9726-408e-b968-8ca570d33236">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerOutputs) function to get these values out of what you passed in:</source>
          <target state="new">You can use the [<bpt id="62825b6b-9726-408e-b968-8ca570d33236">&lt;code&gt;</bpt>triggerOutputs()<ept id="62825b6b-9726-408e-b968-8ca570d33236">&lt;/code&gt;</ept>](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerOutputs) function to get these values out of what you passed in:</target>
        </trans-unit>
        <trans-unit id="a991f4df-cbb7-4a97-8354-00347a02b932" xml:space="preserve">
          <source>To actually make this work, when you start the run you need to pass the properties you want (in the above example <bpt id="30fa7144-d9ef-400d-8812-cd809b2de563">&lt;code&gt;</bpt>uriToGet<ept id="30fa7144-d9ef-400d-8812-cd809b2de563">&lt;/code&gt;</ept> and <bpt id="edce57e3-0efe-4f8d-afa3-aadc3b274092">&lt;code&gt;</bpt>doMoreLogic<ept id="edce57e3-0efe-4f8d-afa3-aadc3b274092">&lt;/code&gt;</ept>).</source>
          <target state="new">To actually make this work, when you start the run you need to pass the properties you want (in the above example <bpt id="30fa7144-d9ef-400d-8812-cd809b2de563">&lt;code&gt;</bpt>uriToGet<ept id="30fa7144-d9ef-400d-8812-cd809b2de563">&lt;/code&gt;</ept> and <bpt id="edce57e3-0efe-4f8d-afa3-aadc3b274092">&lt;code&gt;</bpt>doMoreLogic<ept id="edce57e3-0efe-4f8d-afa3-aadc3b274092">&lt;/code&gt;</ept>).</target>
        </trans-unit>
        <trans-unit id="15b8e22b-05ac-4db7-83ba-863d66677b10" xml:space="preserve">
          <source>Here is the call you can <bpt id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;linkText&gt;</bpt>use Basic auth for<ept id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;/linkText&gt;</ept><bpt id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;title&gt;</bpt><ept id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;/title&gt;</ept>:</source>
          <target state="new">Here is the call you can <bpt id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;linkText&gt;</bpt>use Basic auth for<ept id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;/linkText&gt;</ept><bpt id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;title&gt;</bpt><ept id="ef2f4786-d993-4d47-bd9b-c7744a1042d8">&lt;/title&gt;</ept>:</target>
        </trans-unit>
        <trans-unit id="12e617d1-dcbe-4379-bd24-513234d08316" xml:space="preserve">
          <source>With the following payload.</source>
          <target state="new">With the following payload.</target>
        </trans-unit>
        <trans-unit id="c27f278b-66cb-4d02-ac38-aabfbdfa37f5" xml:space="preserve">
          <source>Note that you have provided the Logic app with the values to use now:</source>
          <target state="new">Note that you have provided the Logic app with the values to use now:</target>
        </trans-unit>
        <trans-unit id="2269cb8f-6085-4cef-9c5a-7ae8e1da192c" xml:space="preserve">
          <source>When this logic app runs it will call the uri I passed in, and run that additional step because I passed <bpt id="6ff819e5-cb2e-465d-8ce7-704f8dee31d6">&lt;code&gt;</bpt>true<ept id="6ff819e5-cb2e-465d-8ce7-704f8dee31d6">&lt;/code&gt;</ept>.</source>
          <target state="new">When this logic app runs it will call the uri I passed in, and run that additional step because I passed <bpt id="6ff819e5-cb2e-465d-8ce7-704f8dee31d6">&lt;code&gt;</bpt>true<ept id="6ff819e5-cb2e-465d-8ce7-704f8dee31d6">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="5a9e5891-54f7-4d38-99ee-3f8df418683f" xml:space="preserve">
          <source>If you want to only vary parameters at deployment time (not for <bpt id="ab45820b-1249-43e5-9f6a-6754bca764ae">&lt;em&gt;</bpt>each run<ept id="ab45820b-1249-43e5-9f6a-6754bca764ae">&lt;/em&gt;</ept>), then you should use <bpt id="d1451409-779d-4e8e-bbff-2599524359cc">&lt;code&gt;</bpt>parameters<ept id="d1451409-779d-4e8e-bbff-2599524359cc">&lt;/code&gt;</ept> as called out below.</source>
          <target state="new">If you want to only vary parameters at deployment time (not for <bpt id="ab45820b-1249-43e5-9f6a-6754bca764ae">&lt;em&gt;</bpt>each run<ept id="ab45820b-1249-43e5-9f6a-6754bca764ae">&lt;/em&gt;</ept>), then you should use <bpt id="d1451409-779d-4e8e-bbff-2599524359cc">&lt;code&gt;</bpt>parameters<ept id="d1451409-779d-4e8e-bbff-2599524359cc">&lt;/code&gt;</ept> as called out below.</target>
        </trans-unit>
        <trans-unit id="d6fd5ab5-b463-4dea-b3ca-3fb16a457941" xml:space="preserve">
          <source>It is common to have a deployment lifecycle where you have a development environment, a staging environment, and then a production environment.</source>
          <target state="new">It is common to have a deployment lifecycle where you have a development environment, a staging environment, and then a production environment.</target>
        </trans-unit>
        <trans-unit id="7bf3683d-61a8-40a5-a640-c8cf537d3dd2" xml:space="preserve">
          <source>In all of these you may want the same definition, but use different databases, for example.</source>
          <target state="new">In all of these you may want the same definition, but use different databases, for example.</target>
        </trans-unit>
        <trans-unit id="bfa43903-02c8-438a-8ae1-dc1e2270eca4" xml:space="preserve">
          <source>Likewise, you may want to use the same definition across many different regions for high availability, but want each Logic app instance to talk to that region's database.</source>
          <target state="new">Likewise, you may want to use the same definition across many different regions for high availability, but want each Logic app instance to talk to that region's database.</target>
        </trans-unit>
        <trans-unit id="cced7b8b-3d02-4618-b812-d8ccc7ef9db0" xml:space="preserve">
          <source>Note that this is different from taking different parameters at <bpt id="a8ebd1fc-9cfb-4b23-99b6-026959efd5ba">&lt;em&gt;</bpt>runtime<ept id="a8ebd1fc-9cfb-4b23-99b6-026959efd5ba">&lt;/em&gt;</ept>, for that you should use the <bpt id="531f85d1-1d13-4aaa-9ee3-ad1960e793d7">&lt;code&gt;</bpt>trigger()<ept id="531f85d1-1d13-4aaa-9ee3-ad1960e793d7">&lt;/code&gt;</ept> function as called out above.</source>
          <target state="new">Note that this is different from taking different parameters at <bpt id="a8ebd1fc-9cfb-4b23-99b6-026959efd5ba">&lt;em&gt;</bpt>runtime<ept id="a8ebd1fc-9cfb-4b23-99b6-026959efd5ba">&lt;/em&gt;</ept>, for that you should use the <bpt id="531f85d1-1d13-4aaa-9ee3-ad1960e793d7">&lt;code&gt;</bpt>trigger()<ept id="531f85d1-1d13-4aaa-9ee3-ad1960e793d7">&lt;/code&gt;</ept> function as called out above.</target>
        </trans-unit>
        <trans-unit id="b845d455-a8ad-46ce-afab-1194c9b89591" xml:space="preserve">
          <source>You can start with a very simplistic definition like this one:</source>
          <target state="new">You can start with a very simplistic definition like this one:</target>
        </trans-unit>
        <trans-unit id="f015c31a-9bfd-4dd8-b3e7-af7c03372b65" xml:space="preserve">
          <source>Then, in the actual <bpt id="4c62d6b2-9f30-4a6f-abb4-8d86e284884d">&lt;code&gt;</bpt>PUT<ept id="4c62d6b2-9f30-4a6f-abb4-8d86e284884d">&lt;/code&gt;</ept> request for the Logic app you can provide the parameter <bpt id="b93148cc-ffae-4a94-a77a-726daac7b269">&lt;code&gt;</bpt>connection<ept id="b93148cc-ffae-4a94-a77a-726daac7b269">&lt;/code&gt;</ept>.</source>
          <target state="new">Then, in the actual <bpt id="4c62d6b2-9f30-4a6f-abb4-8d86e284884d">&lt;code&gt;</bpt>PUT<ept id="4c62d6b2-9f30-4a6f-abb4-8d86e284884d">&lt;/code&gt;</ept> request for the Logic app you can provide the parameter <bpt id="b93148cc-ffae-4a94-a77a-726daac7b269">&lt;code&gt;</bpt>connection<ept id="b93148cc-ffae-4a94-a77a-726daac7b269">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="a18481c9-29e4-45fd-add8-52445cdd1130" xml:space="preserve">
          <source>Note, as there is no longer a default value this parameter is required in the Logic app payload:</source>
          <target state="new">Note, as there is no longer a default value this parameter is required in the Logic app payload:</target>
        </trans-unit>
        <trans-unit id="11432777-a262-423f-8b24-2564d11a9fc4" xml:space="preserve">
          <source>In each environment you can then provide a different value for the <bpt id="9a4ca9b1-b3ec-44c0-bbc4-25c4922605f2">&lt;code&gt;</bpt>connection<ept id="9a4ca9b1-b3ec-44c0-bbc4-25c4922605f2">&lt;/code&gt;</ept> parameter.</source>
          <target state="new">In each environment you can then provide a different value for the <bpt id="9a4ca9b1-b3ec-44c0-bbc4-25c4922605f2">&lt;code&gt;</bpt>connection<ept id="9a4ca9b1-b3ec-44c0-bbc4-25c4922605f2">&lt;/code&gt;</ept> parameter.</target>
        </trans-unit>
        <trans-unit id="59b04901-5dca-45bf-b4e7-e2f990844ff4" xml:space="preserve">
          <source>See the <bpt id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;linkText&gt;</bpt>REST API documentation<ept id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;/linkText&gt;</ept><bpt id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;title&gt;</bpt><ept id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;/title&gt;</ept> for all of the options you have for creating and managing Logic apps.</source>
          <target state="new">See the <bpt id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;linkText&gt;</bpt>REST API documentation<ept id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;/linkText&gt;</ept><bpt id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;title&gt;</bpt><ept id="7086b34b-9032-427b-aadc-be8d69a59958">&lt;/title&gt;</ept> for all of the options you have for creating and managing Logic apps.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>