<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="7f36bfbf-ba5c-41c8-b493-ae0b5bbd61fc" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="7f36bfbf-ba5c-41c8-b493-ae0b5bbd61fc" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="e34ad68e-77c7-4679-861d-0c3329e71c2f">
        <trans-unit id="fc94bade-834d-4ad0-9e9b-d6c56a2ccc88" xml:space="preserve">
          <source>C# Api App</source>
          <target state="new">C# Api App</target>
        </trans-unit>
        <trans-unit id="d279062a-371a-4b25-8824-4b213788bd39" xml:space="preserve">
          <source>C# Api App</source>
          <target state="new">C# Api App</target>
        </trans-unit>
        <trans-unit id="aa3f7600-031d-468e-8f27-d14915cea8a1" xml:space="preserve">
          <source>The C# API App gives you an easy way to run simple C# expressions <bpt id="daaf5d04-4d90-4ea2-a452-9f4f631b3c1d">&lt;em&gt;</bpt>while your Logic App executes<ept id="daaf5d04-4d90-4ea2-a452-9f4f631b3c1d">&lt;/em&gt;</ept>.</source>
          <target state="new">The C# API App gives you an easy way to run simple C# expressions <bpt id="daaf5d04-4d90-4ea2-a452-9f4f631b3c1d">&lt;em&gt;</bpt>while your Logic App executes<ept id="daaf5d04-4d90-4ea2-a452-9f4f631b3c1d">&lt;/em&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="9c235d92-82d9-4ff8-b3e6-032d18f699c8" xml:space="preserve">
          <source>The key scenario for this API app is when you want the lifecycle of the code that you write to be the same as the Logic App, and you do <bpt id="05e8c66f-19a2-4699-a266-d0f30900b523">&lt;em&gt;</bpt>not<ept id="05e8c66f-19a2-4699-a266-d0f30900b523">&lt;/em&gt;</ept> want the code to be called in any other scenarios.</source>
          <target state="new">The key scenario for this API app is when you want the lifecycle of the code that you write to be the same as the Logic App, and you do <bpt id="05e8c66f-19a2-4699-a266-d0f30900b523">&lt;em&gt;</bpt>not<ept id="05e8c66f-19a2-4699-a266-d0f30900b523">&lt;/em&gt;</ept> want the code to be called in any other scenarios.</target>
        </trans-unit>
        <trans-unit id="d4813907-42bf-4a60-883f-787987ac5c1e" xml:space="preserve">
          <source>On the other hand, if you want a reusable snippet of code that has a lifecycle independent of the Logic app, then you should use the WebJobs API app to create simple code expressions and call them from your Logic app.</source>
          <target state="new">On the other hand, if you want a reusable snippet of code that has a lifecycle independent of the Logic app, then you should use the WebJobs API app to create simple code expressions and call them from your Logic app.</target>
        </trans-unit>
        <trans-unit id="6955c8a9-46c9-4360-9bb2-be385652665d" xml:space="preserve">
          <source>Finally, if you want to include any additional packages, you would need to pass in the assembly (.dll) to the connector as a Base64 encoded binary string (like the output from blob storage).</source>
          <target state="new">Finally, if you want to include any additional packages, you would need to pass in the assembly (.dll) to the connector as a Base64 encoded binary string (like the output from blob storage).</target>
        </trans-unit>
        <trans-unit id="20caf5ce-1eb8-455f-aa3e-069af6bec132" xml:space="preserve">
          <source>If you want more flexibility over packages and assemblies, a WebJob would likely be a better option.</source>
          <target state="new">If you want more flexibility over packages and assemblies, a WebJob would likely be a better option.</target>
        </trans-unit>
        <trans-unit id="666c7368-4678-4b42-b4af-08b77fbdf72f" xml:space="preserve">
          <source>Use the <bpt id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;linkText&gt;</bpt>JavaScript API App<ept id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;/linkText&gt;</ept><bpt id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;title&gt;</bpt><ept id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;/title&gt;</ept> if you would prefer to write your expressions in JS.</source>
          <target state="new">Use the <bpt id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;linkText&gt;</bpt>JavaScript API App<ept id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;/linkText&gt;</ept><bpt id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;title&gt;</bpt><ept id="39ca24ff-67c3-460f-979a-0b55ba363314">&lt;/title&gt;</ept> if you would prefer to write your expressions in JS.</target>
        </trans-unit>
        <trans-unit id="c188560f-9aab-4bac-8cce-feef6031c070" xml:space="preserve">
          <source>To use the C# API App, you need to first create an instance of the C# API app.</source>
          <target state="new">To use the C# API App, you need to first create an instance of the C# API app.</target>
        </trans-unit>
        <trans-unit id="28aeb805-152b-45b4-898f-ce0963649227" xml:space="preserve">
          <source>This can be done either inline while creating a logic app or by selecting the C# API app from the Azure Marketplace.</source>
          <target state="new">This can be done either inline while creating a logic app or by selecting the C# API app from the Azure Marketplace.</target>
        </trans-unit>
        <trans-unit id="330ac0b1-f23a-41b9-9df8-1ab7f1769cde" xml:space="preserve">
          <source>You can create a trigger that the Logic App service will poll (on an interval you define), and, if it returns anything other than <bpt id="f9f4593c-de2b-44bb-9a48-71f586092abd">&lt;code&gt;</bpt>false<ept id="f9f4593c-de2b-44bb-9a48-71f586092abd">&lt;/code&gt;</ept>, the Logic App will run, otherwise, it will wait until the next polling interval to check again.</source>
          <target state="new">You can create a trigger that the Logic App service will poll (on an interval you define), and, if it returns anything other than <bpt id="f9f4593c-de2b-44bb-9a48-71f586092abd">&lt;code&gt;</bpt>false<ept id="f9f4593c-de2b-44bb-9a48-71f586092abd">&lt;/code&gt;</ept>, the Logic App will run, otherwise, it will wait until the next polling interval to check again.</target>
        </trans-unit>
        <trans-unit id="46003dd7-db92-4a38-9e7e-d6633f80ddb5" xml:space="preserve">
          <source>The inputs to the trigger are:</source>
          <target state="new">The inputs to the trigger are:</target>
        </trans-unit>
        <trans-unit id="a8c73ad5-43dd-478a-af16-15a071115726" xml:space="preserve">
          <source><bpt id="7897dc99-92f4-4574-bf43-bb59775cca21">&lt;strong&gt;</bpt>C# Expression<ept id="7897dc99-92f4-4574-bf43-bb59775cca21">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</source>
          <target state="new"><bpt id="7897dc99-92f4-4574-bf43-bb59775cca21">&lt;strong&gt;</bpt>C# Expression<ept id="7897dc99-92f4-4574-bf43-bb59775cca21">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</target>
        </trans-unit>
        <trans-unit id="a68b74d3-2c6a-4eb0-9469-dfc73dcbc6e9" xml:space="preserve">
          <source>It will be invoked inside a function and must return <bpt id="fab1e2e9-27b4-4e94-8ea4-c19d24831eef">&lt;code&gt;</bpt>false<ept id="fab1e2e9-27b4-4e94-8ea4-c19d24831eef">&lt;/code&gt;</ept> when you do not want the Logic app to run, and can return anything else when you want the Logic app to run.</source>
          <target state="new">It will be invoked inside a function and must return <bpt id="fab1e2e9-27b4-4e94-8ea4-c19d24831eef">&lt;code&gt;</bpt>false<ept id="fab1e2e9-27b4-4e94-8ea4-c19d24831eef">&lt;/code&gt;</ept> when you do not want the Logic app to run, and can return anything else when you want the Logic app to run.</target>
        </trans-unit>
        <trans-unit id="22e9b894-0fcb-4b06-9206-2ed3f759330f" xml:space="preserve">
          <source>You will be able to use the content of the response in the actions of the Logic app.</source>
          <target state="new">You will be able to use the content of the response in the actions of the Logic app.</target>
        </trans-unit>
        <trans-unit id="e47a00a5-9011-4370-89d1-c4e38975b08a" xml:space="preserve">
          <source>For example, you could have a simple trigger that will only run your Logic app between the :15 and :30 of the hour:</source>
          <target state="new">For example, you could have a simple trigger that will only run your Logic app between the :15 and :30 of the hour:</target>
        </trans-unit>
        <trans-unit id="8839852a-d427-4278-86b0-bfdd020ba1b7" xml:space="preserve">
          <source>Likewise, you can provide an action to run.</source>
          <target state="new">Likewise, you can provide an action to run.</target>
        </trans-unit>
        <trans-unit id="05ecac19-e821-4ae4-8d23-0df5feee6ec3" xml:space="preserve">
          <source>The inputs to the action are:</source>
          <target state="new">The inputs to the action are:</target>
        </trans-unit>
        <trans-unit id="7a261c3f-ee36-4d7f-85c5-5a51c524343f" xml:space="preserve">
          <source><bpt id="8bb28c89-a3b0-4333-9718-732fc75bd362">&lt;strong&gt;</bpt>C# expression<ept id="8bb28c89-a3b0-4333-9718-732fc75bd362">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</source>
          <target state="new"><bpt id="8bb28c89-a3b0-4333-9718-732fc75bd362">&lt;strong&gt;</bpt>C# expression<ept id="8bb28c89-a3b0-4333-9718-732fc75bd362">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</target>
        </trans-unit>
        <trans-unit id="ce0f5669-2020-4da0-ba94-a169b9f175ee" xml:space="preserve">
          <source>You must include the <bpt id="f3b94e5e-0ef5-4da9-ab45-ab23c564df3c">&lt;code&gt;</bpt>return<ept id="f3b94e5e-0ef5-4da9-ab45-ab23c564df3c">&lt;/code&gt;</ept> statement to get any content.</source>
          <target state="new">You must include the <bpt id="f3b94e5e-0ef5-4da9-ab45-ab23c564df3c">&lt;code&gt;</bpt>return<ept id="f3b94e5e-0ef5-4da9-ab45-ab23c564df3c">&lt;/code&gt;</ept> statement to get any content.</target>
        </trans-unit>
        <trans-unit id="1451ce6b-4130-4d43-b115-75e58883d2f4" xml:space="preserve">
          <source><bpt id="983016b0-c4a6-4de1-ba06-81b3dc57f034">&lt;strong&gt;</bpt>Context object(s)<ept id="983016b0-c4a6-4de1-ba06-81b3dc57f034">&lt;/strong&gt;</ept> - An optional context object that can be passed into the trigger.</source>
          <target state="new"><bpt id="983016b0-c4a6-4de1-ba06-81b3dc57f034">&lt;strong&gt;</bpt>Context object(s)<ept id="983016b0-c4a6-4de1-ba06-81b3dc57f034">&lt;/strong&gt;</ept> - An optional context object that can be passed into the trigger.</target>
        </trans-unit>
        <trans-unit id="f48eda25-0532-4999-bc9f-8e512c71aed7" xml:space="preserve">
          <source>You can define as many properties as you want, but the base must be a JObject <bpt id="19b86e7a-d784-4325-bc95-e7373bc485e1">&lt;code&gt;</bpt>{ ... }<ept id="19b86e7a-d784-4325-bc95-e7373bc485e1">&lt;/code&gt;</ept>, and objects can be referenced in the script via the key name (the value is passed in as a JToken cooresponding to name).</source>
          <target state="new">You can define as many properties as you want, but the base must be a JObject <bpt id="19b86e7a-d784-4325-bc95-e7373bc485e1">&lt;code&gt;</bpt>{ ... }<ept id="19b86e7a-d784-4325-bc95-e7373bc485e1">&lt;/code&gt;</ept>, and objects can be referenced in the script via the key name (the value is passed in as a JToken cooresponding to name).</target>
        </trans-unit>
        <trans-unit id="d3fc0a4d-cfe5-402f-882d-d7b5460e307e" xml:space="preserve">
          <source><bpt id="6bf37583-3e26-4d0a-836c-12aa47d28740">&lt;strong&gt;</bpt>Libraries<ept id="6bf37583-3e26-4d0a-836c-12aa47d28740">&lt;/strong&gt;</ept> - An optional array of .dll files to include on compiling the script.</source>
          <target state="new"><bpt id="6bf37583-3e26-4d0a-836c-12aa47d28740">&lt;strong&gt;</bpt>Libraries<ept id="6bf37583-3e26-4d0a-836c-12aa47d28740">&lt;/strong&gt;</ept> - An optional array of .dll files to include on compiling the script.</target>
        </trans-unit>
        <trans-unit id="b9b87f16-f57d-4515-9828-13eb490b3f34" xml:space="preserve">
          <source>The array uses the following structure, and works best next to a blob storage connector with the .dll as the output:</source>
          <target state="new">The array uses the following structure, and works best next to a blob storage connector with the .dll as the output:</target>
        </trans-unit>
        <trans-unit id="7d20463e-3d70-4242-8267-178be9e338df" xml:space="preserve">
          <source>For example, imagine you are using the Office 365 trigger <bpt id="897a737d-4d24-4681-85de-af9aa25a689f">&lt;strong&gt;</bpt>New Email<ept id="897a737d-4d24-4681-85de-af9aa25a689f">&lt;/strong&gt;</ept>.</source>
          <target state="new">For example, imagine you are using the Office 365 trigger <bpt id="897a737d-4d24-4681-85de-af9aa25a689f">&lt;strong&gt;</bpt>New Email<ept id="897a737d-4d24-4681-85de-af9aa25a689f">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="0b61acb8-f801-482e-a9e5-be9b7d05eada" xml:space="preserve">
          <source>That returns the following object:</source>
          <target state="new">That returns the following object:</target>
        </trans-unit>
        <trans-unit id="72c17995-6fd1-4a1b-a4b0-03a55b06e964" xml:space="preserve">
          <source>But, you want to upload these attachments to a Yammer post.</source>
          <target state="new">But, you want to upload these attachments to a Yammer post.</target>
        </trans-unit>
        <trans-unit id="3933d8b5-1ded-4831-86b9-68b832ad75cd" xml:space="preserve">
          <source>Unfortunately, the schema for Yammer attachments is slightly different.</source>
          <target state="new">Unfortunately, the schema for Yammer attachments is slightly different.</target>
        </trans-unit>
        <trans-unit id="1e5702c7-aa72-4181-ac53-96ef2b2ac8d6" xml:space="preserve">
          <source>Now, you can now parse this inside your Logic app.</source>
          <target state="new">Now, you can now parse this inside your Logic app.</target>
        </trans-unit>
        <trans-unit id="b4d8dabe-df75-43bc-b424-090d951e7502" xml:space="preserve">
          <source>For the context object just pass: <bpt id="08aac837-321b-4864-9cff-c6f5c97a498e">&lt;code&gt;</bpt>@triggerBody()<ept id="08aac837-321b-4864-9cff-c6f5c97a498e">&lt;/code&gt;</ept>, and for the expression, pass:</source>
          <target state="new">For the context object just pass: <bpt id="08aac837-321b-4864-9cff-c6f5c97a498e">&lt;code&gt;</bpt>@triggerBody()<ept id="08aac837-321b-4864-9cff-c6f5c97a498e">&lt;/code&gt;</ept>, and for the expression, pass:</target>
        </trans-unit>
        <trans-unit id="4fee6577-006c-4fa6-a033-120ef81c1be2" xml:space="preserve">
          <source>The action returns the object that you returned from your function in a results object.</source>
          <target state="new">The action returns the object that you returned from your function in a results object.</target>
        </trans-unit>
        <trans-unit id="4224da76-8dbb-40ae-bc54-89e23dd34cc8" xml:space="preserve">
          <source>Thus, in the Yammer API app you can reference <bpt id="6a8e09b2-d422-4465-ad97-94f5c3466a23">&lt;code&gt;</bpt>@body('csapi').results<ept id="6a8e09b2-d422-4465-ad97-94f5c3466a23">&lt;/code&gt;</ept> for the <bpt id="ed6518c7-3bfa-41ac-97ad-c768ce00eea1">&lt;strong&gt;</bpt>Attachments<ept id="ed6518c7-3bfa-41ac-97ad-c768ce00eea1">&lt;/strong&gt;</ept> property.</source>
          <target state="new">Thus, in the Yammer API app you can reference <bpt id="6a8e09b2-d422-4465-ad97-94f5c3466a23">&lt;code&gt;</bpt>@body('csapi').results<ept id="6a8e09b2-d422-4465-ad97-94f5c3466a23">&lt;/code&gt;</ept> for the <bpt id="ed6518c7-3bfa-41ac-97ad-c768ce00eea1">&lt;strong&gt;</bpt>Attachments<ept id="ed6518c7-3bfa-41ac-97ad-c768ce00eea1">&lt;/strong&gt;</ept> property.</target>
        </trans-unit>
        <trans-unit id="f5ae9ee0-ee4f-41ba-aba1-d3beeda8672f" xml:space="preserve">
          <source>Now that the connector is created, you can add it to a business flow using a Logic App.</source>
          <target state="new">Now that the connector is created, you can add it to a business flow using a Logic App.</target>
        </trans-unit>
        <trans-unit id="0c3d4de4-71f3-4c61-b98c-59cee66ca911" xml:space="preserve">
          <source>See <bpt id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;linkText&gt;</bpt>What are Logic Apps?<ept id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;/linkText&gt;</ept><bpt id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;title&gt;</bpt><ept id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;/title&gt;</ept>.</source>
          <target state="new">See <bpt id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;linkText&gt;</bpt>What are Logic Apps?<ept id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;/linkText&gt;</ept><bpt id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;title&gt;</bpt><ept id="996f516d-8413-4880-a743-e43f6eda0b1c">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="c2e9b5b1-4c13-4d86-93e7-6757d907907e" xml:space="preserve">
          <source>You can also review performance statistics and control security to the connector.</source>
          <target state="new">You can also review performance statistics and control security to the connector.</target>
        </trans-unit>
        <trans-unit id="60d0acda-cb51-4e1b-b974-17e12aa1e6b0" xml:space="preserve">
          <source>See <bpt id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;linkText&gt;</bpt>Manage  and Monitor API apps and connector<ept id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;/linkText&gt;</ept><bpt id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;title&gt;</bpt><ept id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;/title&gt;</ept>.</source>
          <target state="new">See <bpt id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;linkText&gt;</bpt>Manage  and Monitor API apps and connector<ept id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;/linkText&gt;</ept><bpt id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;title&gt;</bpt><ept id="798788f8-bd47-4097-980c-5a79cbe5e08d">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="dbbb5e83-a50b-421e-a9d6-436531e44157" xml:space="preserve">
          <source>app-service-logic-create-a-logic-app.md</source>
          <target state="new">app-service-logic-create-a-logic-app.md</target>
        </trans-unit>
      </group>
      <group id="f362cb3c-895c-485f-a8f4-5f397b0334d0" />
    </body>
  </file>
</xliff>