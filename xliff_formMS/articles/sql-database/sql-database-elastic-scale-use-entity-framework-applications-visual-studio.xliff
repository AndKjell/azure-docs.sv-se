<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="3a772f88-b630-4de8-a291-4b00c9ea1f16" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="3a772f88-b630-4de8-a291-4b00c9ea1f16" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="0d6c0931-81c0-4814-8d9f-8c7d6b7a712f">
        <trans-unit id="0db278f8-25c9-4239-9bad-ebd45955e620" xml:space="preserve">
          <source>Using elastic database client library with Entity Framework</source>
          <target state="new">Using elastic database client library with Entity Framework</target>
        </trans-unit>
        <trans-unit id="605c6d36-78b0-4c69-a3a7-37a1af3f1f3e" xml:space="preserve">
          <source>Elastic database client makes it easy to scale, and Entity Framework is easy to use for coding databases</source>
          <target state="new">Elastic database client makes it easy to scale, and Entity Framework is easy to use for coding databases</target>
        </trans-unit>
        <trans-unit id="ff326ba1-0584-40e4-9a0c-3bed4467159c" xml:space="preserve">
          <source>You can use the elastic database client library with Microsoft’s Entity Framework (EF) to build applications that take advantage of database sharding, facilitating scaling-out your application's data tier.</source>
          <target state="new">You can use the elastic database client library with Microsoft’s Entity Framework (EF) to build applications that take advantage of database sharding, facilitating scaling-out your application's data tier.</target>
        </trans-unit>
        <trans-unit id="3cbcbb40-a3c0-454c-9934-a4653f1ac7dd" xml:space="preserve">
          <source>This document shows the changes in an Entity Framework application that are needed to integrate with the elastic database tools' capabilities.</source>
          <target state="new">This document shows the changes in an Entity Framework application that are needed to integrate with the elastic database tools' capabilities.</target>
        </trans-unit>
        <trans-unit id="270e17c3-c577-4a8b-ac9b-8d7dabfa360e" xml:space="preserve">
          <source>The focus is on composing <bpt id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;linkText&gt;</bpt>shard map management<ept id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;/linkText&gt;</ept><bpt id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;title&gt;</bpt><ept id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;/title&gt;</ept> and <bpt id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;linkText&gt;</bpt>data-dependent routing<ept id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;/linkText&gt;</ept><bpt id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;title&gt;</bpt><ept id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;/title&gt;</ept> with the Entity Framework <bpt id="0bd8c3d7-3970-4730-9cb8-12b59f171ab2">&lt;strong&gt;</bpt>Code First<ept id="0bd8c3d7-3970-4730-9cb8-12b59f171ab2">&lt;/strong&gt;</ept> approach.</source>
          <target state="new">The focus is on composing <bpt id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;linkText&gt;</bpt>shard map management<ept id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;/linkText&gt;</ept><bpt id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;title&gt;</bpt><ept id="8e03fb9c-3228-499e-9d66-fad3bedf78f6">&lt;/title&gt;</ept> and <bpt id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;linkText&gt;</bpt>data-dependent routing<ept id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;/linkText&gt;</ept><bpt id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;title&gt;</bpt><ept id="00eb0e2c-6b9e-46b9-b3c5-0bd048f53849">&lt;/title&gt;</ept> with the Entity Framework <bpt id="0bd8c3d7-3970-4730-9cb8-12b59f171ab2">&lt;strong&gt;</bpt>Code First<ept id="0bd8c3d7-3970-4730-9cb8-12b59f171ab2">&lt;/strong&gt;</ept> approach.</target>
        </trans-unit>
        <trans-unit id="656edf6d-bc71-42e1-85dd-448a80da3560" xml:space="preserve">
          <source>The <bpt id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;linkText&gt;</bpt>Code First – New Database<ept id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;/linkText&gt;</ept><bpt id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;title&gt;</bpt><ept id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;/title&gt;</ept> tutorial for EF serves as our running example throughout this document.</source>
          <target state="new">The <bpt id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;linkText&gt;</bpt>Code First – New Database<ept id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;/linkText&gt;</ept><bpt id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;title&gt;</bpt><ept id="5ed6ea27-8c9b-409f-8c34-14b585bce018">&lt;/title&gt;</ept> tutorial for EF serves as our running example throughout this document.</target>
        </trans-unit>
        <trans-unit id="0eeee06a-1761-4c6c-bb7e-3b60ec4b910e" xml:space="preserve">
          <source>The sample code accompanying this document is part of elastic database tools' set of samples in the Visual Studio Code Samples.</source>
          <target state="new">The sample code accompanying this document is part of elastic database tools' set of samples in the Visual Studio Code Samples.</target>
        </trans-unit>
        <trans-unit id="634159bc-8594-4179-825a-d25717869830" xml:space="preserve">
          <source>To download the code for this article:</source>
          <target state="new">To download the code for this article:</target>
        </trans-unit>
        <trans-unit id="52534dc0-19a3-43c6-a452-1bedf32fe788" xml:space="preserve">
          <source>Visual Studio 2012 or later is required.</source>
          <target state="new">Visual Studio 2012 or later is required.</target>
        </trans-unit>
        <trans-unit id="d0303548-d544-41b9-b47e-bf4389c70dce" xml:space="preserve">
          <source>Start Visual Studio.</source>
          <target state="new">Start Visual Studio.</target>
        </trans-unit>
        <trans-unit id="5abc8027-6a0b-4818-b35f-eea1a64cc05e" xml:space="preserve">
          <source>In Visual Studio, select File -&gt; New Project.</source>
          <target state="new">In Visual Studio, select File -&gt; New Project.</target>
        </trans-unit>
        <trans-unit id="06690866-599d-4bca-b6c7-ed0be1546d0b" xml:space="preserve">
          <source>In the ‘New Project’ dialog, navigate to the <bpt id="7a716eca-91c0-4e1f-b425-8bc0ef2cc675">&lt;strong&gt;</bpt>Online Samples<ept id="7a716eca-91c0-4e1f-b425-8bc0ef2cc675">&lt;/strong&gt;</ept> for <bpt id="77d07c25-705b-44fd-8144-cc4fccf76c39">&lt;strong&gt;</bpt>Visual C#<ept id="77d07c25-705b-44fd-8144-cc4fccf76c39">&lt;/strong&gt;</ept> and type "elastic db" into the search box in the upper right.</source>
          <target state="new">In the ‘New Project’ dialog, navigate to the <bpt id="7a716eca-91c0-4e1f-b425-8bc0ef2cc675">&lt;strong&gt;</bpt>Online Samples<ept id="7a716eca-91c0-4e1f-b425-8bc0ef2cc675">&lt;/strong&gt;</ept> for <bpt id="77d07c25-705b-44fd-8144-cc4fccf76c39">&lt;strong&gt;</bpt>Visual C#<ept id="77d07c25-705b-44fd-8144-cc4fccf76c39">&lt;/strong&gt;</ept> and type "elastic db" into the search box in the upper right.</target>
        </trans-unit>
        <trans-unit id="56fa30dd-5880-421b-86a5-7ae1828ca573" xml:space="preserve">
          <source><bpt id="4c4e26b5-d383-4222-9732-5da11b021bd9">&lt;linkText&gt;</bpt>Entity Framework and elastic database sample app<ept id="4c4e26b5-d383-4222-9732-5da11b021bd9">&lt;/linkText&gt;</ept> </source>
          <target state="new"><bpt id="4c4e26b5-d383-4222-9732-5da11b021bd9">&lt;linkText&gt;</bpt>Entity Framework and elastic database sample app<ept id="4c4e26b5-d383-4222-9732-5da11b021bd9">&lt;/linkText&gt;</ept> </target>
        </trans-unit>
        <trans-unit id="e3c3b069-8a43-48fd-a4db-a26836a9f75e" xml:space="preserve">
          <source>Select the sample called <bpt id="e2edf1a9-2aa4-47cc-83ca-bfeacba5108e">&lt;strong&gt;</bpt>Elastic DB Tools for Azure SQL – Entity Framework Integration<ept id="e2edf1a9-2aa4-47cc-83ca-bfeacba5108e">&lt;/strong&gt;</ept>.</source>
          <target state="new">Select the sample called <bpt id="e2edf1a9-2aa4-47cc-83ca-bfeacba5108e">&lt;strong&gt;</bpt>Elastic DB Tools for Azure SQL – Entity Framework Integration<ept id="e2edf1a9-2aa4-47cc-83ca-bfeacba5108e">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="7a18dd0b-28d5-414b-bc76-b135b34d012b" xml:space="preserve">
          <source>After accepting the license, the sample loads.</source>
          <target state="new">After accepting the license, the sample loads.</target>
        </trans-unit>
        <trans-unit id="4a222072-2ecc-4b6e-aad1-8f263ceb14ea" xml:space="preserve">
          <source>To run the sample, you need to create three empty databases in Azure SQL Database:</source>
          <target state="new">To run the sample, you need to create three empty databases in Azure SQL Database:</target>
        </trans-unit>
        <trans-unit id="31938e64-cb13-44c4-899b-9a7b0a37aef4" xml:space="preserve">
          <source>Shard Map Manager database</source>
          <target state="new">Shard Map Manager database</target>
        </trans-unit>
        <trans-unit id="a293e403-1bb7-4729-a119-13962abe26ce" xml:space="preserve">
          <source>Shard 1 database</source>
          <target state="new">Shard 1 database</target>
        </trans-unit>
        <trans-unit id="6f12b0b9-0072-446e-845f-89e50887078f" xml:space="preserve">
          <source>Shard 2 database</source>
          <target state="new">Shard 2 database</target>
        </trans-unit>
        <trans-unit id="4aef64c1-999a-4e9d-b669-4994302eae84" xml:space="preserve">
          <source>Once you have created these databases, fill in the place holders in <bpt id="db457c38-c66b-4713-a72d-863036234528">&lt;strong&gt;</bpt>Program.cs<ept id="db457c38-c66b-4713-a72d-863036234528">&lt;/strong&gt;</ept> with your Azure SQL DB server name, the database names and your credentials to connect to the databases.</source>
          <target state="new">Once you have created these databases, fill in the place holders in <bpt id="db457c38-c66b-4713-a72d-863036234528">&lt;strong&gt;</bpt>Program.cs<ept id="db457c38-c66b-4713-a72d-863036234528">&lt;/strong&gt;</ept> with your Azure SQL DB server name, the database names and your credentials to connect to the databases.</target>
        </trans-unit>
        <trans-unit id="cc494c73-1285-430f-aa0e-0357bee52cab" xml:space="preserve">
          <source>Build the solution in Visual Studio.</source>
          <target state="new">Build the solution in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="bff1802a-f8ff-40ff-a7b4-1a41a0284087" xml:space="preserve">
          <source>Visual Studio will download the required NuGet packages for the elastic database client library, Entity Framework, and Transient Fault handling as part of the build process.</source>
          <target state="new">Visual Studio will download the required NuGet packages for the elastic database client library, Entity Framework, and Transient Fault handling as part of the build process.</target>
        </trans-unit>
        <trans-unit id="8601a2ac-6a89-45f8-a2f8-8c89e280941a" xml:space="preserve">
          <source>Make sure that restoring NuGet packages is enabled for your solution.</source>
          <target state="new">Make sure that restoring NuGet packages is enabled for your solution.</target>
        </trans-unit>
        <trans-unit id="43cb9edf-51b2-434c-b274-7421a35541c9" xml:space="preserve">
          <source>You can enable this setting by right-clicking on the solution file in the Visual Studio Solution Explorer.</source>
          <target state="new">You can enable this setting by right-clicking on the solution file in the Visual Studio Solution Explorer.</target>
        </trans-unit>
        <trans-unit id="24585cfd-67dd-4868-99b8-6d62075aac29" xml:space="preserve">
          <source>Entity Framework developers rely on one of the following four workflows to build applications and to ensure persistence for application objects: </source>
          <target state="new">Entity Framework developers rely on one of the following four workflows to build applications and to ensure persistence for application objects: </target>
        </trans-unit>
        <trans-unit id="482e599a-1581-4062-b4dc-e0810360498e" xml:space="preserve">
          <source><bpt id="f018d971-77a6-4b11-8d22-4833206babc4">&lt;strong&gt;</bpt>Code First (New Database)<ept id="f018d971-77a6-4b11-8d22-4833206babc4">&lt;/strong&gt;</ept>: The EF developer creates the model in the application code and then EF generates the database from it.</source>
          <target state="new"><bpt id="f018d971-77a6-4b11-8d22-4833206babc4">&lt;strong&gt;</bpt>Code First (New Database)<ept id="f018d971-77a6-4b11-8d22-4833206babc4">&lt;/strong&gt;</ept>: The EF developer creates the model in the application code and then EF generates the database from it.</target>
        </trans-unit>
        <trans-unit id="daa102c2-4923-41a4-8eb0-5d40080ab0cd" xml:space="preserve">
          <source><bpt id="c284187b-fa48-4fd2-91f7-79e409bd6365">&lt;strong&gt;</bpt>Code First (Existing Database)<ept id="c284187b-fa48-4fd2-91f7-79e409bd6365">&lt;/strong&gt;</ept>: The developer lets EF generate the application code for the model from an existing database.</source>
          <target state="new"><bpt id="c284187b-fa48-4fd2-91f7-79e409bd6365">&lt;strong&gt;</bpt>Code First (Existing Database)<ept id="c284187b-fa48-4fd2-91f7-79e409bd6365">&lt;/strong&gt;</ept>: The developer lets EF generate the application code for the model from an existing database.</target>
        </trans-unit>
        <trans-unit id="850927f4-bfc2-482c-8165-b0940e14929e" xml:space="preserve">
          <source><bpt id="64f12a19-a575-4d2b-8c45-c6b558305194">&lt;strong&gt;</bpt>Model First<ept id="64f12a19-a575-4d2b-8c45-c6b558305194">&lt;/strong&gt;</ept>: The developer creates the model in the EF designer and then EF creates the database from the model.</source>
          <target state="new"><bpt id="64f12a19-a575-4d2b-8c45-c6b558305194">&lt;strong&gt;</bpt>Model First<ept id="64f12a19-a575-4d2b-8c45-c6b558305194">&lt;/strong&gt;</ept>: The developer creates the model in the EF designer and then EF creates the database from the model.</target>
        </trans-unit>
        <trans-unit id="6bf1f139-601f-44ba-a84b-74c84bb7fc88" xml:space="preserve">
          <source><bpt id="d6d3bedd-95e0-4db1-ac67-39eec174b096">&lt;strong&gt;</bpt>Database First<ept id="d6d3bedd-95e0-4db1-ac67-39eec174b096">&lt;/strong&gt;</ept>: The developer uses EF tooling to infer the model from an existing database.</source>
          <target state="new"><bpt id="d6d3bedd-95e0-4db1-ac67-39eec174b096">&lt;strong&gt;</bpt>Database First<ept id="d6d3bedd-95e0-4db1-ac67-39eec174b096">&lt;/strong&gt;</ept>: The developer uses EF tooling to infer the model from an existing database.</target>
        </trans-unit>
        <trans-unit id="7d972966-5a8c-4da5-8ea3-2ec265062d55" xml:space="preserve">
          <source>All these approaches rely on the DbContext class to transparently manage database connections and database schema for an application.</source>
          <target state="new">All these approaches rely on the DbContext class to transparently manage database connections and database schema for an application.</target>
        </trans-unit>
        <trans-unit id="b16634ea-6e62-4162-a518-90490751f8cc" xml:space="preserve">
          <source>As we will discuss in more detail later in the document, different constructors on the DbContext base class allow for different levels of control over connection creation, database bootstrapping and schema creation.</source>
          <target state="new">As we will discuss in more detail later in the document, different constructors on the DbContext base class allow for different levels of control over connection creation, database bootstrapping and schema creation.</target>
        </trans-unit>
        <trans-unit id="5e487174-c00f-451c-9103-70f4254ed4a7" xml:space="preserve">
          <source>Challenges arise primarily from the fact that the database connection management provided by EF intersects with the connection management capabilities of the data dependent routing interfaces provided by the elastic database client library.</source>
          <target state="new">Challenges arise primarily from the fact that the database connection management provided by EF intersects with the connection management capabilities of the data dependent routing interfaces provided by the elastic database client library.</target>
        </trans-unit>
        <trans-unit id="e42a7a62-daba-4a34-9897-0fdc2acc43e1" xml:space="preserve">
          <source>For term definitions, see <bpt id="333114f9-0476-4bef-b617-67c571236a3f">&lt;linkText&gt;</bpt>Elastic Database tools glossary<ept id="333114f9-0476-4bef-b617-67c571236a3f">&lt;/linkText&gt;</ept><bpt id="333114f9-0476-4bef-b617-67c571236a3f">&lt;title&gt;</bpt><ept id="333114f9-0476-4bef-b617-67c571236a3f">&lt;/title&gt;</ept>.</source>
          <target state="new">For term definitions, see <bpt id="333114f9-0476-4bef-b617-67c571236a3f">&lt;linkText&gt;</bpt>Elastic Database tools glossary<ept id="333114f9-0476-4bef-b617-67c571236a3f">&lt;/linkText&gt;</ept><bpt id="333114f9-0476-4bef-b617-67c571236a3f">&lt;title&gt;</bpt><ept id="333114f9-0476-4bef-b617-67c571236a3f">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="e75ad4b8-5e13-4f6b-9d95-576defb2f835" xml:space="preserve">
          <source>With elastic database client library, you define partitions of your application data called shardlets.</source>
          <target state="new">With elastic database client library, you define partitions of your application data called shardlets.</target>
        </trans-unit>
        <trans-unit id="eea4a8b6-46c9-46b0-9d01-235afa84c1b8" xml:space="preserve">
          <source>Shardlets are identified by a sharding key and are mapped to specific databases.</source>
          <target state="new">Shardlets are identified by a sharding key and are mapped to specific databases.</target>
        </trans-unit>
        <trans-unit id="ab596953-1a0c-4a16-b016-1205a41c0722" xml:space="preserve">
          <source>An application may have as many databases as needed and distribute the shardlets to provide enough capacity or performance given current business requirements.</source>
          <target state="new">An application may have as many databases as needed and distribute the shardlets to provide enough capacity or performance given current business requirements.</target>
        </trans-unit>
        <trans-unit id="ef012a35-5cc1-4d3a-ae03-e25622e5a6d0" xml:space="preserve">
          <source>The mapping of sharding key values to the databases is stored by a shard map provided by the elastic database client APIs.</source>
          <target state="new">The mapping of sharding key values to the databases is stored by a shard map provided by the elastic database client APIs.</target>
        </trans-unit>
        <trans-unit id="e5c7363b-7fac-4781-8c9a-e27f77ef137e" xml:space="preserve">
          <source>We call this capability <bpt id="6c987489-c74a-4705-aa56-6cd15a8fb093">&lt;strong&gt;</bpt>Shard Map Management<ept id="6c987489-c74a-4705-aa56-6cd15a8fb093">&lt;/strong&gt;</ept>, or SMM for short.</source>
          <target state="new">We call this capability <bpt id="6c987489-c74a-4705-aa56-6cd15a8fb093">&lt;strong&gt;</bpt>Shard Map Management<ept id="6c987489-c74a-4705-aa56-6cd15a8fb093">&lt;/strong&gt;</ept>, or SMM for short.</target>
        </trans-unit>
        <trans-unit id="34d1aa75-cc26-46be-aaa4-eec90ad9d26f" xml:space="preserve">
          <source>The shard map also serves as the broker of database connections for requests that carry a sharding key.</source>
          <target state="new">The shard map also serves as the broker of database connections for requests that carry a sharding key.</target>
        </trans-unit>
        <trans-unit id="d47088e1-45f8-4ca7-ae3e-75ac5ef7a1fa" xml:space="preserve">
          <source>We refer to this capability as <bpt id="cf7eeb17-9d20-46fd-be64-551a8e261d6c">&lt;strong&gt;</bpt>data-dependent routing<ept id="cf7eeb17-9d20-46fd-be64-551a8e261d6c">&lt;/strong&gt;</ept>.</source>
          <target state="new">We refer to this capability as <bpt id="cf7eeb17-9d20-46fd-be64-551a8e261d6c">&lt;strong&gt;</bpt>data-dependent routing<ept id="cf7eeb17-9d20-46fd-be64-551a8e261d6c">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="d2764ef8-86c8-452e-a305-5131ddd80f79" xml:space="preserve">
          <source>The shard map manager protects users from inconsistent views into shardlet data that can occur when concurrent shardlet management operations (such as relocating data from one shard to another) are happening.</source>
          <target state="new">The shard map manager protects users from inconsistent views into shardlet data that can occur when concurrent shardlet management operations (such as relocating data from one shard to another) are happening.</target>
        </trans-unit>
        <trans-unit id="68c6fa53-a308-40d3-97ba-b2c48e774714" xml:space="preserve">
          <source>To do so, the shard maps managed by the client library broker the database connections for an application.</source>
          <target state="new">To do so, the shard maps managed by the client library broker the database connections for an application.</target>
        </trans-unit>
        <trans-unit id="9fd9a6f5-b3da-47df-9a0c-5da3b81326aa" xml:space="preserve">
          <source>This allows the shard map functionality to automatically kill a database connection when shard management operations could impact the shardlet that the connection has been created for.</source>
          <target state="new">This allows the shard map functionality to automatically kill a database connection when shard management operations could impact the shardlet that the connection has been created for.</target>
        </trans-unit>
        <trans-unit id="28d58bfb-6080-439c-8269-38c56ec6df99" xml:space="preserve">
          <source>This approach needs to integrate with some of EF’s functionality, such as creating new connections from an existing one to check for database existence.</source>
          <target state="new">This approach needs to integrate with some of EF’s functionality, such as creating new connections from an existing one to check for database existence.</target>
        </trans-unit>
        <trans-unit id="9de0f3ba-1f68-4b76-8cce-29f41f0bbadd" xml:space="preserve">
          <source>In general, our observation has been that the standard DbContext constructors only work reliably for closed database connections that can safely be cloned for EF work.</source>
          <target state="new">In general, our observation has been that the standard DbContext constructors only work reliably for closed database connections that can safely be cloned for EF work.</target>
        </trans-unit>
        <trans-unit id="6466558b-7d64-4b0b-9ace-e43b4c4acd2e" xml:space="preserve">
          <source>The design principle of elastic database instead is to only broker opened connections.</source>
          <target state="new">The design principle of elastic database instead is to only broker opened connections.</target>
        </trans-unit>
        <trans-unit id="88ebff23-b78c-443e-818e-afb8b04719aa" xml:space="preserve">
          <source>One might think that closing a connection brokered by the client library before handing it over to the EF DbContext may solve this issue.</source>
          <target state="new">One might think that closing a connection brokered by the client library before handing it over to the EF DbContext may solve this issue.</target>
        </trans-unit>
        <trans-unit id="55551efe-7556-4861-ad0a-777411aaf4aa" xml:space="preserve">
          <source>However, by closing the connection and relying on EF to re-open it, one foregoes the validation and consistency checks performed by the library.</source>
          <target state="new">However, by closing the connection and relying on EF to re-open it, one foregoes the validation and consistency checks performed by the library.</target>
        </trans-unit>
        <trans-unit id="e8a44dc4-f71a-458f-a582-7b8b06b2d180" xml:space="preserve">
          <source>The migrations functionality in EF, however, uses these connections to manage the underlying database schema in a way that is transparent to the application.</source>
          <target state="new">The migrations functionality in EF, however, uses these connections to manage the underlying database schema in a way that is transparent to the application.</target>
        </trans-unit>
        <trans-unit id="d53ea20d-1f0c-4a8b-8cc3-961c29f342e7" xml:space="preserve">
          <source>Ideally, we would like to retain and combine all these capabilities from both the elastic database client library and EF in the same application.</source>
          <target state="new">Ideally, we would like to retain and combine all these capabilities from both the elastic database client library and EF in the same application.</target>
        </trans-unit>
        <trans-unit id="f309694c-3979-48a2-a2d9-ae85e743f20d" xml:space="preserve">
          <source>The following section discusses these properties and requirements in more detail.</source>
          <target state="new">The following section discusses these properties and requirements in more detail.</target>
        </trans-unit>
        <trans-unit id="6d63aec9-227f-4111-935f-a56efb1f5412" xml:space="preserve">
          <source>When working with both the elastic database client library and Entity Framework APIs, we want to retain the following properties: </source>
          <target state="new">When working with both the elastic database client library and Entity Framework APIs, we want to retain the following properties: </target>
        </trans-unit>
        <trans-unit id="c9ab0743-afac-4630-903d-376b0bb3a4e9" xml:space="preserve">
          <source><bpt id="e44ae9a8-4780-445f-9001-60082ab9943e">&lt;strong&gt;</bpt>Scale-out<ept id="e44ae9a8-4780-445f-9001-60082ab9943e">&lt;/strong&gt;</ept>: To add or remove databases from the data tier of the sharded application as necessary for the capacity demands of the application.</source>
          <target state="new"><bpt id="e44ae9a8-4780-445f-9001-60082ab9943e">&lt;strong&gt;</bpt>Scale-out<ept id="e44ae9a8-4780-445f-9001-60082ab9943e">&lt;/strong&gt;</ept>: To add or remove databases from the data tier of the sharded application as necessary for the capacity demands of the application.</target>
        </trans-unit>
        <trans-unit id="b6109733-eee1-49f1-8c87-b40c0e363c98" xml:space="preserve">
          <source>This means control over the the creation and deletion of databases and using the elastic database shard map manager APIs to manage databases, and mappings of shardlets.</source>
          <target state="new">This means control over the the creation and deletion of databases and using the elastic database shard map manager APIs to manage databases, and mappings of shardlets.</target>
        </trans-unit>
        <trans-unit id="9d4c4fb5-3f38-4a71-9f76-a041fdf77aa0" xml:space="preserve">
          <source><bpt id="c74f68eb-8159-4980-a3d9-4906bb8534df">&lt;strong&gt;</bpt>Consistency<ept id="c74f68eb-8159-4980-a3d9-4906bb8534df">&lt;/strong&gt;</ept>: The application employs sharding, and uses the data dependent routing capabilities of the client library.</source>
          <target state="new"><bpt id="c74f68eb-8159-4980-a3d9-4906bb8534df">&lt;strong&gt;</bpt>Consistency<ept id="c74f68eb-8159-4980-a3d9-4906bb8534df">&lt;/strong&gt;</ept>: The application employs sharding, and uses the data dependent routing capabilities of the client library.</target>
        </trans-unit>
        <trans-unit id="0262a747-86a7-4f3e-b7bb-619c73fdc473" xml:space="preserve">
          <source>To avoid corruption or wrong query results, connections are brokered through the shard map manager.</source>
          <target state="new">To avoid corruption or wrong query results, connections are brokered through the shard map manager.</target>
        </trans-unit>
        <trans-unit id="8251c26f-bb00-4416-ad94-b7dd39c454da" xml:space="preserve">
          <source>This also retains validation and consistency.</source>
          <target state="new">This also retains validation and consistency.</target>
        </trans-unit>
        <trans-unit id="9841d0df-3b26-4182-b183-79f890f4d65d" xml:space="preserve">
          <source><bpt id="cd4d0da3-0358-4e8f-a887-13c44fcc84d1">&lt;strong&gt;</bpt>Code First<ept id="cd4d0da3-0358-4e8f-a887-13c44fcc84d1">&lt;/strong&gt;</ept>: To retain the convenience of EF’s code first paradigm.</source>
          <target state="new"><bpt id="cd4d0da3-0358-4e8f-a887-13c44fcc84d1">&lt;strong&gt;</bpt>Code First<ept id="cd4d0da3-0358-4e8f-a887-13c44fcc84d1">&lt;/strong&gt;</ept>: To retain the convenience of EF’s code first paradigm.</target>
        </trans-unit>
        <trans-unit id="c42c08fd-4ecd-4cec-b47a-e130e0ef8cc7" xml:space="preserve">
          <source>In Code First, classes in the application are mapped transparently to the underlying database structures.</source>
          <target state="new">In Code First, classes in the application are mapped transparently to the underlying database structures.</target>
        </trans-unit>
        <trans-unit id="abc7adcc-6cac-4859-b3e8-41a568cc49e4" xml:space="preserve">
          <source>The application code interacts with DbSets that mask most aspects involved in the underlying database processing.</source>
          <target state="new">The application code interacts with DbSets that mask most aspects involved in the underlying database processing.</target>
        </trans-unit>
        <trans-unit id="c4fe67a8-3415-4512-bbad-e679e20a0f1c" xml:space="preserve">
          <source><bpt id="10cfb50d-8bcc-4ad1-a64c-8bd7616f6878">&lt;strong&gt;</bpt>Schema<ept id="10cfb50d-8bcc-4ad1-a64c-8bd7616f6878">&lt;/strong&gt;</ept>: Entity Framework handles initial database schema creation and subsequent schema evolution through migrations.</source>
          <target state="new"><bpt id="10cfb50d-8bcc-4ad1-a64c-8bd7616f6878">&lt;strong&gt;</bpt>Schema<ept id="10cfb50d-8bcc-4ad1-a64c-8bd7616f6878">&lt;/strong&gt;</ept>: Entity Framework handles initial database schema creation and subsequent schema evolution through migrations.</target>
        </trans-unit>
        <trans-unit id="7ba16a5a-ba69-4961-877f-32e96742e90b" xml:space="preserve">
          <source>By retaining these capabilities, adapting your app is easy as the data evolves.</source>
          <target state="new">By retaining these capabilities, adapting your app is easy as the data evolves.</target>
        </trans-unit>
        <trans-unit id="d2b35493-e07b-4e70-bbac-82479839dd87" xml:space="preserve">
          <source>The following guidance instructs how to satisfy these requirements for Code First applications using elastic database tools.</source>
          <target state="new">The following guidance instructs how to satisfy these requirements for Code First applications using elastic database tools.</target>
        </trans-unit>
        <trans-unit id="3f619a78-98af-4e7d-9ab7-e148af4812c2" xml:space="preserve">
          <source>Database connections with Entity Framework are typically managed through subclasses of <bpt id="b467c80d-bb4d-4b8b-a5ee-8d8d04020baa">&lt;strong&gt;</bpt>DbContext<ept id="b467c80d-bb4d-4b8b-a5ee-8d8d04020baa">&lt;/strong&gt;</ept>.</source>
          <target state="new">Database connections with Entity Framework are typically managed through subclasses of <bpt id="b467c80d-bb4d-4b8b-a5ee-8d8d04020baa">&lt;strong&gt;</bpt>DbContext<ept id="b467c80d-bb4d-4b8b-a5ee-8d8d04020baa">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="ec2b400e-045b-4716-8232-2c1f2da6334f" xml:space="preserve">
          <source>Create these subclasses by deriving from <bpt id="83774237-790c-496c-80f5-925ae6053355">&lt;strong&gt;</bpt>DbContext<ept id="83774237-790c-496c-80f5-925ae6053355">&lt;/strong&gt;</ept>.</source>
          <target state="new">Create these subclasses by deriving from <bpt id="83774237-790c-496c-80f5-925ae6053355">&lt;strong&gt;</bpt>DbContext<ept id="83774237-790c-496c-80f5-925ae6053355">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="aa3521ea-3363-402a-82f4-10814d0611a3" xml:space="preserve">
          <source>This is where you define your <bpt id="82cc32ff-ccbc-489b-81a7-2a208c7fe6d9">&lt;strong&gt;</bpt>DbSets<ept id="82cc32ff-ccbc-489b-81a7-2a208c7fe6d9">&lt;/strong&gt;</ept> that implement the database-backed collections of CLR objects for your application.</source>
          <target state="new">This is where you define your <bpt id="82cc32ff-ccbc-489b-81a7-2a208c7fe6d9">&lt;strong&gt;</bpt>DbSets<ept id="82cc32ff-ccbc-489b-81a7-2a208c7fe6d9">&lt;/strong&gt;</ept> that implement the database-backed collections of CLR objects for your application.</target>
        </trans-unit>
        <trans-unit id="193be976-f48a-440f-aae6-0d43913a857e" xml:space="preserve">
          <source>In the context of data dependent routing, we can identify several helpful properties that do not necessarily hold for other EF code first application scenarios:</source>
          <target state="new">In the context of data dependent routing, we can identify several helpful properties that do not necessarily hold for other EF code first application scenarios:</target>
        </trans-unit>
        <trans-unit id="17569874-ddb8-4fd7-89ac-9e12fca0b892" xml:space="preserve">
          <source>The database already exists and has been registered in the elastic database shard map.</source>
          <target state="new">The database already exists and has been registered in the elastic database shard map.</target>
        </trans-unit>
        <trans-unit id="0c4309a0-0d90-428e-b3ad-e952ece7df1d" xml:space="preserve">
          <source>The schema of the application has already been deployed to the database (explained below).</source>
          <target state="new">The schema of the application has already been deployed to the database (explained below).</target>
        </trans-unit>
        <trans-unit id="5e5f3385-6934-4945-9ce8-6d110da049cc" xml:space="preserve">
          <source>Data-dependent routing connections to the database are brokered by the shard map.</source>
          <target state="new">Data-dependent routing connections to the database are brokered by the shard map.</target>
        </trans-unit>
        <trans-unit id="c65922d0-0305-4eed-8225-bfd11fafc9d7" xml:space="preserve">
          <source>To integrate <bpt id="25d3dd05-8461-441d-a6e4-9c8b04b64dfa">&lt;strong&gt;</bpt>DbContexts<ept id="25d3dd05-8461-441d-a6e4-9c8b04b64dfa">&lt;/strong&gt;</ept> with data-dependent routing for scale-out:</source>
          <target state="new">To integrate <bpt id="25d3dd05-8461-441d-a6e4-9c8b04b64dfa">&lt;strong&gt;</bpt>DbContexts<ept id="25d3dd05-8461-441d-a6e4-9c8b04b64dfa">&lt;/strong&gt;</ept> with data-dependent routing for scale-out:</target>
        </trans-unit>
        <trans-unit id="83c958b2-9cb3-46bc-b65b-9688bad1dbd5" xml:space="preserve">
          <source>Create physical database connections through the elastic database client interfaces of the shard map manager, </source>
          <target state="new">Create physical database connections through the elastic database client interfaces of the shard map manager, </target>
        </trans-unit>
        <trans-unit id="bf9f2476-5ed3-46c3-90d5-8134ef566b26" xml:space="preserve">
          <source>Wrap the connection with the <bpt id="2dbd4d0c-9a4f-41f3-8b12-82b7751a83ba">&lt;strong&gt;</bpt>DbContext<ept id="2dbd4d0c-9a4f-41f3-8b12-82b7751a83ba">&lt;/strong&gt;</ept> subclass</source>
          <target state="new">Wrap the connection with the <bpt id="2dbd4d0c-9a4f-41f3-8b12-82b7751a83ba">&lt;strong&gt;</bpt>DbContext<ept id="2dbd4d0c-9a4f-41f3-8b12-82b7751a83ba">&lt;/strong&gt;</ept> subclass</target>
        </trans-unit>
        <trans-unit id="04cc7175-747d-453c-9bfc-68bd4e6fac8c" xml:space="preserve">
          <source>Pass the connection down into the <bpt id="f7de33f0-af5b-465f-b1a6-484245d4e15b">&lt;strong&gt;</bpt>DbContext<ept id="f7de33f0-af5b-465f-b1a6-484245d4e15b">&lt;/strong&gt;</ept> base classes to ensure all the processing on the EF side happens as well.</source>
          <target state="new">Pass the connection down into the <bpt id="f7de33f0-af5b-465f-b1a6-484245d4e15b">&lt;strong&gt;</bpt>DbContext<ept id="f7de33f0-af5b-465f-b1a6-484245d4e15b">&lt;/strong&gt;</ept> base classes to ensure all the processing on the EF side happens as well.</target>
        </trans-unit>
        <trans-unit id="414f7a90-9c8e-4ebe-84d0-ec721cf14849" xml:space="preserve">
          <source>The following code example illustrates this approach.</source>
          <target state="new">The following code example illustrates this approach.</target>
        </trans-unit>
        <trans-unit id="fe168b68-ceb6-4505-ab8a-6f379cf993f2" xml:space="preserve">
          <source>(This code is also in the accompanying Visual Studio project)</source>
          <target state="new">(This code is also in the accompanying Visual Studio project)</target>
        </trans-unit>
        <trans-unit id="1e4741a4-6814-42e4-9545-29e7f5d716fe" xml:space="preserve">
          <source>A new constructor replaces the default constructor in the DbContext subclass </source>
          <target state="new">A new constructor replaces the default constructor in the DbContext subclass </target>
        </trans-unit>
        <trans-unit id="d4522cf4-e6aa-47eb-8db7-6e886c357882" xml:space="preserve">
          <source>The new constructor takes the arguments that are required for data dependent routing through elastic database client library:</source>
          <target state="new">The new constructor takes the arguments that are required for data dependent routing through elastic database client library:</target>
        </trans-unit>
        <trans-unit id="9018fcf0-dc46-4a90-a278-bb9af8e86a72" xml:space="preserve">
          <source>the shard map to access the data-dependent routing interfaces,</source>
          <target state="new">the shard map to access the data-dependent routing interfaces,</target>
        </trans-unit>
        <trans-unit id="f923f6b9-c1fd-428c-8117-8b6d2fa328ef" xml:space="preserve">
          <source>the sharding key to identify the shardlet,</source>
          <target state="new">the sharding key to identify the shardlet,</target>
        </trans-unit>
        <trans-unit id="7eabb0a1-44eb-4d99-abc0-5f3ed775d33c" xml:space="preserve">
          <source>a connection string with the credentials for the data-dependent routing connection to the shard.</source>
          <target state="new">a connection string with the credentials for the data-dependent routing connection to the shard.</target>
        </trans-unit>
        <trans-unit id="e6bea193-6497-4941-b7fd-357da8476fbe" xml:space="preserve">
          <source>The call to the base class constructor takes a detour into a static method that performs all the steps necessary for data-dependent routing.</source>
          <target state="new">The call to the base class constructor takes a detour into a static method that performs all the steps necessary for data-dependent routing.</target>
        </trans-unit>
        <trans-unit id="97116ff0-7094-467b-826a-497986ad7608" xml:space="preserve">
          <source>It uses the OpenConnectionForKey call of the elastic database client interfaces on the shard map to establish an open connection.</source>
          <target state="new">It uses the OpenConnectionForKey call of the elastic database client interfaces on the shard map to establish an open connection.</target>
        </trans-unit>
        <trans-unit id="c2b2cbb6-ae94-4be3-98e0-9fade4e308db" xml:space="preserve">
          <source>The shard map creates the open connection to the shard that holds the shardlet for the given sharding key.</source>
          <target state="new">The shard map creates the open connection to the shard that holds the shardlet for the given sharding key.</target>
        </trans-unit>
        <trans-unit id="e30f4959-8db4-4f5b-8f85-0b8c81740089" xml:space="preserve">
          <source>This open connection is passed back to the base class constructor of DbContext to indicate that this connection is to be used by EF instead of letting EF create a new connection automatically.</source>
          <target state="new">This open connection is passed back to the base class constructor of DbContext to indicate that this connection is to be used by EF instead of letting EF create a new connection automatically.</target>
        </trans-unit>
        <trans-unit id="68844f5e-a1f4-4daa-89f4-10bcb1913384" xml:space="preserve">
          <source>This way the connection has been tagged by the elastic database client API so that it can guarantee consistency under shard map management operations.</source>
          <target state="new">This way the connection has been tagged by the elastic database client API so that it can guarantee consistency under shard map management operations.</target>
        </trans-unit>
        <trans-unit id="ba0aa52d-616b-47de-93ae-1dd36bc3395a" xml:space="preserve">
          <source>Use the new constructor for your DbContext subclass instead of the default constructor in your code.</source>
          <target state="new">Use the new constructor for your DbContext subclass instead of the default constructor in your code.</target>
        </trans-unit>
        <trans-unit id="53cc3df6-60b7-4486-a843-8b927a2590cf" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="new">Here is an example:</target>
        </trans-unit>
        <trans-unit id="668f350b-9aee-4a41-b272-38c0fddd8dd6" xml:space="preserve">
          <source>The new constructor opens the connection to the shard that holds the data for the shardlet identified by the value of <bpt id="ab6586b8-4b0a-4fa7-a0d0-84cc66a1cf25">&lt;strong&gt;</bpt>tenantid1<ept id="ab6586b8-4b0a-4fa7-a0d0-84cc66a1cf25">&lt;/strong&gt;</ept>.</source>
          <target state="new">The new constructor opens the connection to the shard that holds the data for the shardlet identified by the value of <bpt id="ab6586b8-4b0a-4fa7-a0d0-84cc66a1cf25">&lt;strong&gt;</bpt>tenantid1<ept id="ab6586b8-4b0a-4fa7-a0d0-84cc66a1cf25">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="90d2fe9f-836d-4119-8931-ed4880560d33" xml:space="preserve">
          <source>The code in the <bpt id="6e4f9f71-6157-4142-993d-008cea9b3ae2">&lt;strong&gt;</bpt>using<ept id="6e4f9f71-6157-4142-993d-008cea9b3ae2">&lt;/strong&gt;</ept> block stays unchanged to access the <bpt id="51ea2e20-c439-4d5f-97e1-48378d2f3de7">&lt;strong&gt;</bpt>DbSet<ept id="51ea2e20-c439-4d5f-97e1-48378d2f3de7">&lt;/strong&gt;</ept> for blogs using EF on the shard for <bpt id="b1a4be97-14c9-4e21-81e5-caeb65f1ea39">&lt;strong&gt;</bpt>tenantid1<ept id="b1a4be97-14c9-4e21-81e5-caeb65f1ea39">&lt;/strong&gt;</ept>.</source>
          <target state="new">The code in the <bpt id="6e4f9f71-6157-4142-993d-008cea9b3ae2">&lt;strong&gt;</bpt>using<ept id="6e4f9f71-6157-4142-993d-008cea9b3ae2">&lt;/strong&gt;</ept> block stays unchanged to access the <bpt id="51ea2e20-c439-4d5f-97e1-48378d2f3de7">&lt;strong&gt;</bpt>DbSet<ept id="51ea2e20-c439-4d5f-97e1-48378d2f3de7">&lt;/strong&gt;</ept> for blogs using EF on the shard for <bpt id="b1a4be97-14c9-4e21-81e5-caeb65f1ea39">&lt;strong&gt;</bpt>tenantid1<ept id="b1a4be97-14c9-4e21-81e5-caeb65f1ea39">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="8d9f6582-bb9f-415e-94ca-dc341e51a589" xml:space="preserve">
          <source>This changes semantics for the code in the using block such that all database operations are now scoped to the one shard where <bpt id="923a1ee3-62e3-4c26-9297-4923560fbb6c">&lt;strong&gt;</bpt>tenantid1<ept id="923a1ee3-62e3-4c26-9297-4923560fbb6c">&lt;/strong&gt;</ept> is kept.</source>
          <target state="new">This changes semantics for the code in the using block such that all database operations are now scoped to the one shard where <bpt id="923a1ee3-62e3-4c26-9297-4923560fbb6c">&lt;strong&gt;</bpt>tenantid1<ept id="923a1ee3-62e3-4c26-9297-4923560fbb6c">&lt;/strong&gt;</ept> is kept.</target>
        </trans-unit>
        <trans-unit id="92af9533-5603-44d5-bf0f-e406672e3cdf" xml:space="preserve">
          <source>For instance, a LINQ query over the blogs <bpt id="f6938c4b-a2c1-44dc-90a1-05cb37c82e7f">&lt;strong&gt;</bpt>DbSet<ept id="f6938c4b-a2c1-44dc-90a1-05cb37c82e7f">&lt;/strong&gt;</ept> would only return blogs stored on the current shard, but not the ones stored on other shards.</source>
          <target state="new">For instance, a LINQ query over the blogs <bpt id="f6938c4b-a2c1-44dc-90a1-05cb37c82e7f">&lt;strong&gt;</bpt>DbSet<ept id="f6938c4b-a2c1-44dc-90a1-05cb37c82e7f">&lt;/strong&gt;</ept> would only return blogs stored on the current shard, but not the ones stored on other shards.</target>
        </trans-unit>
        <trans-unit id="953134d2-6d68-44b5-939c-8af076ee66a7" xml:space="preserve">
          <source>The Microsoft Patterns &amp; Practices team published the <bpt id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;linkText&gt;</bpt>The Transient Fault Handling Application Block<ept id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;/linkText&gt;</ept><bpt id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;title&gt;</bpt><ept id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;/title&gt;</ept>. The library is used with elastic scale client library in combination with EF. However, ensure that any transient exception returns to a place where we can ensure that the new constructor is being used after a transient fault so that any new connection attempt is made using the constructors we have tweaked. Otherwise, a connection to the correct shard is not guaranteed, and there are no assurances the connection is maintained as changes to the shard map occur. </source>
          <target state="new">The Microsoft Patterns &amp; Practices team published the <bpt id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;linkText&gt;</bpt>The Transient Fault Handling Application Block<ept id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;/linkText&gt;</ept><bpt id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;title&gt;</bpt><ept id="238c916a-06c0-4610-8bcc-2289621c68d8">&lt;/title&gt;</ept>. The library is used with elastic scale client library in combination with EF. However, ensure that any transient exception returns to a place where we can ensure that the new constructor is being used after a transient fault so that any new connection attempt is made using the constructors we have tweaked. Otherwise, a connection to the correct shard is not guaranteed, and there are no assurances the connection is maintained as changes to the shard map occur. </target>
        </trans-unit>
        <trans-unit id="1101ab75-3d06-4c97-8d1e-27742b3ce095" xml:space="preserve">
          <source>The following code sample illustrates how a SQL retry policy can be used around the new <bpt id="3cd6b40b-e258-4b1b-96b7-af4b899c072b">&lt;strong&gt;</bpt>DbContext<ept id="3cd6b40b-e258-4b1b-96b7-af4b899c072b">&lt;/strong&gt;</ept> subclass constructors: </source>
          <target state="new">The following code sample illustrates how a SQL retry policy can be used around the new <bpt id="3cd6b40b-e258-4b1b-96b7-af4b899c072b">&lt;strong&gt;</bpt>DbContext<ept id="3cd6b40b-e258-4b1b-96b7-af4b899c072b">&lt;/strong&gt;</ept> subclass constructors: </target>
        </trans-unit>
        <trans-unit id="b80885ce-6da1-4054-90d2-4e4cb96dedd2" xml:space="preserve">
          <source><bpt id="825d8706-d17a-40fe-84a8-52ba9c39ef52">&lt;strong&gt;</bpt>SqlDatabaseUtils.SqlRetryPolicy<ept id="825d8706-d17a-40fe-84a8-52ba9c39ef52">&lt;/strong&gt;</ept> in the code above is defined as a <bpt id="26f143b4-b75b-4634-be72-199a0ade5e4f">&lt;strong&gt;</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="26f143b4-b75b-4634-be72-199a0ade5e4f">&lt;/strong&gt;</ept> with a retry count of 10, and 5 seconds wait time between retries.</source>
          <target state="new"><bpt id="825d8706-d17a-40fe-84a8-52ba9c39ef52">&lt;strong&gt;</bpt>SqlDatabaseUtils.SqlRetryPolicy<ept id="825d8706-d17a-40fe-84a8-52ba9c39ef52">&lt;/strong&gt;</ept> in the code above is defined as a <bpt id="26f143b4-b75b-4634-be72-199a0ade5e4f">&lt;strong&gt;</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="26f143b4-b75b-4634-be72-199a0ade5e4f">&lt;/strong&gt;</ept> with a retry count of 10, and 5 seconds wait time between retries.</target>
        </trans-unit>
        <trans-unit id="0e0f950a-adc1-47a0-917a-ec124611b357" xml:space="preserve">
          <source>This approach is similar to the guidance for EF and user-initiated transactions (see <bpt id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;linkText&gt;</bpt>Limitations with Retrying Execution Strategies (EF6 onwards)<ept id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;/linkText&gt;</ept><bpt id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;title&gt;</bpt><ept id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;/title&gt;</ept>.</source>
          <target state="new">This approach is similar to the guidance for EF and user-initiated transactions (see <bpt id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;linkText&gt;</bpt>Limitations with Retrying Execution Strategies (EF6 onwards)<ept id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;/linkText&gt;</ept><bpt id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;title&gt;</bpt><ept id="30ec5612-dc65-4c40-b265-023fa0d530c8">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="85fd779a-1b6e-467e-9f71-4496dc98da07" xml:space="preserve">
          <source>Both situations require that the application program controls the scope to which the transient exception returns: to either reopen the transaction, or (as shown) recreate the context from the proper constructor that uses the elastic database client library.</source>
          <target state="new">Both situations require that the application program controls the scope to which the transient exception returns: to either reopen the transaction, or (as shown) recreate the context from the proper constructor that uses the elastic database client library.</target>
        </trans-unit>
        <trans-unit id="701203e5-4b33-43b2-8854-f5768a20de53" xml:space="preserve">
          <source>The need to control where transient exceptions take us back in scope also precludes the use of the built-in <bpt id="cde1d326-7269-458d-bfc5-d6748bd56707">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="cde1d326-7269-458d-bfc5-d6748bd56707">&lt;/strong&gt;</ept> that comes with EF.</source>
          <target state="new">The need to control where transient exceptions take us back in scope also precludes the use of the built-in <bpt id="cde1d326-7269-458d-bfc5-d6748bd56707">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="cde1d326-7269-458d-bfc5-d6748bd56707">&lt;/strong&gt;</ept> that comes with EF.</target>
        </trans-unit>
        <trans-unit id="7bc7fa1c-76a9-450e-a569-b3dac6d76fa9" xml:space="preserve">
          <source><bpt id="73f78686-af55-4dcd-90e7-afa7e047cf1b">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="73f78686-af55-4dcd-90e7-afa7e047cf1b">&lt;/strong&gt;</ept> would reopen a connection but not use <bpt id="2fa7a8ab-36ed-4319-916e-f005012108b7">&lt;strong&gt;</bpt>OpenConnectionForKey<ept id="2fa7a8ab-36ed-4319-916e-f005012108b7">&lt;/strong&gt;</ept> and therefore bypass all the validation that is performed as part of the <bpt id="3dc89993-5a80-4437-a372-fc2b34ad2c55">&lt;strong&gt;</bpt>OpenConnectionForKey<ept id="3dc89993-5a80-4437-a372-fc2b34ad2c55">&lt;/strong&gt;</ept> call.</source>
          <target state="new"><bpt id="73f78686-af55-4dcd-90e7-afa7e047cf1b">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="73f78686-af55-4dcd-90e7-afa7e047cf1b">&lt;/strong&gt;</ept> would reopen a connection but not use <bpt id="2fa7a8ab-36ed-4319-916e-f005012108b7">&lt;strong&gt;</bpt>OpenConnectionForKey<ept id="2fa7a8ab-36ed-4319-916e-f005012108b7">&lt;/strong&gt;</ept> and therefore bypass all the validation that is performed as part of the <bpt id="3dc89993-5a80-4437-a372-fc2b34ad2c55">&lt;strong&gt;</bpt>OpenConnectionForKey<ept id="3dc89993-5a80-4437-a372-fc2b34ad2c55">&lt;/strong&gt;</ept> call.</target>
        </trans-unit>
        <trans-unit id="6a44a481-09d4-4428-b0fd-f12f03ba2218" xml:space="preserve">
          <source>Instead, the code sample uses the built-in <bpt id="2d2d0ea6-68a0-476b-964b-e9e9db710fe1">&lt;strong&gt;</bpt>DefaultExecutionStrategy<ept id="2d2d0ea6-68a0-476b-964b-e9e9db710fe1">&lt;/strong&gt;</ept> that also comes with EF.</source>
          <target state="new">Instead, the code sample uses the built-in <bpt id="2d2d0ea6-68a0-476b-964b-e9e9db710fe1">&lt;strong&gt;</bpt>DefaultExecutionStrategy<ept id="2d2d0ea6-68a0-476b-964b-e9e9db710fe1">&lt;/strong&gt;</ept> that also comes with EF.</target>
        </trans-unit>
        <trans-unit id="7f672a03-8e89-4b7f-b49a-f943ba21c914" xml:space="preserve">
          <source>As opposed to <bpt id="25b09a63-c987-4c58-866c-775ad518c072">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="25b09a63-c987-4c58-866c-775ad518c072">&lt;/strong&gt;</ept>, it works correctly in combination with the retry policy from Transient Fault Handling.</source>
          <target state="new">As opposed to <bpt id="25b09a63-c987-4c58-866c-775ad518c072">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="25b09a63-c987-4c58-866c-775ad518c072">&lt;/strong&gt;</ept>, it works correctly in combination with the retry policy from Transient Fault Handling.</target>
        </trans-unit>
        <trans-unit id="b51a64e2-c2e1-4df3-b999-17c92e07e6f3" xml:space="preserve">
          <source>The execution policy is set in the <bpt id="9d1ff4b1-f116-41a6-8c12-2bc778c548a5">&lt;strong&gt;</bpt>ElasticScaleDbConfiguration<ept id="9d1ff4b1-f116-41a6-8c12-2bc778c548a5">&lt;/strong&gt;</ept> class.</source>
          <target state="new">The execution policy is set in the <bpt id="9d1ff4b1-f116-41a6-8c12-2bc778c548a5">&lt;strong&gt;</bpt>ElasticScaleDbConfiguration<ept id="9d1ff4b1-f116-41a6-8c12-2bc778c548a5">&lt;/strong&gt;</ept> class.</target>
        </trans-unit>
        <trans-unit id="08f30817-a884-464e-82f0-a2b1d70ecb4e" xml:space="preserve">
          <source>Note that we decided not to use <bpt id="e37c4b27-09ee-4804-8ea7-8036f608de20">&lt;strong&gt;</bpt>DefaultSqlExecutionStrategy<ept id="e37c4b27-09ee-4804-8ea7-8036f608de20">&lt;/strong&gt;</ept> since it suggests to use <bpt id="57c51c75-ba85-4576-917b-297732dac794">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="57c51c75-ba85-4576-917b-297732dac794">&lt;/strong&gt;</ept> if transient exceptions occur - which would lead to wrong behavior as discussed.</source>
          <target state="new">Note that we decided not to use <bpt id="e37c4b27-09ee-4804-8ea7-8036f608de20">&lt;strong&gt;</bpt>DefaultSqlExecutionStrategy<ept id="e37c4b27-09ee-4804-8ea7-8036f608de20">&lt;/strong&gt;</ept> since it suggests to use <bpt id="57c51c75-ba85-4576-917b-297732dac794">&lt;strong&gt;</bpt>SqlAzureExecutionStrategy<ept id="57c51c75-ba85-4576-917b-297732dac794">&lt;/strong&gt;</ept> if transient exceptions occur - which would lead to wrong behavior as discussed.</target>
        </trans-unit>
        <trans-unit id="4ad271dc-a264-4c10-b5a7-4319ac453278" xml:space="preserve">
          <source>For more information on the different retry policies and EF, see <bpt id="079795ec-ef09-4e96-8850-17675281bee2">&lt;linkText&gt;</bpt>Connection Resiliency in EF<ept id="079795ec-ef09-4e96-8850-17675281bee2">&lt;/linkText&gt;</ept><bpt id="079795ec-ef09-4e96-8850-17675281bee2">&lt;title&gt;</bpt><ept id="079795ec-ef09-4e96-8850-17675281bee2">&lt;/title&gt;</ept>.</source>
          <target state="new">For more information on the different retry policies and EF, see <bpt id="079795ec-ef09-4e96-8850-17675281bee2">&lt;linkText&gt;</bpt>Connection Resiliency in EF<ept id="079795ec-ef09-4e96-8850-17675281bee2">&lt;/linkText&gt;</ept><bpt id="079795ec-ef09-4e96-8850-17675281bee2">&lt;title&gt;</bpt><ept id="079795ec-ef09-4e96-8850-17675281bee2">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="df944c89-dbcc-402c-8c62-51bf32aa479b" xml:space="preserve">
          <source>The code examples above illustrate the default constructor re-writes required for your application in order to use  data dependent routing with the Entity Framework.</source>
          <target state="new">The code examples above illustrate the default constructor re-writes required for your application in order to use  data dependent routing with the Entity Framework.</target>
        </trans-unit>
        <trans-unit id="727fc7b9-4544-44ad-80f9-89e1f64a48c8" xml:space="preserve">
          <source>The following table generalizes this approach to other constructors.</source>
          <target state="new">The following table generalizes this approach to other constructors.</target>
        </trans-unit>
        <trans-unit id="1766c5ff-7006-426e-bea0-5d5fb2fae8a3" xml:space="preserve">
          <source>Current Constructor</source>
          <target state="new">Current Constructor</target>
        </trans-unit>
        <trans-unit id="535f0091-3c71-42ba-b875-f04b37f8389b" xml:space="preserve">
          <source>Rewritten Constructor for data</source>
          <target state="new">Rewritten Constructor for data</target>
        </trans-unit>
        <trans-unit id="6c69e62b-39d3-462f-8865-773a8234579c" xml:space="preserve">
          <source>Base Constructor</source>
          <target state="new">Base Constructor</target>
        </trans-unit>
        <trans-unit id="1a75d428-00ac-45e3-af2e-258cce1ce54d" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="6ee001cb-fc19-438f-b72c-23a7c2c3e9ce" xml:space="preserve">
          <source>MyContext()</source>
          <target state="new">MyContext()</target>
        </trans-unit>
        <trans-unit id="95324793-cce6-4b5b-b9f7-8edba5f071dd" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey)</target>
        </trans-unit>
        <trans-unit id="dc4dd407-037d-4026-bec2-d31a06bfa3c5" xml:space="preserve">
          <source>DbContext(DbConnection, bool)</source>
          <target state="new">DbContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="c5aa3267-b491-4b3c-8440-0cb66842ba88" xml:space="preserve">
          <source>The connection needs to be a function of the shard map and the data-dependent routing key.</source>
          <target state="new">The connection needs to be a function of the shard map and the data-dependent routing key.</target>
        </trans-unit>
        <trans-unit id="24e6b721-a64b-431d-a39e-339c9bb21326" xml:space="preserve">
          <source>You need to by-pass automatic connection creation by EF and instead use the shard map to broker the connection.</source>
          <target state="new">You need to by-pass automatic connection creation by EF and instead use the shard map to broker the connection.</target>
        </trans-unit>
        <trans-unit id="8479a149-c823-42ba-be05-0fdd836a0ff7" xml:space="preserve">
          <source>MyContext(string)</source>
          <target state="new">MyContext(string)</target>
        </trans-unit>
        <trans-unit id="fcf5c637-fde5-44d4-bfb9-cebd1d4ff607" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey)</target>
        </trans-unit>
        <trans-unit id="fa3a8b92-a99b-4c26-b476-93fc914562ac" xml:space="preserve">
          <source>DbContext(DbConnection, bool)</source>
          <target state="new">DbContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="e3b8323c-545e-4b14-a6be-7de264864e3b" xml:space="preserve">
          <source>The connection is a function of the shard map and the data-dependent routing key.</source>
          <target state="new">The connection is a function of the shard map and the data-dependent routing key.</target>
        </trans-unit>
        <trans-unit id="1b985472-f095-4c78-8520-9f55e4e95716" xml:space="preserve">
          <source>A fixed database name or connection string will not work as they by-pass validation by the shard map.</source>
          <target state="new">A fixed database name or connection string will not work as they by-pass validation by the shard map.</target>
        </trans-unit>
        <trans-unit id="18c5dd05-d288-41c9-8df1-b6b2564d75eb" xml:space="preserve">
          <source>MyContext(DbCompiledModel)</source>
          <target state="new">MyContext(DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="a1566b67-a57f-41d4-8904-7d1babd986f6" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="3a122a7c-10ab-4a95-b6e7-ef95fd6bdb6a" xml:space="preserve">
          <source>DbContext(DbConnection, DbCompiledModel, bool)</source>
          <target state="new">DbContext(DbConnection, DbCompiledModel, bool)</target>
        </trans-unit>
        <trans-unit id="b7209c38-d33f-4665-81ec-e568729bf040" xml:space="preserve">
          <source>The connection will get created for the given shard map and sharding key with the model provided.</source>
          <target state="new">The connection will get created for the given shard map and sharding key with the model provided.</target>
        </trans-unit>
        <trans-unit id="27060212-05e5-45d4-81ab-3d39461a4bb0" xml:space="preserve">
          <source>The compiled model will be passed on to the base c’tor.</source>
          <target state="new">The compiled model will be passed on to the base c’tor.</target>
        </trans-unit>
        <trans-unit id="e7d0f0f4-cf2f-48b9-8371-f9425acff579" xml:space="preserve">
          <source>MyContext(DbConnection, bool)</source>
          <target state="new">MyContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="9dc05db9-aa7d-4fc2-a9e1-ebbf9ad84712" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, bool)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, bool)</target>
        </trans-unit>
        <trans-unit id="b437f84d-4150-4b3f-ae06-8b8022afe719" xml:space="preserve">
          <source>DbContext(DbConnection, bool)</source>
          <target state="new">DbContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="c3f8eb97-f7a7-4138-b4e8-2599df7ba0dd" xml:space="preserve">
          <source>The connection needs to be inferred from the shard map and the key.</source>
          <target state="new">The connection needs to be inferred from the shard map and the key.</target>
        </trans-unit>
        <trans-unit id="7b22bd4e-b43d-471a-8cae-84606b31275b" xml:space="preserve">
          <source>It cannot be provided as an input (unless that input was already using the shard map and the key).</source>
          <target state="new">It cannot be provided as an input (unless that input was already using the shard map and the key).</target>
        </trans-unit>
        <trans-unit id="fc1b92f5-9358-41ce-a929-aabfc085519f" xml:space="preserve">
          <source>The Boolean will be passed on.</source>
          <target state="new">The Boolean will be passed on.</target>
        </trans-unit>
        <trans-unit id="80024698-5c2e-4b7b-ac7d-a6337754ae14" xml:space="preserve">
          <source>MyContext(string, DbCompiledModel)</source>
          <target state="new">MyContext(string, DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="b3db2c2d-2e13-462d-905d-b20ba41585f0" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="78900a9c-7c5c-4106-8b0f-708b1b3caf28" xml:space="preserve">
          <source>DbContext(DbConnection, DbCompiledModel, bool)</source>
          <target state="new">DbContext(DbConnection, DbCompiledModel, bool)</target>
        </trans-unit>
        <trans-unit id="0051a52f-c71e-4f26-830f-5aefeae44160" xml:space="preserve">
          <source>The connection needs to be inferred from the shard map and the key.</source>
          <target state="new">The connection needs to be inferred from the shard map and the key.</target>
        </trans-unit>
        <trans-unit id="143b8039-1da7-4dd1-afa6-f1f2b52e6cc0" xml:space="preserve">
          <source>It cannot be provided as an input (unless that input was using the shard map and the key).</source>
          <target state="new">It cannot be provided as an input (unless that input was using the shard map and the key).</target>
        </trans-unit>
        <trans-unit id="6dd264b2-71df-4572-9df0-abde89d8eb75" xml:space="preserve">
          <source>The compiled model will be passed on.</source>
          <target state="new">The compiled model will be passed on.</target>
        </trans-unit>
        <trans-unit id="4ad0484b-6021-4a78-a6b7-07fb04b85698" xml:space="preserve">
          <source>MyContext(ObjectContext, bool)</source>
          <target state="new">MyContext(ObjectContext, bool)</target>
        </trans-unit>
        <trans-unit id="2b9a6af0-83f2-4b08-acaf-a8d48264d335" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, ObjectContext, bool)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, ObjectContext, bool)</target>
        </trans-unit>
        <trans-unit id="8c59f776-a184-4c3e-a206-c8f95c421b88" xml:space="preserve">
          <source>DbContext(ObjectContext, bool)</source>
          <target state="new">DbContext(ObjectContext, bool)</target>
        </trans-unit>
        <trans-unit id="8390cc63-35f1-4229-9e25-92feb052b0b3" xml:space="preserve">
          <source>The new constructor needs to ensure that any connection in the ObjectContext passed as an input is re-routed to a connection managed by Elastic Scale.</source>
          <target state="new">The new constructor needs to ensure that any connection in the ObjectContext passed as an input is re-routed to a connection managed by Elastic Scale.</target>
        </trans-unit>
        <trans-unit id="3268bd01-27e1-45fa-8be8-e54bd6a97cab" xml:space="preserve">
          <source>A detailed discussion of ObjectContexts is beyond the scope of this document.</source>
          <target state="new">A detailed discussion of ObjectContexts is beyond the scope of this document.</target>
        </trans-unit>
        <trans-unit id="f62fa99d-c45a-46c2-a359-bc8bbf2132f9" xml:space="preserve">
          <source>MyContext(DbConnection, DbCompiledModel,bool)</source>
          <target state="new">MyContext(DbConnection, DbCompiledModel,bool)</target>
        </trans-unit>
        <trans-unit id="3dfff64a-2271-4e93-9684-8e48001d7849" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, DbCompiledModel, bool)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, DbCompiledModel, bool)</target>
        </trans-unit>
        <trans-unit id="dc342031-ef8c-4f83-b546-79edca4c1bdf" xml:space="preserve">
          <source>DbContext(DbConnection, DbCompiledModel, bool);</source>
          <target state="new">DbContext(DbConnection, DbCompiledModel, bool);</target>
        </trans-unit>
        <trans-unit id="0d5048ca-d410-4563-a47a-fa12f8f8eee0" xml:space="preserve">
          <source>The connection needs to be inferred from the shard map and the key.</source>
          <target state="new">The connection needs to be inferred from the shard map and the key.</target>
        </trans-unit>
        <trans-unit id="f12eb9da-6da4-4ba6-a8ba-90c0273e12e9" xml:space="preserve">
          <source>The connection cannot be provided as an input (unless that input was already using the shard map and the key).</source>
          <target state="new">The connection cannot be provided as an input (unless that input was already using the shard map and the key).</target>
        </trans-unit>
        <trans-unit id="abf9d96d-2996-46c7-92ce-a039307895d9" xml:space="preserve">
          <source>Model and Boolean are passed on to the base class constructor.</source>
          <target state="new">Model and Boolean are passed on to the base class constructor.</target>
        </trans-unit>
        <trans-unit id="5ec60207-ed79-4752-a31e-f23c6005edf1" xml:space="preserve">
          <source>Automatic schema management is a convenience provided by the Entity Framework.</source>
          <target state="new">Automatic schema management is a convenience provided by the Entity Framework.</target>
        </trans-unit>
        <trans-unit id="cd3b707f-1d28-44ba-a326-311ce2b438b0" xml:space="preserve">
          <source>In the context of applications using elastic database tools, we want to retain this capability to automatically provision the schema to newly created shards when databases are added to the sharded application.</source>
          <target state="new">In the context of applications using elastic database tools, we want to retain this capability to automatically provision the schema to newly created shards when databases are added to the sharded application.</target>
        </trans-unit>
        <trans-unit id="15ee30de-1f4d-4f5b-9a81-240c4f5c4e47" xml:space="preserve">
          <source>The primary use case is to increase capacity at the data tier for sharded applications using EF.</source>
          <target state="new">The primary use case is to increase capacity at the data tier for sharded applications using EF.</target>
        </trans-unit>
        <trans-unit id="4abe243d-3dfb-4418-91b6-2988428da7fa" xml:space="preserve">
          <source>Relying on EF’s capabilities for schema management reduces the database administration effort with a sharded application built on EF.</source>
          <target state="new">Relying on EF’s capabilities for schema management reduces the database administration effort with a sharded application built on EF.</target>
        </trans-unit>
        <trans-unit id="3425c459-fe41-408b-b265-5d85a1f63ef9" xml:space="preserve">
          <source>Schema deployment through EF migrations works best on <bpt id="5a250e51-3b03-4f25-b3fa-6aa1473af8d9">&lt;strong&gt;</bpt>unopened connections<ept id="5a250e51-3b03-4f25-b3fa-6aa1473af8d9">&lt;/strong&gt;</ept>.</source>
          <target state="new">Schema deployment through EF migrations works best on <bpt id="5a250e51-3b03-4f25-b3fa-6aa1473af8d9">&lt;strong&gt;</bpt>unopened connections<ept id="5a250e51-3b03-4f25-b3fa-6aa1473af8d9">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="e10ccb15-14c1-4eef-852a-4f290fc8fc16" xml:space="preserve">
          <source>This is in contrast to the scenario for data dependent routing that relies on the opened connection provided by the elastic database client API.</source>
          <target state="new">This is in contrast to the scenario for data dependent routing that relies on the opened connection provided by the elastic database client API.</target>
        </trans-unit>
        <trans-unit id="f9b81e4c-e97f-41b4-9eec-72a51edc8b28" xml:space="preserve">
          <source>Another difference is the consistency requirement: While desirable to ensure consistency for all data-dependent routing connections to protect against concurrent shard map manipulation, it is not a concern with initial schema deployment to a new database that has not yet been registered in the shard map, and not yet been allocated to hold shardlets.</source>
          <target state="new">Another difference is the consistency requirement: While desirable to ensure consistency for all data-dependent routing connections to protect against concurrent shard map manipulation, it is not a concern with initial schema deployment to a new database that has not yet been registered in the shard map, and not yet been allocated to hold shardlets.</target>
        </trans-unit>
        <trans-unit id="3fdfd254-95e5-4810-998f-505140f01124" xml:space="preserve">
          <source>We can therefore rely on regular database connections for this scenarios, as opposed to data-dependent routing.</source>
          <target state="new">We can therefore rely on regular database connections for this scenarios, as opposed to data-dependent routing.</target>
        </trans-unit>
        <trans-unit id="036e11ee-076b-4e57-9dd5-a91fef0e332b" xml:space="preserve">
          <source>This leads to an approach where schema deployment through EF migrations is tightly coupled with the registration of the new database as a shard in the application’s shard map.</source>
          <target state="new">This leads to an approach where schema deployment through EF migrations is tightly coupled with the registration of the new database as a shard in the application’s shard map.</target>
        </trans-unit>
        <trans-unit id="516ba69f-ff75-448c-8e52-952c2f189f70" xml:space="preserve">
          <source>This relies on the following prerequisites:</source>
          <target state="new">This relies on the following prerequisites:</target>
        </trans-unit>
        <trans-unit id="1af86cfe-66ab-4be4-8959-614b302a5623" xml:space="preserve">
          <source>The database has already been created.</source>
          <target state="new">The database has already been created.</target>
        </trans-unit>
        <trans-unit id="8a5789a5-41bf-4fde-9da9-f43f9b27882e" xml:space="preserve">
          <source>The database is empty – it holds no user schema and no user data.</source>
          <target state="new">The database is empty – it holds no user schema and no user data.</target>
        </trans-unit>
        <trans-unit id="65c8b977-27b2-4aeb-b52a-f3eb57d2e780" xml:space="preserve">
          <source>The database cannot yet be accessed through the elastic database client APIs for data-dependent routing.</source>
          <target state="new">The database cannot yet be accessed through the elastic database client APIs for data-dependent routing.</target>
        </trans-unit>
        <trans-unit id="661bf57c-9de5-4870-8c51-90c6137767f7" xml:space="preserve">
          <source>With these prerequisites in place, we can create a regular un-opened <bpt id="c03672df-b330-4432-889b-01b00a62ee0c">&lt;strong&gt;</bpt>SqlConnection<ept id="c03672df-b330-4432-889b-01b00a62ee0c">&lt;/strong&gt;</ept> to kick off EF migrations for schema deployment.</source>
          <target state="new">With these prerequisites in place, we can create a regular un-opened <bpt id="c03672df-b330-4432-889b-01b00a62ee0c">&lt;strong&gt;</bpt>SqlConnection<ept id="c03672df-b330-4432-889b-01b00a62ee0c">&lt;/strong&gt;</ept> to kick off EF migrations for schema deployment.</target>
        </trans-unit>
        <trans-unit id="3d5d946a-4c9f-4c62-8763-3df2ddc9e6fd" xml:space="preserve">
          <source>The following code sample illustrates this approach.</source>
          <target state="new">The following code sample illustrates this approach.</target>
        </trans-unit>
        <trans-unit id="fa86c9dc-6c9c-4f17-b222-41b35566c40e" xml:space="preserve">
          <source>This sample shows the method <bpt id="043b814a-172f-43dd-9f6a-d1d46c1fa1cf">&lt;strong&gt;</bpt>RegisterNewShard<ept id="043b814a-172f-43dd-9f6a-d1d46c1fa1cf">&lt;/strong&gt;</ept> that registers the shard in the shard map, deploys the schema through EF migrations, and stores a mapping of a sharding key to the shard.</source>
          <target state="new">This sample shows the method <bpt id="043b814a-172f-43dd-9f6a-d1d46c1fa1cf">&lt;strong&gt;</bpt>RegisterNewShard<ept id="043b814a-172f-43dd-9f6a-d1d46c1fa1cf">&lt;/strong&gt;</ept> that registers the shard in the shard map, deploys the schema through EF migrations, and stores a mapping of a sharding key to the shard.</target>
        </trans-unit>
        <trans-unit id="bde733bb-5afc-4df9-b8ba-766f9b42e223" xml:space="preserve">
          <source>It relies on a constructor of the <bpt id="c61e6329-3e1f-4d58-a991-020fe2aa0984">&lt;strong&gt;</bpt>DbContext<ept id="c61e6329-3e1f-4d58-a991-020fe2aa0984">&lt;/strong&gt;</ept> subclass (<bpt id="d66f4763-66ca-4e79-9508-60a39a570177">&lt;strong&gt;</bpt>ElasticScaleContext<ept id="d66f4763-66ca-4e79-9508-60a39a570177">&lt;/strong&gt;</ept> in the sample) that takes a SQL connection string as input.</source>
          <target state="new">It relies on a constructor of the <bpt id="c61e6329-3e1f-4d58-a991-020fe2aa0984">&lt;strong&gt;</bpt>DbContext<ept id="c61e6329-3e1f-4d58-a991-020fe2aa0984">&lt;/strong&gt;</ept> subclass (<bpt id="d66f4763-66ca-4e79-9508-60a39a570177">&lt;strong&gt;</bpt>ElasticScaleContext<ept id="d66f4763-66ca-4e79-9508-60a39a570177">&lt;/strong&gt;</ept> in the sample) that takes a SQL connection string as input.</target>
        </trans-unit>
        <trans-unit id="6301d11d-f752-4919-a590-c6afe3a0cd98" xml:space="preserve">
          <source>The code of this constructor is straight-forward, as the following example shows:</source>
          <target state="new">The code of this constructor is straight-forward, as the following example shows:</target>
        </trans-unit>
        <trans-unit id="765032e0-c942-4e39-9f92-2618244fe6db" xml:space="preserve">
          <source>One might have used the version of the constructor inherited from the base class.</source>
          <target state="new">One might have used the version of the constructor inherited from the base class.</target>
        </trans-unit>
        <trans-unit id="5247b175-993b-44c2-807c-dc428e5b585d" xml:space="preserve">
          <source>But the code needs to ensure that the default initializer for EF is used when connecting.</source>
          <target state="new">But the code needs to ensure that the default initializer for EF is used when connecting.</target>
        </trans-unit>
        <trans-unit id="453cc94a-a5ab-4520-b473-b21c301c37aa" xml:space="preserve">
          <source>Hence the short detour into the static method before calling into the base class constructor with the connection string.</source>
          <target state="new">Hence the short detour into the static method before calling into the base class constructor with the connection string.</target>
        </trans-unit>
        <trans-unit id="394fcfb7-1792-4e47-b673-ed23c002dcb0" xml:space="preserve">
          <source>Note that the registration of shards should run in a different app domain or process to ensure that the initializer settings for EF do not conflict.</source>
          <target state="new">Note that the registration of shards should run in a different app domain or process to ensure that the initializer settings for EF do not conflict.</target>
        </trans-unit>
        <trans-unit id="6fe6c5d8-bcf9-4893-b3e3-5fbc5404a95a" xml:space="preserve">
          <source>The approaches outlined in this document entail a couple of limitations: </source>
          <target state="new">The approaches outlined in this document entail a couple of limitations: </target>
        </trans-unit>
        <trans-unit id="3054c998-b134-46d3-a062-f3d538e1e078" xml:space="preserve">
          <source>EF applications that use <bpt id="cde76b05-65a1-443f-af01-3fa12ef99c75">&lt;strong&gt;</bpt>LocalDb<ept id="cde76b05-65a1-443f-af01-3fa12ef99c75">&lt;/strong&gt;</ept> first need to migrate to a regular SQL Server database before using elastic database client library.</source>
          <target state="new">EF applications that use <bpt id="cde76b05-65a1-443f-af01-3fa12ef99c75">&lt;strong&gt;</bpt>LocalDb<ept id="cde76b05-65a1-443f-af01-3fa12ef99c75">&lt;/strong&gt;</ept> first need to migrate to a regular SQL Server database before using elastic database client library.</target>
        </trans-unit>
        <trans-unit id="347105f0-afa4-4c75-825a-78703507a4cb" xml:space="preserve">
          <source>Scaling out an application through sharding with Elastic Scale is not possible with <bpt id="108da8c4-0aba-47bb-b134-660888991191">&lt;strong&gt;</bpt>LocalDb<ept id="108da8c4-0aba-47bb-b134-660888991191">&lt;/strong&gt;</ept>.</source>
          <target state="new">Scaling out an application through sharding with Elastic Scale is not possible with <bpt id="108da8c4-0aba-47bb-b134-660888991191">&lt;strong&gt;</bpt>LocalDb<ept id="108da8c4-0aba-47bb-b134-660888991191">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="e396a112-94f8-4fcb-af8d-1cb131620c30" xml:space="preserve">
          <source>Note that development can still use <bpt id="d81c9953-fe8a-476b-9da4-411745bf86dc">&lt;strong&gt;</bpt>LocalDb<ept id="d81c9953-fe8a-476b-9da4-411745bf86dc">&lt;/strong&gt;</ept>.</source>
          <target state="new">Note that development can still use <bpt id="d81c9953-fe8a-476b-9da4-411745bf86dc">&lt;strong&gt;</bpt>LocalDb<ept id="d81c9953-fe8a-476b-9da4-411745bf86dc">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="b94b89d4-cf4b-4516-93c2-2930c13f7e38" xml:space="preserve">
          <source>Any changes to the application that imply database schema changes need to go through EF migrations on all shards.</source>
          <target state="new">Any changes to the application that imply database schema changes need to go through EF migrations on all shards.</target>
        </trans-unit>
        <trans-unit id="cd72f776-74ff-4b80-ac4e-39f63c8aa0e2" xml:space="preserve">
          <source>The sample code for this document does not demonstrate how to do this.</source>
          <target state="new">The sample code for this document does not demonstrate how to do this.</target>
        </trans-unit>
        <trans-unit id="6e0c4c54-8cff-40a0-92ba-9b4c0af5100c" xml:space="preserve">
          <source>Consider using Update-Database with a ConnectionString parameter to iterate over all shards; or extract the T-SQL script for the pending migration using Update-Database with the –Script option and apply the T-SQL script to your shards.</source>
          <target state="new">Consider using Update-Database with a ConnectionString parameter to iterate over all shards; or extract the T-SQL script for the pending migration using Update-Database with the –Script option and apply the T-SQL script to your shards.</target>
        </trans-unit>
        <trans-unit id="23d0f2a7-7d26-4fc6-8ae3-5b27d90e2263" xml:space="preserve">
          <source>Given a request, it is assumed that all of its database processing is contained within a single shard as identified by the sharding key provided by the request.</source>
          <target state="new">Given a request, it is assumed that all of its database processing is contained within a single shard as identified by the sharding key provided by the request.</target>
        </trans-unit>
        <trans-unit id="d7129401-60db-4dd7-ab2f-b1df4e6013de" xml:space="preserve">
          <source>However, this assumption does not always hold true.</source>
          <target state="new">However, this assumption does not always hold true.</target>
        </trans-unit>
        <trans-unit id="a0c08fd9-9f5a-4cf0-8b94-1a43693e5ac9" xml:space="preserve">
          <source>For example, when it is not possible to make a sharding key available.</source>
          <target state="new">For example, when it is not possible to make a sharding key available.</target>
        </trans-unit>
        <trans-unit id="77245ff4-19aa-45c1-8799-bc7a70c4e16c" xml:space="preserve">
          <source>To address this, the client library provides the <bpt id="2a0e9e85-6fc5-46c4-8eb7-c5d9691e075f">&lt;strong&gt;</bpt>MultiShardQuery<ept id="2a0e9e85-6fc5-46c4-8eb7-c5d9691e075f">&lt;/strong&gt;</ept> class that implements a connection abstraction for querying over several shards.</source>
          <target state="new">To address this, the client library provides the <bpt id="2a0e9e85-6fc5-46c4-8eb7-c5d9691e075f">&lt;strong&gt;</bpt>MultiShardQuery<ept id="2a0e9e85-6fc5-46c4-8eb7-c5d9691e075f">&lt;/strong&gt;</ept> class that implements a connection abstraction for querying over several shards.</target>
        </trans-unit>
        <trans-unit id="c8e0e175-58bc-4d56-bb80-6441f5d47492" xml:space="preserve">
          <source>Learning to use the <bpt id="c9a3233b-1c12-4713-9fa7-9b6141937d71">&lt;strong&gt;</bpt>MultiShardQuery<ept id="c9a3233b-1c12-4713-9fa7-9b6141937d71">&lt;/strong&gt;</ept> in combination with EF is beyond the scope of this document</source>
          <target state="new">Learning to use the <bpt id="c9a3233b-1c12-4713-9fa7-9b6141937d71">&lt;strong&gt;</bpt>MultiShardQuery<ept id="c9a3233b-1c12-4713-9fa7-9b6141937d71">&lt;/strong&gt;</ept> in combination with EF is beyond the scope of this document</target>
        </trans-unit>
        <trans-unit id="5c79a12b-0b9d-402f-bf6b-25644519c29d" xml:space="preserve">
          <source>Entity Framework applications can easily benefit from the elastic database tools in Azure SQL Database.</source>
          <target state="new">Entity Framework applications can easily benefit from the elastic database tools in Azure SQL Database.</target>
        </trans-unit>
        <trans-unit id="e9dd7aa1-f84d-4ca6-b250-18ff02166ab0" xml:space="preserve">
          <source>Through the steps outlined in this document, EF applications can use the elastic database client library's capability for data dependent routing by refactoring constructors of the <bpt id="9ca33b9f-9037-49d9-9712-adcde33d8f61">&lt;strong&gt;</bpt>DbContext<ept id="9ca33b9f-9037-49d9-9712-adcde33d8f61">&lt;/strong&gt;</ept> subclasses used in the EF application.</source>
          <target state="new">Through the steps outlined in this document, EF applications can use the elastic database client library's capability for data dependent routing by refactoring constructors of the <bpt id="9ca33b9f-9037-49d9-9712-adcde33d8f61">&lt;strong&gt;</bpt>DbContext<ept id="9ca33b9f-9037-49d9-9712-adcde33d8f61">&lt;/strong&gt;</ept> subclasses used in the EF application.</target>
        </trans-unit>
        <trans-unit id="adfe822e-bab6-4ba0-8d90-f40829ec95c1" xml:space="preserve">
          <source>This limits the  changes required to those places where <bpt id="de9da6c9-994d-4120-aad2-ea1d1b237cd4">&lt;strong&gt;</bpt>DbContext<ept id="de9da6c9-994d-4120-aad2-ea1d1b237cd4">&lt;/strong&gt;</ept> classes already exist.</source>
          <target state="new">This limits the  changes required to those places where <bpt id="de9da6c9-994d-4120-aad2-ea1d1b237cd4">&lt;strong&gt;</bpt>DbContext<ept id="de9da6c9-994d-4120-aad2-ea1d1b237cd4">&lt;/strong&gt;</ept> classes already exist.</target>
        </trans-unit>
        <trans-unit id="eadb0b37-aebe-40b8-9fab-f17996e3d77a" xml:space="preserve">
          <source>In addition, EF applications can continue to benefit from automatic schema deployment by combining the steps that invoke the necessary EF migrations with the registration of new shards and mappings in the shard map.</source>
          <target state="new">In addition, EF applications can continue to benefit from automatic schema deployment by combining the steps that invoke the necessary EF migrations with the registration of new shards and mappings in the shard map.</target>
        </trans-unit>
        <trans-unit id="a5adb3e0-d214-4ff4-96ce-40ea0368a812" xml:space="preserve">
          <source><bpt id="25b43847-c37c-4776-9215-a1d7c25ea37a">&lt;token href="../../includes/elastic-scale-include.md"&gt;</bpt><ept id="25b43847-c37c-4776-9215-a1d7c25ea37a">&lt;/token&gt;</ept></source>
          <target state="new"><bpt id="25b43847-c37c-4776-9215-a1d7c25ea37a">&lt;token href="../../includes/elastic-scale-include.md"&gt;</bpt><ept id="25b43847-c37c-4776-9215-a1d7c25ea37a">&lt;/token&gt;</ept></target>
        </trans-unit>
        <trans-unit id="fba14bde-ff06-4f3c-9965-e227c84a29cf" xml:space="preserve">
          <source>./media/sql-database-elastic-scale-use-entity-framework-applications-visual-studio/sample.png</source>
          <target state="new">./media/sql-database-elastic-scale-use-entity-framework-applications-visual-studio/sample.png</target>
        </trans-unit>
      </group>
      <group id="7e94f531-e550-48ea-b3fd-9d256035b7ba" />
    </body>
  </file>
</xliff>