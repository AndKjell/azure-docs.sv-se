<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="dbeb1292-01a6-4782-a249-9c88327a08b9" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="dbeb1292-01a6-4782-a249-9c88327a08b9" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="23130529-4616-46b6-941c-bc8213eb2a73">
        <trans-unit id="b7970f5a-595c-4ecf-91ab-eedde3e63045" xml:space="preserve">
          <source>Use Python with Hive and Pig in HDInsight | Microsoft Azure</source>
          <target state="new">Use Python with Hive and Pig in HDInsight | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="0a5989e8-fc4e-4bd7-8c13-4f4ca9a0c7fa" xml:space="preserve">
          <source>Learn how to use Python User Defined Functions (UDF) from Hive and Pig in HDInsight, the Hadoop technology stack on Azure.</source>
          <target state="new">Learn how to use Python User Defined Functions (UDF) from Hive and Pig in HDInsight, the Hadoop technology stack on Azure.</target>
        </trans-unit>
        <trans-unit id="ae01cc11-af9b-4bca-8b0b-568d5543f935" xml:space="preserve">
          <source>Hive and Pig are great for working with data in HDInsight, but sometimes you need a more general purpose language.</source>
          <target state="new">Hive and Pig are great for working with data in HDInsight, but sometimes you need a more general purpose language.</target>
        </trans-unit>
        <trans-unit id="8af0781f-a678-4a01-8f5e-d47de3aceafb" xml:space="preserve">
          <source>Both Hive and Pig allow you to create User Defined Functions (UDF) using a variety of programming languages.</source>
          <target state="new">Both Hive and Pig allow you to create User Defined Functions (UDF) using a variety of programming languages.</target>
        </trans-unit>
        <trans-unit id="f35803eb-a566-44a4-a94c-6cb8fc05891c" xml:space="preserve">
          <source>In this article, you will learn how to use a Python UDF from Hive and Pig.</source>
          <target state="new">In this article, you will learn how to use a Python UDF from Hive and Pig.</target>
        </trans-unit>
        <trans-unit id="eb31cb2c-876b-4a69-9b79-7844bf8e81f4" xml:space="preserve">
          <source>The steps in this article apply to HDInsight cluster versions 2.1, 3.0, 3.1, and 3.2.</source>
          <target state="new">The steps in this article apply to HDInsight cluster versions 2.1, 3.0, 3.1, and 3.2.</target>
        </trans-unit>
        <trans-unit id="0300dff2-0165-4363-97b3-bbc87a3cbfc3" xml:space="preserve">
          <source>Python2.7 is installed by default on HDInsight 3.0 and later clusters.</source>
          <target state="new">Python2.7 is installed by default on HDInsight 3.0 and later clusters.</target>
        </trans-unit>
        <trans-unit id="9189ddd9-fbd7-4efc-8cd0-dbdb7aa8c709" xml:space="preserve">
          <source>Hive can be used with this version of Python for stream processing (data is passed between Hive and Python using STDOUT/STDIN).</source>
          <target state="new">Hive can be used with this version of Python for stream processing (data is passed between Hive and Python using STDOUT/STDIN).</target>
        </trans-unit>
        <trans-unit id="ef24ed61-5847-4e10-81f9-1be9e26c761b" xml:space="preserve">
          <source>HDInsight also includes Jython, which is a Python implementation written in Java.</source>
          <target state="new">HDInsight also includes Jython, which is a Python implementation written in Java.</target>
        </trans-unit>
        <trans-unit id="f050768b-381e-4279-ab17-d56c669a67e1" xml:space="preserve">
          <source>Pig understands how to talk to Jython without having to resort to streaming, so it's preferable when using Pig.</source>
          <target state="new">Pig understands how to talk to Jython without having to resort to streaming, so it's preferable when using Pig.</target>
        </trans-unit>
        <trans-unit id="a7c53409-3b6d-4931-81e6-cb1c64f8c8b2" xml:space="preserve">
          <source>Python can be used as a UDF from Hive through the HiveQL <bpt id="3ddb05fa-a255-4a12-a4e3-83303eccf2e3">&lt;strong&gt;</bpt>TRANSFORM<ept id="3ddb05fa-a255-4a12-a4e3-83303eccf2e3">&lt;/strong&gt;</ept> statement.</source>
          <target state="new">Python can be used as a UDF from Hive through the HiveQL <bpt id="3ddb05fa-a255-4a12-a4e3-83303eccf2e3">&lt;strong&gt;</bpt>TRANSFORM<ept id="3ddb05fa-a255-4a12-a4e3-83303eccf2e3">&lt;/strong&gt;</ept> statement.</target>
        </trans-unit>
        <trans-unit id="0277bd77-0f12-418e-b364-a7a2eac66b8f" xml:space="preserve">
          <source>For example, the following HiveQL invokes a Python script stored in the <bpt id="d1bcf2ef-a39a-4d17-80b1-1fcfab843fa5">&lt;strong&gt;</bpt>streaming.py<ept id="d1bcf2ef-a39a-4d17-80b1-1fcfab843fa5">&lt;/strong&gt;</ept> file.</source>
          <target state="new">For example, the following HiveQL invokes a Python script stored in the <bpt id="d1bcf2ef-a39a-4d17-80b1-1fcfab843fa5">&lt;strong&gt;</bpt>streaming.py<ept id="d1bcf2ef-a39a-4d17-80b1-1fcfab843fa5">&lt;/strong&gt;</ept> file.</target>
        </trans-unit>
        <trans-unit id="e50d132b-f846-4cc1-9af5-b2547bf5b5e5" xml:space="preserve">
          <source><bpt id="df4f2969-6b10-42ab-b244-329e5b31309b">&lt;strong&gt;</bpt>Linux-based HDInsight<ept id="df4f2969-6b10-42ab-b244-329e5b31309b">&lt;/strong&gt;</ept></source>
          <target state="new"><bpt id="df4f2969-6b10-42ab-b244-329e5b31309b">&lt;strong&gt;</bpt>Linux-based HDInsight<ept id="df4f2969-6b10-42ab-b244-329e5b31309b">&lt;/strong&gt;</ept></target>
        </trans-unit>
        <trans-unit id="0185898f-5069-49c7-b7aa-c48f501ea682" xml:space="preserve">
          <source><bpt id="82a304cd-482e-4a4c-a549-c24b7ed8b975">&lt;strong&gt;</bpt>Windows-based HDInsight<ept id="82a304cd-482e-4a4c-a549-c24b7ed8b975">&lt;/strong&gt;</ept></source>
          <target state="new"><bpt id="82a304cd-482e-4a4c-a549-c24b7ed8b975">&lt;strong&gt;</bpt>Windows-based HDInsight<ept id="82a304cd-482e-4a4c-a549-c24b7ed8b975">&lt;/strong&gt;</ept></target>
        </trans-unit>
        <trans-unit id="ccbd748a-6265-4e68-97aa-7cb8ba19534b" xml:space="preserve">
          <source>On Windows-based HDInsight clusters, the <bpt id="8ad40f2f-76c6-42f9-8176-797afd2bd483">&lt;strong&gt;</bpt>USING<ept id="8ad40f2f-76c6-42f9-8176-797afd2bd483">&lt;/strong&gt;</ept> clause must specify the full path to python.exe.</source>
          <target state="new">On Windows-based HDInsight clusters, the <bpt id="8ad40f2f-76c6-42f9-8176-797afd2bd483">&lt;strong&gt;</bpt>USING<ept id="8ad40f2f-76c6-42f9-8176-797afd2bd483">&lt;/strong&gt;</ept> clause must specify the full path to python.exe.</target>
        </trans-unit>
        <trans-unit id="3d0019bd-e4a8-4876-9cd3-1fdf90db2bce" xml:space="preserve">
          <source>This is always <bpt id="42887707-dea9-4b4d-8b29-4dc84bd50d51">&lt;code&gt;</bpt>D:\Python27\python.exe<ept id="42887707-dea9-4b4d-8b29-4dc84bd50d51">&lt;/code&gt;</ept>.</source>
          <target state="new">This is always <bpt id="42887707-dea9-4b4d-8b29-4dc84bd50d51">&lt;code&gt;</bpt>D:\Python27\python.exe<ept id="42887707-dea9-4b4d-8b29-4dc84bd50d51">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="fb4fc93f-a2a6-4db0-a3c3-7156e4dd2954" xml:space="preserve">
          <source>Here's what this example does:</source>
          <target state="new">Here's what this example does:</target>
        </trans-unit>
        <trans-unit id="1a5e6432-a7fb-4cfb-8764-e7cb6ff6a299" xml:space="preserve">
          <source>The <bpt id="2276c251-aa23-4a44-98c0-e5279bc43c58">&lt;strong&gt;</bpt>add file<ept id="2276c251-aa23-4a44-98c0-e5279bc43c58">&lt;/strong&gt;</ept> statement at the beginning of the file adds the <bpt id="8e8a1db9-a9d5-44c6-b40c-074667645e8e">&lt;strong&gt;</bpt>streaming.py<ept id="8e8a1db9-a9d5-44c6-b40c-074667645e8e">&lt;/strong&gt;</ept> file to the distributed cache, so it's accessible by all nodes in the cluster.</source>
          <target state="new">The <bpt id="2276c251-aa23-4a44-98c0-e5279bc43c58">&lt;strong&gt;</bpt>add file<ept id="2276c251-aa23-4a44-98c0-e5279bc43c58">&lt;/strong&gt;</ept> statement at the beginning of the file adds the <bpt id="8e8a1db9-a9d5-44c6-b40c-074667645e8e">&lt;strong&gt;</bpt>streaming.py<ept id="8e8a1db9-a9d5-44c6-b40c-074667645e8e">&lt;/strong&gt;</ept> file to the distributed cache, so it's accessible by all nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="ce680751-3338-4f6e-ad85-de3b1acc6dd5" xml:space="preserve">
          <source>The  <bpt id="07edbd1f-c814-4235-bd98-e8f9e0f42537">&lt;strong&gt;</bpt>SELECT TRANSFORM ... USING<ept id="07edbd1f-c814-4235-bd98-e8f9e0f42537">&lt;/strong&gt;</ept> statement selects data from the <bpt id="dac65742-3eb8-46bc-aa76-575447e7c89e">&lt;strong&gt;</bpt>hivesampletable<ept id="dac65742-3eb8-46bc-aa76-575447e7c89e">&lt;/strong&gt;</ept>, and passes clientid, devicemake, and devicemodel to the <bpt id="a1b93b87-cf45-4237-a39d-b4378e17cb00">&lt;strong&gt;</bpt>streaming.py<ept id="a1b93b87-cf45-4237-a39d-b4378e17cb00">&lt;/strong&gt;</ept> script.</source>
          <target state="new">The  <bpt id="07edbd1f-c814-4235-bd98-e8f9e0f42537">&lt;strong&gt;</bpt>SELECT TRANSFORM ... USING<ept id="07edbd1f-c814-4235-bd98-e8f9e0f42537">&lt;/strong&gt;</ept> statement selects data from the <bpt id="dac65742-3eb8-46bc-aa76-575447e7c89e">&lt;strong&gt;</bpt>hivesampletable<ept id="dac65742-3eb8-46bc-aa76-575447e7c89e">&lt;/strong&gt;</ept>, and passes clientid, devicemake, and devicemodel to the <bpt id="a1b93b87-cf45-4237-a39d-b4378e17cb00">&lt;strong&gt;</bpt>streaming.py<ept id="a1b93b87-cf45-4237-a39d-b4378e17cb00">&lt;/strong&gt;</ept> script.</target>
        </trans-unit>
        <trans-unit id="a720640c-e20e-4eb7-b515-870439f90d0c" xml:space="preserve">
          <source>The <bpt id="558df683-f439-4ec4-a850-d79ca81e47f7">&lt;strong&gt;</bpt>AS<ept id="558df683-f439-4ec4-a850-d79ca81e47f7">&lt;/strong&gt;</ept> clause describes the fields returned from <bpt id="737a8f5b-c451-445c-b06e-dec9ddb42477">&lt;strong&gt;</bpt>streaming.py<ept id="737a8f5b-c451-445c-b06e-dec9ddb42477">&lt;/strong&gt;</ept></source>
          <target state="new">The <bpt id="558df683-f439-4ec4-a850-d79ca81e47f7">&lt;strong&gt;</bpt>AS<ept id="558df683-f439-4ec4-a850-d79ca81e47f7">&lt;/strong&gt;</ept> clause describes the fields returned from <bpt id="737a8f5b-c451-445c-b06e-dec9ddb42477">&lt;strong&gt;</bpt>streaming.py<ept id="737a8f5b-c451-445c-b06e-dec9ddb42477">&lt;/strong&gt;</ept></target>
        </trans-unit>
        <trans-unit id="0fcd1e32-8149-485b-9f4e-39b794db96b9" xml:space="preserve">
          <source><bpt id="3082d9fe-a325-4a42-88df-5629802e5ce7">&lt;bookmark&gt;</bpt><ept id="3082d9fe-a325-4a42-88df-5629802e5ce7">&lt;/bookmark&gt;</ept>
Here's the <bpt id="5dde9431-abbd-4332-9d51-4e191367d16a">&lt;strong&gt;</bpt>streaming.py<ept id="5dde9431-abbd-4332-9d51-4e191367d16a">&lt;/strong&gt;</ept> file used by the HiveQL example.</source>
          <target state="new"><bpt id="3082d9fe-a325-4a42-88df-5629802e5ce7">&lt;bookmark&gt;</bpt><ept id="3082d9fe-a325-4a42-88df-5629802e5ce7">&lt;/bookmark&gt;</ept>
Here's the <bpt id="5dde9431-abbd-4332-9d51-4e191367d16a">&lt;strong&gt;</bpt>streaming.py<ept id="5dde9431-abbd-4332-9d51-4e191367d16a">&lt;/strong&gt;</ept> file used by the HiveQL example.</target>
        </trans-unit>
        <trans-unit id="ff06dffe-b5a9-4b11-93d5-0d1eb5cca6b4" xml:space="preserve">
          <source>Since we are using streaming, this script has to do the following:</source>
          <target state="new">Since we are using streaming, this script has to do the following:</target>
        </trans-unit>
        <trans-unit id="b0a5fbcd-0c2a-4a11-a54c-53c45c4476c4" xml:space="preserve">
          <source>Read data from STDIN.</source>
          <target state="new">Read data from STDIN.</target>
        </trans-unit>
        <trans-unit id="aca92371-359b-4514-a403-c21635f6b014" xml:space="preserve">
          <source>This is accomplished by using <bpt id="c0f69502-09a7-46f6-8088-3fb039d11dec">&lt;code&gt;</bpt>sys.stdin.readline()<ept id="c0f69502-09a7-46f6-8088-3fb039d11dec">&lt;/code&gt;</ept> in this example.</source>
          <target state="new">This is accomplished by using <bpt id="c0f69502-09a7-46f6-8088-3fb039d11dec">&lt;code&gt;</bpt>sys.stdin.readline()<ept id="c0f69502-09a7-46f6-8088-3fb039d11dec">&lt;/code&gt;</ept> in this example.</target>
        </trans-unit>
        <trans-unit id="9645e87f-7bfa-4555-9ce0-41da2a48e18e" xml:space="preserve">
          <source>The trailing newline character is removed using <bpt id="27e10309-42f4-40e1-bc60-d976221d7b7e">&lt;code&gt;</bpt>string.strip(line, "\n ")<ept id="27e10309-42f4-40e1-bc60-d976221d7b7e">&lt;/code&gt;</ept>, since we just want the text data and not the end of line indicator.</source>
          <target state="new">The trailing newline character is removed using <bpt id="27e10309-42f4-40e1-bc60-d976221d7b7e">&lt;code&gt;</bpt>string.strip(line, "\n ")<ept id="27e10309-42f4-40e1-bc60-d976221d7b7e">&lt;/code&gt;</ept>, since we just want the text data and not the end of line indicator.</target>
        </trans-unit>
        <trans-unit id="a7a14220-ebab-48ad-bda8-4cf0a8a32bd5" xml:space="preserve">
          <source>When doing stream processing, a single line contains all the values with a tab character between each value.</source>
          <target state="new">When doing stream processing, a single line contains all the values with a tab character between each value.</target>
        </trans-unit>
        <trans-unit id="9318a9ba-1ebd-4847-9c68-2fdbb1291a1e" xml:space="preserve">
          <source>So <bpt id="07d9f6e6-300e-4580-842d-0258915c4c84">&lt;code&gt;</bpt>string.split(line, "\t")<ept id="07d9f6e6-300e-4580-842d-0258915c4c84">&lt;/code&gt;</ept> can be used to split the input at each tab, returning just the fields.</source>
          <target state="new">So <bpt id="07d9f6e6-300e-4580-842d-0258915c4c84">&lt;code&gt;</bpt>string.split(line, "\t")<ept id="07d9f6e6-300e-4580-842d-0258915c4c84">&lt;/code&gt;</ept> can be used to split the input at each tab, returning just the fields.</target>
        </trans-unit>
        <trans-unit id="a98fcda4-b0a8-499a-afdb-f837bdafdeb1" xml:space="preserve">
          <source>When processing is complete, the output must be written to STDOUT as a single line, with a tab between each field.</source>
          <target state="new">When processing is complete, the output must be written to STDOUT as a single line, with a tab between each field.</target>
        </trans-unit>
        <trans-unit id="81ba7cbc-5251-444f-8c4f-f2941fe83e6c" xml:space="preserve">
          <source>This is accomplished by using <bpt id="1be86d7e-318b-4e0f-96d2-5fd33dc564e8">&lt;code&gt;</bpt>print "\t".join([clientid, phone_label, hashlib.md5(phone_label).hexdigest()])<ept id="1be86d7e-318b-4e0f-96d2-5fd33dc564e8">&lt;/code&gt;</ept>.</source>
          <target state="new">This is accomplished by using <bpt id="1be86d7e-318b-4e0f-96d2-5fd33dc564e8">&lt;code&gt;</bpt>print "\t".join([clientid, phone_label, hashlib.md5(phone_label).hexdigest()])<ept id="1be86d7e-318b-4e0f-96d2-5fd33dc564e8">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="a38fdae7-3053-480d-b412-72a97917dd91" xml:space="preserve">
          <source>This all occurs within a <bpt id="e341920e-3634-4857-9582-bbadf206f5a0">&lt;code&gt;</bpt>while<ept id="e341920e-3634-4857-9582-bbadf206f5a0">&lt;/code&gt;</ept> loop, that will repeat until no <bpt id="ee771485-507f-4cb4-8e09-e37597b47c70">&lt;code&gt;</bpt>line<ept id="ee771485-507f-4cb4-8e09-e37597b47c70">&lt;/code&gt;</ept> is read, at which point <bpt id="79aa2ad8-daad-443b-a9fa-a988cb79425f">&lt;code&gt;</bpt>break<ept id="79aa2ad8-daad-443b-a9fa-a988cb79425f">&lt;/code&gt;</ept> exits the loop and the script terminates.</source>
          <target state="new">This all occurs within a <bpt id="e341920e-3634-4857-9582-bbadf206f5a0">&lt;code&gt;</bpt>while<ept id="e341920e-3634-4857-9582-bbadf206f5a0">&lt;/code&gt;</ept> loop, that will repeat until no <bpt id="ee771485-507f-4cb4-8e09-e37597b47c70">&lt;code&gt;</bpt>line<ept id="ee771485-507f-4cb4-8e09-e37597b47c70">&lt;/code&gt;</ept> is read, at which point <bpt id="79aa2ad8-daad-443b-a9fa-a988cb79425f">&lt;code&gt;</bpt>break<ept id="79aa2ad8-daad-443b-a9fa-a988cb79425f">&lt;/code&gt;</ept> exits the loop and the script terminates.</target>
        </trans-unit>
        <trans-unit id="0933a779-2b6c-4111-8217-5e51b5edb371" xml:space="preserve">
          <source>Beyond that, the script just concatenates the input values for <bpt id="02a3140f-e3ed-4792-bb3e-677b9a28e05d">&lt;code&gt;</bpt>devicemake<ept id="02a3140f-e3ed-4792-bb3e-677b9a28e05d">&lt;/code&gt;</ept> and <bpt id="f81e2b92-f154-4fe6-8ff5-e2b22c8a175c">&lt;code&gt;</bpt>devicemodel<ept id="f81e2b92-f154-4fe6-8ff5-e2b22c8a175c">&lt;/code&gt;</ept>, and calculates a hash of the concatenated value.</source>
          <target state="new">Beyond that, the script just concatenates the input values for <bpt id="02a3140f-e3ed-4792-bb3e-677b9a28e05d">&lt;code&gt;</bpt>devicemake<ept id="02a3140f-e3ed-4792-bb3e-677b9a28e05d">&lt;/code&gt;</ept> and <bpt id="f81e2b92-f154-4fe6-8ff5-e2b22c8a175c">&lt;code&gt;</bpt>devicemodel<ept id="f81e2b92-f154-4fe6-8ff5-e2b22c8a175c">&lt;/code&gt;</ept>, and calculates a hash of the concatenated value.</target>
        </trans-unit>
        <trans-unit id="58f52084-9f40-490b-9d78-922343a3fc07" xml:space="preserve">
          <source>Pretty simple, but it describes the basics of how any Python script invoked from Hive should function: Loop, read input until there is no more, break each line of input apart at the tabs, process, write a single line of tab delimited output.</source>
          <target state="new">Pretty simple, but it describes the basics of how any Python script invoked from Hive should function: Loop, read input until there is no more, break each line of input apart at the tabs, process, write a single line of tab delimited output.</target>
        </trans-unit>
        <trans-unit id="9122f922-715e-43c7-a77d-cbf6bcfcaa30" xml:space="preserve">
          <source>See <bpt id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;linkText&gt;</bpt>Running the examples<ept id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;/linkText&gt;</ept><bpt id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;title&gt;</bpt><ept id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;/title&gt;</ept> for how to run this example on your HDInsight cluster.</source>
          <target state="new">See <bpt id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;linkText&gt;</bpt>Running the examples<ept id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;/linkText&gt;</ept><bpt id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;title&gt;</bpt><ept id="794f5a6e-fc79-402c-914f-a2fd18640697">&lt;/title&gt;</ept> for how to run this example on your HDInsight cluster.</target>
        </trans-unit>
        <trans-unit id="1985efeb-c250-4958-be08-7d5b44a3c796" xml:space="preserve">
          <source>A Python script can be used as a UDF from Pig through the <bpt id="a0e8ca69-40d1-42a1-a304-22a7f584a5fa">&lt;strong&gt;</bpt>GENERATE<ept id="a0e8ca69-40d1-42a1-a304-22a7f584a5fa">&lt;/strong&gt;</ept> statement.</source>
          <target state="new">A Python script can be used as a UDF from Pig through the <bpt id="a0e8ca69-40d1-42a1-a304-22a7f584a5fa">&lt;strong&gt;</bpt>GENERATE<ept id="a0e8ca69-40d1-42a1-a304-22a7f584a5fa">&lt;/strong&gt;</ept> statement.</target>
        </trans-unit>
        <trans-unit id="64eddc78-fbff-4f56-bddd-a7129c3070f8" xml:space="preserve">
          <source>For example, the following example uses a Python script stored in the <bpt id="7e0acbaf-4bd9-47fc-8e78-d0e26fdbb3be">&lt;strong&gt;</bpt>jython.py<ept id="7e0acbaf-4bd9-47fc-8e78-d0e26fdbb3be">&lt;/strong&gt;</ept> file.</source>
          <target state="new">For example, the following example uses a Python script stored in the <bpt id="7e0acbaf-4bd9-47fc-8e78-d0e26fdbb3be">&lt;strong&gt;</bpt>jython.py<ept id="7e0acbaf-4bd9-47fc-8e78-d0e26fdbb3be">&lt;/strong&gt;</ept> file.</target>
        </trans-unit>
        <trans-unit id="71015ef7-81ec-4c67-9231-a4f144ed3ce7" xml:space="preserve">
          <source>Here's how this example works:</source>
          <target state="new">Here's how this example works:</target>
        </trans-unit>
        <trans-unit id="d4406959-c47e-4364-b2fc-bbe0a5061bbf" xml:space="preserve">
          <source>It registers the file containing the Python script (<bpt id="f59fa072-a9e9-4405-bf58-d66e86392cfb">&lt;strong&gt;</bpt>jython.py<ept id="f59fa072-a9e9-4405-bf58-d66e86392cfb">&lt;/strong&gt;</ept>,) using <bpt id="335ab468-8b5a-46b9-b115-af55da8010d6">&lt;strong&gt;</bpt>Jython<ept id="335ab468-8b5a-46b9-b115-af55da8010d6">&lt;/strong&gt;</ept>, and exposes it to Pig as <bpt id="84f76c3e-cc67-4e92-841d-d3f233627aa9">&lt;strong&gt;</bpt>myfuncs<ept id="84f76c3e-cc67-4e92-841d-d3f233627aa9">&lt;/strong&gt;</ept>.</source>
          <target state="new">It registers the file containing the Python script (<bpt id="f59fa072-a9e9-4405-bf58-d66e86392cfb">&lt;strong&gt;</bpt>jython.py<ept id="f59fa072-a9e9-4405-bf58-d66e86392cfb">&lt;/strong&gt;</ept>,) using <bpt id="335ab468-8b5a-46b9-b115-af55da8010d6">&lt;strong&gt;</bpt>Jython<ept id="335ab468-8b5a-46b9-b115-af55da8010d6">&lt;/strong&gt;</ept>, and exposes it to Pig as <bpt id="84f76c3e-cc67-4e92-841d-d3f233627aa9">&lt;strong&gt;</bpt>myfuncs<ept id="84f76c3e-cc67-4e92-841d-d3f233627aa9">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="3ac53ea9-37bc-4ab0-a696-f01a54666e6f" xml:space="preserve">
          <source>Jython is a Python implementation in Java, and runs in the same Java Virtual machine as Pig.</source>
          <target state="new">Jython is a Python implementation in Java, and runs in the same Java Virtual machine as Pig.</target>
        </trans-unit>
        <trans-unit id="10d47671-a7dc-4c5a-8af5-07159e2d1e1f" xml:space="preserve">
          <source>This allows us to treat the Python script like a traditional function call vs. the streaming approach used with Hive.</source>
          <target state="new">This allows us to treat the Python script like a traditional function call vs. the streaming approach used with Hive.</target>
        </trans-unit>
        <trans-unit id="c282731c-ed10-46fc-b212-e09c90e7e40e" xml:space="preserve">
          <source>The next line loads the sample data file, <bpt id="80e7344b-af6a-47fe-bd26-b3941ea61e53">&lt;strong&gt;</bpt>sample.log<ept id="80e7344b-af6a-47fe-bd26-b3941ea61e53">&lt;/strong&gt;</ept> into <bpt id="4d2e1640-48e1-45fe-9f32-4d7569bdacd0">&lt;strong&gt;</bpt>LOGS<ept id="4d2e1640-48e1-45fe-9f32-4d7569bdacd0">&lt;/strong&gt;</ept>.</source>
          <target state="new">The next line loads the sample data file, <bpt id="80e7344b-af6a-47fe-bd26-b3941ea61e53">&lt;strong&gt;</bpt>sample.log<ept id="80e7344b-af6a-47fe-bd26-b3941ea61e53">&lt;/strong&gt;</ept> into <bpt id="4d2e1640-48e1-45fe-9f32-4d7569bdacd0">&lt;strong&gt;</bpt>LOGS<ept id="4d2e1640-48e1-45fe-9f32-4d7569bdacd0">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="68218f79-f756-446d-848f-d6940d8731ca" xml:space="preserve">
          <source>Since this log file doesn't have a consistent schema, it also defines each record (<bpt id="46d9d585-7c5c-4bb0-bb7c-994bb61cdf00">&lt;strong&gt;</bpt>LINE<ept id="46d9d585-7c5c-4bb0-bb7c-994bb61cdf00">&lt;/strong&gt;</ept> in this case,) as a <bpt id="0f986a9d-3a7e-44ed-ab51-0a84a8cff38e">&lt;strong&gt;</bpt>chararray<ept id="0f986a9d-3a7e-44ed-ab51-0a84a8cff38e">&lt;/strong&gt;</ept>.</source>
          <target state="new">Since this log file doesn't have a consistent schema, it also defines each record (<bpt id="46d9d585-7c5c-4bb0-bb7c-994bb61cdf00">&lt;strong&gt;</bpt>LINE<ept id="46d9d585-7c5c-4bb0-bb7c-994bb61cdf00">&lt;/strong&gt;</ept> in this case,) as a <bpt id="0f986a9d-3a7e-44ed-ab51-0a84a8cff38e">&lt;strong&gt;</bpt>chararray<ept id="0f986a9d-3a7e-44ed-ab51-0a84a8cff38e">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="1493510e-fae9-4fe1-9173-f4a8c353927e" xml:space="preserve">
          <source>Chararray is, essentially, a string.</source>
          <target state="new">Chararray is, essentially, a string.</target>
        </trans-unit>
        <trans-unit id="f95db42d-4318-4f21-bf81-563ef849a234" xml:space="preserve">
          <source>The third line filters out any null values, storing the result of the operation into <bpt id="edd1b8d8-f4dd-447a-b577-17f034723ed0">&lt;strong&gt;</bpt>LOG<ept id="edd1b8d8-f4dd-447a-b577-17f034723ed0">&lt;/strong&gt;</ept>.</source>
          <target state="new">The third line filters out any null values, storing the result of the operation into <bpt id="edd1b8d8-f4dd-447a-b577-17f034723ed0">&lt;strong&gt;</bpt>LOG<ept id="edd1b8d8-f4dd-447a-b577-17f034723ed0">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="50ecffff-9c7d-4355-89ae-61046a5cd188" xml:space="preserve">
          <source>Next, it iterates over the records in <bpt id="0c3c6aab-92cd-462f-8a4d-2903f76546aa">&lt;strong&gt;</bpt>LOG<ept id="0c3c6aab-92cd-462f-8a4d-2903f76546aa">&lt;/strong&gt;</ept> and uses <bpt id="ae4af77f-023d-462d-8e1e-f5364ead5522">&lt;strong&gt;</bpt>GENERATE<ept id="ae4af77f-023d-462d-8e1e-f5364ead5522">&lt;/strong&gt;</ept> to invoke the <bpt id="f65b6f5d-f606-41ff-9b5b-cd66194969a4">&lt;strong&gt;</bpt>create_structure<ept id="f65b6f5d-f606-41ff-9b5b-cd66194969a4">&lt;/strong&gt;</ept> method contained in the <bpt id="7b8c0ecb-8280-47ab-a30c-317bfcb77f41">&lt;strong&gt;</bpt>jython.py<ept id="7b8c0ecb-8280-47ab-a30c-317bfcb77f41">&lt;/strong&gt;</ept> script loaded as <bpt id="37facc5f-ce0e-4bdd-8091-65565988aff1">&lt;strong&gt;</bpt>myfuncs<ept id="37facc5f-ce0e-4bdd-8091-65565988aff1">&lt;/strong&gt;</ept>.</source>
          <target state="new">Next, it iterates over the records in <bpt id="0c3c6aab-92cd-462f-8a4d-2903f76546aa">&lt;strong&gt;</bpt>LOG<ept id="0c3c6aab-92cd-462f-8a4d-2903f76546aa">&lt;/strong&gt;</ept> and uses <bpt id="ae4af77f-023d-462d-8e1e-f5364ead5522">&lt;strong&gt;</bpt>GENERATE<ept id="ae4af77f-023d-462d-8e1e-f5364ead5522">&lt;/strong&gt;</ept> to invoke the <bpt id="f65b6f5d-f606-41ff-9b5b-cd66194969a4">&lt;strong&gt;</bpt>create_structure<ept id="f65b6f5d-f606-41ff-9b5b-cd66194969a4">&lt;/strong&gt;</ept> method contained in the <bpt id="7b8c0ecb-8280-47ab-a30c-317bfcb77f41">&lt;strong&gt;</bpt>jython.py<ept id="7b8c0ecb-8280-47ab-a30c-317bfcb77f41">&lt;/strong&gt;</ept> script loaded as <bpt id="37facc5f-ce0e-4bdd-8091-65565988aff1">&lt;strong&gt;</bpt>myfuncs<ept id="37facc5f-ce0e-4bdd-8091-65565988aff1">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="9010613c-a127-47aa-a72d-b22d53582126" xml:space="preserve">
          <source><bpt id="dad81d5b-9653-46e6-99ac-55ddab27c20e">&lt;strong&gt;</bpt>LINE<ept id="dad81d5b-9653-46e6-99ac-55ddab27c20e">&lt;/strong&gt;</ept> is used to pass the current record to the function.</source>
          <target state="new"><bpt id="dad81d5b-9653-46e6-99ac-55ddab27c20e">&lt;strong&gt;</bpt>LINE<ept id="dad81d5b-9653-46e6-99ac-55ddab27c20e">&lt;/strong&gt;</ept> is used to pass the current record to the function.</target>
        </trans-unit>
        <trans-unit id="e2c5e807-1e90-4325-9cbf-4c58276a0877" xml:space="preserve">
          <source>Finally, the outputs are dumped to STDOUT using the <bpt id="fe8030cb-9481-4922-86c5-d4a5c491e1ed">&lt;strong&gt;</bpt>DUMP<ept id="fe8030cb-9481-4922-86c5-d4a5c491e1ed">&lt;/strong&gt;</ept> command.</source>
          <target state="new">Finally, the outputs are dumped to STDOUT using the <bpt id="fe8030cb-9481-4922-86c5-d4a5c491e1ed">&lt;strong&gt;</bpt>DUMP<ept id="fe8030cb-9481-4922-86c5-d4a5c491e1ed">&lt;/strong&gt;</ept> command.</target>
        </trans-unit>
        <trans-unit id="42b6c646-5594-433a-a1a4-3212b29eb670" xml:space="preserve">
          <source>This is just to immediately show the results after the operation completes; in a real script you would normally <bpt id="9a74c599-4905-48c2-9fb6-50fd07d1e43e">&lt;strong&gt;</bpt>STORE<ept id="9a74c599-4905-48c2-9fb6-50fd07d1e43e">&lt;/strong&gt;</ept> the data into a new file.</source>
          <target state="new">This is just to immediately show the results after the operation completes; in a real script you would normally <bpt id="9a74c599-4905-48c2-9fb6-50fd07d1e43e">&lt;strong&gt;</bpt>STORE<ept id="9a74c599-4905-48c2-9fb6-50fd07d1e43e">&lt;/strong&gt;</ept> the data into a new file.</target>
        </trans-unit>
        <trans-unit id="aa1cfe78-d462-4649-b344-e2dfea86108f" xml:space="preserve">
          <source><bpt id="29433609-b7ec-42e3-b8a0-37c7f2df3506">&lt;bookmark&gt;</bpt><ept id="29433609-b7ec-42e3-b8a0-37c7f2df3506">&lt;/bookmark&gt;</ept>
Here's the <bpt id="da72d5fe-e59c-48c1-8aa1-faf3afe36583">&lt;strong&gt;</bpt>jython.py<ept id="da72d5fe-e59c-48c1-8aa1-faf3afe36583">&lt;/strong&gt;</ept> file used by the Pig example:</source>
          <target state="new"><bpt id="29433609-b7ec-42e3-b8a0-37c7f2df3506">&lt;bookmark&gt;</bpt><ept id="29433609-b7ec-42e3-b8a0-37c7f2df3506">&lt;/bookmark&gt;</ept>
Here's the <bpt id="da72d5fe-e59c-48c1-8aa1-faf3afe36583">&lt;strong&gt;</bpt>jython.py<ept id="da72d5fe-e59c-48c1-8aa1-faf3afe36583">&lt;/strong&gt;</ept> file used by the Pig example:</target>
        </trans-unit>
        <trans-unit id="f10c6dcc-0270-440e-af00-7dc6e7a3b6f1" xml:space="preserve">
          <source>Remember that we previously just defined the <bpt id="42365d4e-457d-4f28-ae7c-8b4d56569c66">&lt;strong&gt;</bpt>LINE<ept id="42365d4e-457d-4f28-ae7c-8b4d56569c66">&lt;/strong&gt;</ept> input as a chararray because there was no consistent schema for the input?</source>
          <target state="new">Remember that we previously just defined the <bpt id="42365d4e-457d-4f28-ae7c-8b4d56569c66">&lt;strong&gt;</bpt>LINE<ept id="42365d4e-457d-4f28-ae7c-8b4d56569c66">&lt;/strong&gt;</ept> input as a chararray because there was no consistent schema for the input?</target>
        </trans-unit>
        <trans-unit id="abe87e8e-cb0e-484d-b2fc-2415efee6eec" xml:space="preserve">
          <source>What the <bpt id="4f980dcc-c7ab-4d3c-8333-9d71bb5da7d2">&lt;strong&gt;</bpt>jython.py<ept id="4f980dcc-c7ab-4d3c-8333-9d71bb5da7d2">&lt;/strong&gt;</ept> does is to transform the data into a consistent schema for output.</source>
          <target state="new">What the <bpt id="4f980dcc-c7ab-4d3c-8333-9d71bb5da7d2">&lt;strong&gt;</bpt>jython.py<ept id="4f980dcc-c7ab-4d3c-8333-9d71bb5da7d2">&lt;/strong&gt;</ept> does is to transform the data into a consistent schema for output.</target>
        </trans-unit>
        <trans-unit id="266da3d4-82bf-4cff-8ff2-c21f36118c66" xml:space="preserve">
          <source>It works like this:</source>
          <target state="new">It works like this:</target>
        </trans-unit>
        <trans-unit id="7029c475-ce67-4616-a84d-c8917cbe928f" xml:space="preserve">
          <source>The <bpt id="46883068-f9ff-41ce-b55a-83560017b941">&lt;strong&gt;</bpt>@outputSchema<ept id="46883068-f9ff-41ce-b55a-83560017b941">&lt;/strong&gt;</ept> statement defines the format of the data that will be returned to Pig.</source>
          <target state="new">The <bpt id="46883068-f9ff-41ce-b55a-83560017b941">&lt;strong&gt;</bpt>@outputSchema<ept id="46883068-f9ff-41ce-b55a-83560017b941">&lt;/strong&gt;</ept> statement defines the format of the data that will be returned to Pig.</target>
        </trans-unit>
        <trans-unit id="478cf5c2-698f-47eb-86d4-600ebaa3a6a8" xml:space="preserve">
          <source>In this case, it's a <bpt id="f0b535c6-a5c7-43b0-8da9-6c72caffbfd7">&lt;strong&gt;</bpt>data bag<ept id="f0b535c6-a5c7-43b0-8da9-6c72caffbfd7">&lt;/strong&gt;</ept>, which is a Pig data type.</source>
          <target state="new">In this case, it's a <bpt id="f0b535c6-a5c7-43b0-8da9-6c72caffbfd7">&lt;strong&gt;</bpt>data bag<ept id="f0b535c6-a5c7-43b0-8da9-6c72caffbfd7">&lt;/strong&gt;</ept>, which is a Pig data type.</target>
        </trans-unit>
        <trans-unit id="3a47ea17-1bda-4c1f-b2cd-5dd9565427be" xml:space="preserve">
          <source>The bag contains the following fields, all of which are chararray (strings):</source>
          <target state="new">The bag contains the following fields, all of which are chararray (strings):</target>
        </trans-unit>
        <trans-unit id="d9895cb3-8276-4d91-92a4-9f16e56fb498" xml:space="preserve">
          <source>date - the date the log entry was created</source>
          <target state="new">date - the date the log entry was created</target>
        </trans-unit>
        <trans-unit id="5e04fefe-6e5d-483b-a18a-5ffbe6936e5e" xml:space="preserve">
          <source>time - the time the log entry was created</source>
          <target state="new">time - the time the log entry was created</target>
        </trans-unit>
        <trans-unit id="8578d1f1-9f0f-45cd-b04d-812c15125963" xml:space="preserve">
          <source>classname - the class name the entry was created for</source>
          <target state="new">classname - the class name the entry was created for</target>
        </trans-unit>
        <trans-unit id="77c645c3-6ca3-41bc-8d08-a22b770d5955" xml:space="preserve">
          <source>level - the log level</source>
          <target state="new">level - the log level</target>
        </trans-unit>
        <trans-unit id="e4d26a4a-3b04-419b-a596-047ab3fa82b5" xml:space="preserve">
          <source>detail - verbose details for the log entry</source>
          <target state="new">detail - verbose details for the log entry</target>
        </trans-unit>
        <trans-unit id="7e4eb110-76f0-4942-b3e3-1e958a088fc4" xml:space="preserve">
          <source>Next, the <bpt id="c57c7f88-ba7a-4e5f-8776-4e69945c9ef1">&lt;strong&gt;</bpt>def create_structure(input)<ept id="c57c7f88-ba7a-4e5f-8776-4e69945c9ef1">&lt;/strong&gt;</ept> defines the function that Pig will pass line items to.</source>
          <target state="new">Next, the <bpt id="c57c7f88-ba7a-4e5f-8776-4e69945c9ef1">&lt;strong&gt;</bpt>def create_structure(input)<ept id="c57c7f88-ba7a-4e5f-8776-4e69945c9ef1">&lt;/strong&gt;</ept> defines the function that Pig will pass line items to.</target>
        </trans-unit>
        <trans-unit id="ad5d07b7-e194-4afb-b966-b69d090c4576" xml:space="preserve">
          <source>The example data, <bpt id="a0955574-7504-4ea9-bf1c-4677c1e1d39e">&lt;strong&gt;</bpt>sample.log<ept id="a0955574-7504-4ea9-bf1c-4677c1e1d39e">&lt;/strong&gt;</ept>, mostly conforms to the date, time, classname, level, and detail schema we want to return.</source>
          <target state="new">The example data, <bpt id="a0955574-7504-4ea9-bf1c-4677c1e1d39e">&lt;strong&gt;</bpt>sample.log<ept id="a0955574-7504-4ea9-bf1c-4677c1e1d39e">&lt;/strong&gt;</ept>, mostly conforms to the date, time, classname, level, and detail schema we want to return.</target>
        </trans-unit>
        <trans-unit id="b55936b0-e4b1-40d7-8132-eebf92f5991e" xml:space="preserve">
          <source>But it also contains a few lines that begin with the string '<bpt id="da2c8e17-0dca-4a03-9b29-fb3cc5984fec">&lt;em&gt;</bpt>java.lang.Exception<ept id="da2c8e17-0dca-4a03-9b29-fb3cc5984fec">&lt;/em&gt;</ept>' that need to be modified to match the schema.</source>
          <target state="new">But it also contains a few lines that begin with the string '<bpt id="da2c8e17-0dca-4a03-9b29-fb3cc5984fec">&lt;em&gt;</bpt>java.lang.Exception<ept id="da2c8e17-0dca-4a03-9b29-fb3cc5984fec">&lt;/em&gt;</ept>' that need to be modified to match the schema.</target>
        </trans-unit>
        <trans-unit id="520332ae-4c99-4168-9585-56ac2bab119b" xml:space="preserve">
          <source>The <bpt id="e20373f8-46c6-410f-819a-84586d9283e7">&lt;strong&gt;</bpt>if<ept id="e20373f8-46c6-410f-819a-84586d9283e7">&lt;/strong&gt;</ept> statement checks for those, then massages the input data to move the '<bpt id="459dded4-58a0-4c58-bd34-62be80379a03">&lt;em&gt;</bpt>java.lang.Exception<ept id="459dded4-58a0-4c58-bd34-62be80379a03">&lt;/em&gt;</ept>' string to the end, bringing the data in-line with our expected output schema.</source>
          <target state="new">The <bpt id="e20373f8-46c6-410f-819a-84586d9283e7">&lt;strong&gt;</bpt>if<ept id="e20373f8-46c6-410f-819a-84586d9283e7">&lt;/strong&gt;</ept> statement checks for those, then massages the input data to move the '<bpt id="459dded4-58a0-4c58-bd34-62be80379a03">&lt;em&gt;</bpt>java.lang.Exception<ept id="459dded4-58a0-4c58-bd34-62be80379a03">&lt;/em&gt;</ept>' string to the end, bringing the data in-line with our expected output schema.</target>
        </trans-unit>
        <trans-unit id="a9a77270-bb8e-4f79-89d4-ecfbeea03526" xml:space="preserve">
          <source>Next, the <bpt id="23730859-af96-40c2-a9ee-0870f2054dce">&lt;strong&gt;</bpt>split<ept id="23730859-af96-40c2-a9ee-0870f2054dce">&lt;/strong&gt;</ept> command is used to split the data at the first four space characters.</source>
          <target state="new">Next, the <bpt id="23730859-af96-40c2-a9ee-0870f2054dce">&lt;strong&gt;</bpt>split<ept id="23730859-af96-40c2-a9ee-0870f2054dce">&lt;/strong&gt;</ept> command is used to split the data at the first four space characters.</target>
        </trans-unit>
        <trans-unit id="752f08bc-f1ce-44d5-bdb3-ee5b574d4fd2" xml:space="preserve">
          <source>This results in five values, which are assigned into <bpt id="bd659c91-7ff8-4db9-a997-5f6a6fbbf7c8">&lt;strong&gt;</bpt>date<ept id="bd659c91-7ff8-4db9-a997-5f6a6fbbf7c8">&lt;/strong&gt;</ept>, <bpt id="4c2c553c-675e-42b7-8297-04ace78244f5">&lt;strong&gt;</bpt>time<ept id="4c2c553c-675e-42b7-8297-04ace78244f5">&lt;/strong&gt;</ept>, <bpt id="5b4b66e6-a56b-4168-a168-5e5292e61971">&lt;strong&gt;</bpt>classname<ept id="5b4b66e6-a56b-4168-a168-5e5292e61971">&lt;/strong&gt;</ept>, <bpt id="9420df27-344a-4890-898f-f5505283de01">&lt;strong&gt;</bpt>level<ept id="9420df27-344a-4890-898f-f5505283de01">&lt;/strong&gt;</ept>, and <bpt id="24d198cb-70e5-4230-9eb0-9e6df3e32c27">&lt;strong&gt;</bpt>detail<ept id="24d198cb-70e5-4230-9eb0-9e6df3e32c27">&lt;/strong&gt;</ept>.</source>
          <target state="new">This results in five values, which are assigned into <bpt id="bd659c91-7ff8-4db9-a997-5f6a6fbbf7c8">&lt;strong&gt;</bpt>date<ept id="bd659c91-7ff8-4db9-a997-5f6a6fbbf7c8">&lt;/strong&gt;</ept>, <bpt id="4c2c553c-675e-42b7-8297-04ace78244f5">&lt;strong&gt;</bpt>time<ept id="4c2c553c-675e-42b7-8297-04ace78244f5">&lt;/strong&gt;</ept>, <bpt id="5b4b66e6-a56b-4168-a168-5e5292e61971">&lt;strong&gt;</bpt>classname<ept id="5b4b66e6-a56b-4168-a168-5e5292e61971">&lt;/strong&gt;</ept>, <bpt id="9420df27-344a-4890-898f-f5505283de01">&lt;strong&gt;</bpt>level<ept id="9420df27-344a-4890-898f-f5505283de01">&lt;/strong&gt;</ept>, and <bpt id="24d198cb-70e5-4230-9eb0-9e6df3e32c27">&lt;strong&gt;</bpt>detail<ept id="24d198cb-70e5-4230-9eb0-9e6df3e32c27">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="25b58b80-ffce-4892-97d9-b4debf01077b" xml:space="preserve">
          <source>Finally, the values are returned to Pig.</source>
          <target state="new">Finally, the values are returned to Pig.</target>
        </trans-unit>
        <trans-unit id="ec9899e6-c287-4679-bd9f-7706b6148af0" xml:space="preserve">
          <source>When the data is returned to Pig, it will have a consistent schema as defined in the <bpt id="0f88d8a5-2be1-4b00-9396-ea2392934aa0">&lt;strong&gt;</bpt>@outputSchema<ept id="0f88d8a5-2be1-4b00-9396-ea2392934aa0">&lt;/strong&gt;</ept> statement.</source>
          <target state="new">When the data is returned to Pig, it will have a consistent schema as defined in the <bpt id="0f88d8a5-2be1-4b00-9396-ea2392934aa0">&lt;strong&gt;</bpt>@outputSchema<ept id="0f88d8a5-2be1-4b00-9396-ea2392934aa0">&lt;/strong&gt;</ept> statement.</target>
        </trans-unit>
        <trans-unit id="f6a689fc-9c9f-4afb-9e5d-7f84a7a19af0" xml:space="preserve">
          <source>If you are using a Linux-based HDInsight cluster, use the <bpt id="2528bf68-cd83-43ca-92a4-5f12e3c23a8a">&lt;strong&gt;</bpt>SSH<ept id="2528bf68-cd83-43ca-92a4-5f12e3c23a8a">&lt;/strong&gt;</ept> steps below.</source>
          <target state="new">If you are using a Linux-based HDInsight cluster, use the <bpt id="2528bf68-cd83-43ca-92a4-5f12e3c23a8a">&lt;strong&gt;</bpt>SSH<ept id="2528bf68-cd83-43ca-92a4-5f12e3c23a8a">&lt;/strong&gt;</ept> steps below.</target>
        </trans-unit>
        <trans-unit id="960ae172-d0b0-401e-8819-5f0df1a02ed1" xml:space="preserve">
          <source>If you are using a Windows-based HDInsight cluster and a Windows client, use the <bpt id="475dd22d-ae82-49e0-878d-a71a0564aade">&lt;strong&gt;</bpt>PowerShell<ept id="475dd22d-ae82-49e0-878d-a71a0564aade">&lt;/strong&gt;</ept> steps.</source>
          <target state="new">If you are using a Windows-based HDInsight cluster and a Windows client, use the <bpt id="475dd22d-ae82-49e0-878d-a71a0564aade">&lt;strong&gt;</bpt>PowerShell<ept id="475dd22d-ae82-49e0-878d-a71a0564aade">&lt;/strong&gt;</ept> steps.</target>
        </trans-unit>
        <trans-unit id="28348b1b-07e6-4de2-b592-7e42f12f4bab" xml:space="preserve">
          <source>For more information on using SSH, see &lt;a href="../hdinsight-hadoop-linux-use-ssh-unix/" target="<bpt id="6b658f4c-f78d-41dc-9eeb-3f96df9e23a2">&lt;em&gt;</bpt>blank"&gt;Use SSH with Linux-based Hadoop on HDInsight from Linux, Unix, or OS X&lt;/a&gt; or &lt;a href="../hdinsight-hadoop-linux-use-ssh-windows/" target="<ept id="6b658f4c-f78d-41dc-9eeb-3f96df9e23a2">&lt;/em&gt;</ept>blank"&gt;Use SSH with Linux-based Hadoop on HDInsight from Windows&lt;/a&gt;.</source>
          <target state="new">For more information on using SSH, see &lt;a href="../hdinsight-hadoop-linux-use-ssh-unix/" target="<bpt id="6b658f4c-f78d-41dc-9eeb-3f96df9e23a2">&lt;em&gt;</bpt>blank"&gt;Use SSH with Linux-based Hadoop on HDInsight from Linux, Unix, or OS X&lt;/a&gt; or &lt;a href="../hdinsight-hadoop-linux-use-ssh-windows/" target="<ept id="6b658f4c-f78d-41dc-9eeb-3f96df9e23a2">&lt;/em&gt;</ept>blank"&gt;Use SSH with Linux-based Hadoop on HDInsight from Windows&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4d6c8bd1-1849-4017-8541-b36d0b6ad385" xml:space="preserve">
          <source>Using the Python examples <bpt id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;linkText&gt;</bpt>streaming.py<ept id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;/linkText&gt;</ept><bpt id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;title&gt;</bpt><ept id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;/title&gt;</ept> and <bpt id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;linkText&gt;</bpt>jython.py<ept id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;/linkText&gt;</ept><bpt id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;title&gt;</bpt><ept id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;/title&gt;</ept>, create local copies of the files on your development machine.</source>
          <target state="new">Using the Python examples <bpt id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;linkText&gt;</bpt>streaming.py<ept id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;/linkText&gt;</ept><bpt id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;title&gt;</bpt><ept id="5783b3ca-3025-4806-b735-5d18893b6fb0">&lt;/title&gt;</ept> and <bpt id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;linkText&gt;</bpt>jython.py<ept id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;/linkText&gt;</ept><bpt id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;title&gt;</bpt><ept id="5f1abf4c-d79c-4e59-9a38-8108971077a9">&lt;/title&gt;</ept>, create local copies of the files on your development machine.</target>
        </trans-unit>
        <trans-unit id="c724446c-c724-490d-b7a8-f3ac7a47ff9e" xml:space="preserve">
          <source>Use <bpt id="ed2557c7-9540-4ec1-a113-8ed5b16a6b64">&lt;code&gt;</bpt>scp<ept id="ed2557c7-9540-4ec1-a113-8ed5b16a6b64">&lt;/code&gt;</ept> to copy the files to your HDInsight cluster.</source>
          <target state="new">Use <bpt id="ed2557c7-9540-4ec1-a113-8ed5b16a6b64">&lt;code&gt;</bpt>scp<ept id="ed2557c7-9540-4ec1-a113-8ed5b16a6b64">&lt;/code&gt;</ept> to copy the files to your HDInsight cluster.</target>
        </trans-unit>
        <trans-unit id="cda344ff-2c28-454d-8e92-bdc3fcfbe09d" xml:space="preserve">
          <source>For example, the following would copy the files to a cluster named <bpt id="0b0d82a3-7dca-49b6-a0e7-5c821a644b78">&lt;strong&gt;</bpt>mycluster<ept id="0b0d82a3-7dca-49b6-a0e7-5c821a644b78">&lt;/strong&gt;</ept>.</source>
          <target state="new">For example, the following would copy the files to a cluster named <bpt id="0b0d82a3-7dca-49b6-a0e7-5c821a644b78">&lt;strong&gt;</bpt>mycluster<ept id="0b0d82a3-7dca-49b6-a0e7-5c821a644b78">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="a868a7aa-4586-4ae3-bef6-8e25398371c5" xml:space="preserve">
          <source>Use SSH to connect to the cluster.</source>
          <target state="new">Use SSH to connect to the cluster.</target>
        </trans-unit>
        <trans-unit id="f669c7a9-2680-4237-9de6-d702f0af42d3" xml:space="preserve">
          <source>For example, the following would connect to a cluster named <bpt id="9958726a-81a8-413d-8adf-da711f496a40">&lt;strong&gt;</bpt>mycluster<ept id="9958726a-81a8-413d-8adf-da711f496a40">&lt;/strong&gt;</ept> as user <bpt id="1b484f0f-208d-4d4d-9016-0b876e055e87">&lt;strong&gt;</bpt>myuser<ept id="1b484f0f-208d-4d4d-9016-0b876e055e87">&lt;/strong&gt;</ept>.</source>
          <target state="new">For example, the following would connect to a cluster named <bpt id="9958726a-81a8-413d-8adf-da711f496a40">&lt;strong&gt;</bpt>mycluster<ept id="9958726a-81a8-413d-8adf-da711f496a40">&lt;/strong&gt;</ept> as user <bpt id="1b484f0f-208d-4d4d-9016-0b876e055e87">&lt;strong&gt;</bpt>myuser<ept id="1b484f0f-208d-4d4d-9016-0b876e055e87">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="f40cbcb5-4202-4ba6-9854-1e90808249aa" xml:space="preserve">
          <source>From the SSH session, add the python files uploaded previously to the WASB storage for the cluster.</source>
          <target state="new">From the SSH session, add the python files uploaded previously to the WASB storage for the cluster.</target>
        </trans-unit>
        <trans-unit id="6ce0e021-7a47-4a28-9865-097ce49d6847" xml:space="preserve">
          <source>After uploading the files, use the following steps to run the Hive and Pig jobs.</source>
          <target state="new">After uploading the files, use the following steps to run the Hive and Pig jobs.</target>
        </trans-unit>
        <trans-unit id="1357ff8a-03e8-4cab-93a0-aa233a65f3b5" xml:space="preserve">
          <source>Use the <bpt id="0cf5a85b-6452-4ee5-bdd8-bd7e40c6e2ce">&lt;code&gt;</bpt>hive<ept id="0cf5a85b-6452-4ee5-bdd8-bd7e40c6e2ce">&lt;/code&gt;</ept> command to start the hive shell.</source>
          <target state="new">Use the <bpt id="0cf5a85b-6452-4ee5-bdd8-bd7e40c6e2ce">&lt;code&gt;</bpt>hive<ept id="0cf5a85b-6452-4ee5-bdd8-bd7e40c6e2ce">&lt;/code&gt;</ept> command to start the hive shell.</target>
        </trans-unit>
        <trans-unit id="916f3cf8-142c-414e-ab56-11ec673fd5bd" xml:space="preserve">
          <source>You should see a <bpt id="a9a20499-fdf2-46d8-aa9c-34cfa4f16539">&lt;code&gt;</bpt>hive&gt;<ept id="a9a20499-fdf2-46d8-aa9c-34cfa4f16539">&lt;/code&gt;</ept> prompt once the shell has loaded.</source>
          <target state="new">You should see a <bpt id="a9a20499-fdf2-46d8-aa9c-34cfa4f16539">&lt;code&gt;</bpt>hive&gt;<ept id="a9a20499-fdf2-46d8-aa9c-34cfa4f16539">&lt;/code&gt;</ept> prompt once the shell has loaded.</target>
        </trans-unit>
        <trans-unit id="bed275fb-51a1-43de-9b61-53210e3f8106" xml:space="preserve">
          <source>Enter the following at the <bpt id="5bd185d3-80fc-4520-9bd4-ed2159d86235">&lt;code&gt;</bpt>hive&gt;<ept id="5bd185d3-80fc-4520-9bd4-ed2159d86235">&lt;/code&gt;</ept> prompt.</source>
          <target state="new">Enter the following at the <bpt id="5bd185d3-80fc-4520-9bd4-ed2159d86235">&lt;code&gt;</bpt>hive&gt;<ept id="5bd185d3-80fc-4520-9bd4-ed2159d86235">&lt;/code&gt;</ept> prompt.</target>
        </trans-unit>
        <trans-unit id="9a55666b-84cd-4858-b5d3-c336ebab0fd1" xml:space="preserve">
          <source>After entering the last line, the job should start.</source>
          <target state="new">After entering the last line, the job should start.</target>
        </trans-unit>
        <trans-unit id="5c400e16-9784-40cf-a87d-def17f153dcb" xml:space="preserve">
          <source>Eventually it will return output similar to the following.</source>
          <target state="new">Eventually it will return output similar to the following.</target>
        </trans-unit>
        <trans-unit id="010b89d9-20a6-480e-b327-db0a7f56ef64" xml:space="preserve">
          <source>Use the <bpt id="da6bbafd-f974-479c-8786-5856f7ac695b">&lt;code&gt;</bpt>pig<ept id="da6bbafd-f974-479c-8786-5856f7ac695b">&lt;/code&gt;</ept> command to start the shell.</source>
          <target state="new">Use the <bpt id="da6bbafd-f974-479c-8786-5856f7ac695b">&lt;code&gt;</bpt>pig<ept id="da6bbafd-f974-479c-8786-5856f7ac695b">&lt;/code&gt;</ept> command to start the shell.</target>
        </trans-unit>
        <trans-unit id="6c38add2-2146-416f-94a2-24ac4a822fef" xml:space="preserve">
          <source>You should see a <bpt id="e1c26c91-65b9-448b-aed7-28813d3d9d83">&lt;code&gt;</bpt>grunt&gt;<ept id="e1c26c91-65b9-448b-aed7-28813d3d9d83">&lt;/code&gt;</ept> prompt once the shell has loaded.</source>
          <target state="new">You should see a <bpt id="e1c26c91-65b9-448b-aed7-28813d3d9d83">&lt;code&gt;</bpt>grunt&gt;<ept id="e1c26c91-65b9-448b-aed7-28813d3d9d83">&lt;/code&gt;</ept> prompt once the shell has loaded.</target>
        </trans-unit>
        <trans-unit id="951bc867-5884-4fa4-a187-2f223a96c2ce" xml:space="preserve">
          <source>Enter the following statements at the <bpt id="3582278b-3c76-468b-9d48-4ddc7b050f2e">&lt;code&gt;</bpt>grunt&gt;<ept id="3582278b-3c76-468b-9d48-4ddc7b050f2e">&lt;/code&gt;</ept> prompt.</source>
          <target state="new">Enter the following statements at the <bpt id="3582278b-3c76-468b-9d48-4ddc7b050f2e">&lt;code&gt;</bpt>grunt&gt;<ept id="3582278b-3c76-468b-9d48-4ddc7b050f2e">&lt;/code&gt;</ept> prompt.</target>
        </trans-unit>
        <trans-unit id="6d631089-8949-4015-b3b4-29ff1cb6065a" xml:space="preserve">
          <source>After entering the following line,the job should start.</source>
          <target state="new">After entering the following line,the job should start.</target>
        </trans-unit>
        <trans-unit id="f1eff8e0-1f71-4e85-95ed-2e025e0b7a83" xml:space="preserve">
          <source>Eventually it will return output similar to the following.</source>
          <target state="new">Eventually it will return output similar to the following.</target>
        </trans-unit>
        <trans-unit id="c091a919-16ab-4561-91a8-4b08f013a16b" xml:space="preserve">
          <source>These steps use Azure PowerShell.</source>
          <target state="new">These steps use Azure PowerShell.</target>
        </trans-unit>
        <trans-unit id="295fa564-579b-4851-a45d-fc877a6c314e" xml:space="preserve">
          <source>If this is not already installed and configured on your development machine, see <bpt id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;linkText&gt;</bpt>How to install and configure Azure PowerShell<ept id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;/linkText&gt;</ept><bpt id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;title&gt;</bpt><ept id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;/title&gt;</ept> before using the following steps.</source>
          <target state="new">If this is not already installed and configured on your development machine, see <bpt id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;linkText&gt;</bpt>How to install and configure Azure PowerShell<ept id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;/linkText&gt;</ept><bpt id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;title&gt;</bpt><ept id="e77fd493-eca9-48d8-8c80-13a76518259e">&lt;/title&gt;</ept> before using the following steps.</target>
        </trans-unit>
        <trans-unit id="e8e6fe2c-1877-449b-ad6e-9035b4a3a2c2" xml:space="preserve">
          <source>Using the Python examples <bpt id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;linkText&gt;</bpt>streaming.py<ept id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;/linkText&gt;</ept><bpt id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;title&gt;</bpt><ept id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;/title&gt;</ept> and <bpt id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;linkText&gt;</bpt>jython.py<ept id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;/linkText&gt;</ept><bpt id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;title&gt;</bpt><ept id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;/title&gt;</ept>, create local copies of the files on your development machine.</source>
          <target state="new">Using the Python examples <bpt id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;linkText&gt;</bpt>streaming.py<ept id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;/linkText&gt;</ept><bpt id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;title&gt;</bpt><ept id="9c7b79eb-3df0-42c6-8ad7-00a421cedee4">&lt;/title&gt;</ept> and <bpt id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;linkText&gt;</bpt>jython.py<ept id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;/linkText&gt;</ept><bpt id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;title&gt;</bpt><ept id="3a9800c5-4596-4280-9692-f4b9b2a84b47">&lt;/title&gt;</ept>, create local copies of the files on your development machine.</target>
        </trans-unit>
        <trans-unit id="c4ebc5ec-d754-434e-a6b7-c358737abed6" xml:space="preserve">
          <source>Use  the following PowerShell script to upload the <bpt id="92ded75f-e716-4de4-99c1-6123181806c1">&lt;strong&gt;</bpt>streaming.py<ept id="92ded75f-e716-4de4-99c1-6123181806c1">&lt;/strong&gt;</ept> and <bpt id="3440867a-5445-4e46-8571-9d4337f8ac58">&lt;strong&gt;</bpt>jython.py<ept id="3440867a-5445-4e46-8571-9d4337f8ac58">&lt;/strong&gt;</ept> files to the server.</source>
          <target state="new">Use  the following PowerShell script to upload the <bpt id="92ded75f-e716-4de4-99c1-6123181806c1">&lt;strong&gt;</bpt>streaming.py<ept id="92ded75f-e716-4de4-99c1-6123181806c1">&lt;/strong&gt;</ept> and <bpt id="3440867a-5445-4e46-8571-9d4337f8ac58">&lt;strong&gt;</bpt>jython.py<ept id="3440867a-5445-4e46-8571-9d4337f8ac58">&lt;/strong&gt;</ept> files to the server.</target>
        </trans-unit>
        <trans-unit id="af7ab6e4-31e3-45f4-9a90-981ad008a1e7" xml:space="preserve">
          <source>Substitute the name of your Azure HDInsight cluster, and the path to the <bpt id="2b39601b-1735-42a5-9883-55b767fd15e4">&lt;strong&gt;</bpt>streaming.py<ept id="2b39601b-1735-42a5-9883-55b767fd15e4">&lt;/strong&gt;</ept> and <bpt id="dc88ba05-4f3b-4c62-bccc-2f71c9266bb9">&lt;strong&gt;</bpt>jython.py<ept id="dc88ba05-4f3b-4c62-bccc-2f71c9266bb9">&lt;/strong&gt;</ept> files on the first three lines of the script.</source>
          <target state="new">Substitute the name of your Azure HDInsight cluster, and the path to the <bpt id="2b39601b-1735-42a5-9883-55b767fd15e4">&lt;strong&gt;</bpt>streaming.py<ept id="2b39601b-1735-42a5-9883-55b767fd15e4">&lt;/strong&gt;</ept> and <bpt id="dc88ba05-4f3b-4c62-bccc-2f71c9266bb9">&lt;strong&gt;</bpt>jython.py<ept id="dc88ba05-4f3b-4c62-bccc-2f71c9266bb9">&lt;/strong&gt;</ept> files on the first three lines of the script.</target>
        </trans-unit>
        <trans-unit id="f391275c-b4bc-41d3-b021-877578d559f8" xml:space="preserve">
          <source>This script retrieves information for your HDInsight cluster, then extracts the account and key for the default storage account, and uploads the files to the root of the container.</source>
          <target state="new">This script retrieves information for your HDInsight cluster, then extracts the account and key for the default storage account, and uploads the files to the root of the container.</target>
        </trans-unit>
        <trans-unit id="e4c54f45-393e-449d-b196-7be1459a11ca" xml:space="preserve">
          <source>Other methods of uploading the scripts can be found in the <bpt id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;linkText&gt;</bpt>Upload data for Hadoop jobs in HDInsight<ept id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;/linkText&gt;</ept><bpt id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;title&gt;</bpt><ept id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;/title&gt;</ept> document.</source>
          <target state="new">Other methods of uploading the scripts can be found in the <bpt id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;linkText&gt;</bpt>Upload data for Hadoop jobs in HDInsight<ept id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;/linkText&gt;</ept><bpt id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;title&gt;</bpt><ept id="faa397cb-9b5c-4311-a867-5351a609eae0">&lt;/title&gt;</ept> document.</target>
        </trans-unit>
        <trans-unit id="2ef6388f-aa2b-4c6d-ae4c-5373699c2f2e" xml:space="preserve">
          <source>After uploading the files, use the following PowerShell scripts to start the jobs.</source>
          <target state="new">After uploading the files, use the following PowerShell scripts to start the jobs.</target>
        </trans-unit>
        <trans-unit id="a263281c-a8aa-4d3c-830d-2f273809da04" xml:space="preserve">
          <source>When the job completes, the output should be written to the PowerShell console.</source>
          <target state="new">When the job completes, the output should be written to the PowerShell console.</target>
        </trans-unit>
        <trans-unit id="533d2f21-983f-4084-aba4-988b5301c999" xml:space="preserve">
          <source>The output for the <bpt id="058497e4-4bd6-4266-8916-669bfcdd459a">&lt;strong&gt;</bpt>Hive<ept id="058497e4-4bd6-4266-8916-669bfcdd459a">&lt;/strong&gt;</ept> job should appear similar to the following:</source>
          <target state="new">The output for the <bpt id="058497e4-4bd6-4266-8916-669bfcdd459a">&lt;strong&gt;</bpt>Hive<ept id="058497e4-4bd6-4266-8916-669bfcdd459a">&lt;/strong&gt;</ept> job should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="790c0240-1338-4858-a08d-3cb2bf6cfa75" xml:space="preserve">
          <source>The output for the <bpt id="989265b9-ec08-4365-817d-40fa61fb4518">&lt;strong&gt;</bpt>Pig<ept id="989265b9-ec08-4365-817d-40fa61fb4518">&lt;/strong&gt;</ept> job should appear similar to the following:</source>
          <target state="new">The output for the <bpt id="989265b9-ec08-4365-817d-40fa61fb4518">&lt;strong&gt;</bpt>Pig<ept id="989265b9-ec08-4365-817d-40fa61fb4518">&lt;/strong&gt;</ept> job should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="83f2bc65-201f-49fb-a89c-618496792553" xml:space="preserve">
          <source>Both of the example PowerShell scripts used to run the examples contain a commented line that will display error output for the job.</source>
          <target state="new">Both of the example PowerShell scripts used to run the examples contain a commented line that will display error output for the job.</target>
        </trans-unit>
        <trans-unit id="893088c9-0da1-4054-a595-8b00133110e8" xml:space="preserve">
          <source>If you are not seeing the expected output for the job, uncomment the following line and see if the error information indicates a problem.</source>
          <target state="new">If you are not seeing the expected output for the job, uncomment the following line and see if the error information indicates a problem.</target>
        </trans-unit>
        <trans-unit id="9e305d3e-281f-43e2-b215-a668d0add9be" xml:space="preserve">
          <source>The error information (STDERR,) and the result of the job (STDOUT,) are also logged to the default blob container for your clusters at the following locations.</source>
          <target state="new">The error information (STDERR,) and the result of the job (STDOUT,) are also logged to the default blob container for your clusters at the following locations.</target>
        </trans-unit>
        <trans-unit id="d3052852-f8c0-4784-ac52-205f1d15e2ef" xml:space="preserve">
          <source>For this job..</source>
          <target state="new">For this job..</target>
        </trans-unit>
        <trans-unit id="39ad3e74-5155-47a5-bd87-49e43f13e633" xml:space="preserve">
          <source>Look at these files in the blob container</source>
          <target state="new">Look at these files in the blob container</target>
        </trans-unit>
        <trans-unit id="0566dcd9-a824-45e7-96f0-ae2880cab4c1" xml:space="preserve">
          <source>Hive</source>
          <target state="new">Hive</target>
        </trans-unit>
        <trans-unit id="a5698be5-c42a-4263-bad1-9ddf1c89d774" xml:space="preserve">
          <source>/HivePython/stderr&lt;p&gt;/HivePython/stdout</source>
          <target state="new">/HivePython/stderr&lt;p&gt;/HivePython/stdout</target>
        </trans-unit>
        <trans-unit id="3ea03b18-2ebf-43fd-99d6-4fbfabbb3f55" xml:space="preserve">
          <source>Pig</source>
          <target state="new">Pig</target>
        </trans-unit>
        <trans-unit id="393b528d-7ac8-482a-9bf3-a86cccc72dcc" xml:space="preserve">
          <source>/PigPython/stderr&lt;p&gt;/PigPython/stdout</source>
          <target state="new">/PigPython/stderr&lt;p&gt;/PigPython/stdout</target>
        </trans-unit>
        <trans-unit id="4d1af249-778e-4cec-8176-d255be1c89e2" xml:space="preserve">
          <source>If you need to load Python modules that aren't provided by default, see <bpt id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;linkText&gt;</bpt>How to deploy a module to Azure HDInsight<ept id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;/linkText&gt;</ept><bpt id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;title&gt;</bpt><ept id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;/title&gt;</ept> for an example of how to do this.</source>
          <target state="new">If you need to load Python modules that aren't provided by default, see <bpt id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;linkText&gt;</bpt>How to deploy a module to Azure HDInsight<ept id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;/linkText&gt;</ept><bpt id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;title&gt;</bpt><ept id="272f432c-b41f-466e-9ab5-7681c10571b6">&lt;/title&gt;</ept> for an example of how to do this.</target>
        </trans-unit>
        <trans-unit id="c3457e9e-e2da-4dcf-8b60-9bf7d5019f54" xml:space="preserve">
          <source>For other ways to use Pig, Hive, and to learn about using MapReduce, see the following.</source>
          <target state="new">For other ways to use Pig, Hive, and to learn about using MapReduce, see the following.</target>
        </trans-unit>
        <trans-unit id="e875c223-d35d-4b4e-94c1-74f189910088" xml:space="preserve">
          <source><bpt id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;linkText&gt;</bpt>Use Hive with HDInsight<ept id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;/linkText&gt;</ept><bpt id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;title&gt;</bpt><ept id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;linkText&gt;</bpt>Use Hive with HDInsight<ept id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;/linkText&gt;</ept><bpt id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;title&gt;</bpt><ept id="a08a0cbb-50c9-4e66-9766-7ec77d9dd955">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="24427c30-e898-4eea-9036-2124b5906af8" xml:space="preserve">
          <source><bpt id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;linkText&gt;</bpt>Use Pig with HDInsight<ept id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;/linkText&gt;</ept><bpt id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;title&gt;</bpt><ept id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;linkText&gt;</bpt>Use Pig with HDInsight<ept id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;/linkText&gt;</ept><bpt id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;title&gt;</bpt><ept id="e60ba7fb-3cae-4e2c-8c00-e05e35daa754">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="27a197e7-9bd0-4498-bad2-c29ac7df509d" xml:space="preserve">
          <source><bpt id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;linkText&gt;</bpt>Use MapReduce with HDInsight<ept id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;/linkText&gt;</ept><bpt id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;title&gt;</bpt><ept id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;linkText&gt;</bpt>Use MapReduce with HDInsight<ept id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;/linkText&gt;</ept><bpt id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;title&gt;</bpt><ept id="990fa6f9-5eb6-4a1a-87e3-1ad530aa2f56">&lt;/title&gt;</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>