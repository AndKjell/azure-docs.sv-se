<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="7bbc3a08-6b3d-4264-92da-7b7f22392b8b" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="7bbc3a08-6b3d-4264-92da-7b7f22392b8b" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="4843d0c5-0121-4f53-a981-f7653789fb4c">
        <trans-unit id="09f83453-6f25-4119-84ca-d6de8751bf06" xml:space="preserve">
          <source>Some Azure Service Fabric Actors anti-patterns</source>
          <target state="new">Some Azure Service Fabric Actors anti-patterns</target>
        </trans-unit>
        <trans-unit id="23b8ac08-4d75-411b-a833-7c6e1da4240e" xml:space="preserve">
          <source>Some potential pitfalls for customers who are learning Azure Service Fabric Actors</source>
          <target state="new">Some potential pitfalls for customers who are learning Azure Service Fabric Actors</target>
        </trans-unit>
        <trans-unit id="5bd748a7-cb6b-4652-8686-86ce1c220574" xml:space="preserve">
          <source>We identified the following potential pitfalls for customers who are learning Service Fabric Reliable Actors:</source>
          <target state="new">We identified the following potential pitfalls for customers who are learning Service Fabric Reliable Actors:</target>
        </trans-unit>
        <trans-unit id="30f49a2e-0865-432a-83bb-301f078f7bb4" xml:space="preserve">
          <source>Treat Reliable Actors as a transactional system.</source>
          <target state="new">Treat Reliable Actors as a transactional system.</target>
        </trans-unit>
        <trans-unit id="3777d4d0-9762-4491-b6e5-61f9d82cb90c" xml:space="preserve">
          <source>Service Fabric Reliable Actors is not a two phase commit-based system offering ACID.</source>
          <target state="new">Service Fabric Reliable Actors is not a two phase commit-based system offering ACID.</target>
        </trans-unit>
        <trans-unit id="7587e39f-cdcb-40ee-a5d8-58a687fb8bd7" xml:space="preserve">
          <source>If we do not implement the optional persistence, and the machine the actor is running on dies, its current state will go with it.</source>
          <target state="new">If we do not implement the optional persistence, and the machine the actor is running on dies, its current state will go with it.</target>
        </trans-unit>
        <trans-unit id="08b4137c-fed4-4afe-ba93-c8c23140e87e" xml:space="preserve">
          <source>The actor will be coming up on another node very fast, but unless we have implemented the backing persistence, the state will be gone.</source>
          <target state="new">The actor will be coming up on another node very fast, but unless we have implemented the backing persistence, the state will be gone.</target>
        </trans-unit>
        <trans-unit id="6949d8e7-eab9-4d43-8025-434044cb357e" xml:space="preserve">
          <source>However, between leveraging retries, duplicate filtering, and/or idempotent design, you can achieve a high level of reliability and consistency.</source>
          <target state="new">However, between leveraging retries, duplicate filtering, and/or idempotent design, you can achieve a high level of reliability and consistency.</target>
        </trans-unit>
        <trans-unit id="9ebafdcd-7495-410e-861f-138dd43f6ee3" xml:space="preserve">
          <source>Block.</source>
          <target state="new">Block.</target>
        </trans-unit>
        <trans-unit id="0467020c-4218-4db7-8a81-dbe41cf7f2d6" xml:space="preserve">
          <source>Everything we do in Reliable Actors should be asynchronous.</source>
          <target state="new">Everything we do in Reliable Actors should be asynchronous.</target>
        </trans-unit>
        <trans-unit id="03d56c17-45f4-4631-aa29-cefcbb6c947c" xml:space="preserve">
          <source>This is usually easy because async APIs are prolific now in the Microsoft platform.</source>
          <target state="new">This is usually easy because async APIs are prolific now in the Microsoft platform.</target>
        </trans-unit>
        <trans-unit id="168ebe0a-4535-4a39-91da-d09ecfddff21" xml:space="preserve">
          <source>But if, for some reason, we must interact with a system that only provides a blocking API, we are going to need to put that in a wrapper that explicitly uses the .NET Thread Pool.</source>
          <target state="new">But if, for some reason, we must interact with a system that only provides a blocking API, we are going to need to put that in a wrapper that explicitly uses the .NET Thread Pool.</target>
        </trans-unit>
        <trans-unit id="6de510be-18f7-4473-b8df-4101f71fb197" xml:space="preserve">
          <source>Over architect.</source>
          <target state="new">Over architect.</target>
        </trans-unit>
        <trans-unit id="c9826d30-3ec4-43da-bcb7-db09653cfdea" xml:space="preserve">
          <source>Let the environment work.</source>
          <target state="new">Let the environment work.</target>
        </trans-unit>
        <trans-unit id="6da5dbca-24b9-4161-9a7b-8667b1dc0e23" xml:space="preserve">
          <source>It can be hard for developers who are accustomed to worrying about concurrent collections and locks, or using tools to compile objects from XML, to simply just code a class that does simple things like assign a value to a variable or schedule work.</source>
          <target state="new">It can be hard for developers who are accustomed to worrying about concurrent collections and locks, or using tools to compile objects from XML, to simply just code a class that does simple things like assign a value to a variable or schedule work.</target>
        </trans-unit>
        <trans-unit id="a1e1eeac-07c4-448e-85de-58717bdfe231" xml:space="preserve">
          <source>Scheduled tasks are built in.</source>
          <target state="new">Scheduled tasks are built in.</target>
        </trans-unit>
        <trans-unit id="a3959746-9f72-487f-adef-97eaaf080a77" xml:space="preserve">
          <source>Locks are not needed.</source>
          <target state="new">Locks are not needed.</target>
        </trans-unit>
        <trans-unit id="d0c96aac-b9d3-4fed-a940-ee529682868c" xml:space="preserve">
          <source>State is not a mortal enemy.</source>
          <target state="new">State is not a mortal enemy.</target>
        </trans-unit>
        <trans-unit id="1224dcfb-aade-4d0b-b420-2619d290595a" xml:space="preserve">
          <source>This takes some getting used to for many folks who’ve done a lot of server side work in large scale environments.</source>
          <target state="new">This takes some getting used to for many folks who’ve done a lot of server side work in large scale environments.</target>
        </trans-unit>
        <trans-unit id="8bec5ea1-0f97-4da3-b66b-803bfc238436" xml:space="preserve">
          <source>Make a single actor the bottleneck.</source>
          <target state="new">Make a single actor the bottleneck.</target>
        </trans-unit>
        <trans-unit id="e75c592f-94ed-4125-aaec-c422636b95af" xml:space="preserve">
          <source>It is often too easy to be trapped with this one, having millions of actors funnelling into a single instance of another actor.</source>
          <target state="new">It is often too easy to be trapped with this one, having millions of actors funnelling into a single instance of another actor.</target>
        </trans-unit>
        <trans-unit id="7e9ab7eb-67f5-4988-a026-75a458a66ac9" xml:space="preserve">
          <source>Use the aggregation approach that we demonstrated in the <bpt id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;linkText&gt;</bpt>distributed computation design pattern<ept id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;/linkText&gt;</ept><bpt id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;title&gt;</bpt><ept id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;/title&gt;</ept>.</source>
          <target state="new">Use the aggregation approach that we demonstrated in the <bpt id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;linkText&gt;</bpt>distributed computation design pattern<ept id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;/linkText&gt;</ept><bpt id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;title&gt;</bpt><ept id="5f2d3331-ba13-46fc-ad19-efaca3824892">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="bdc078c8-9797-4f53-8d51-612d87362392" xml:space="preserve">
          <source>Map entity models blindly.</source>
          <target state="new">Map entity models blindly.</target>
        </trans-unit>
        <trans-unit id="22fd4186-20a1-4220-a17c-96ef389cba23" xml:space="preserve">
          <source>This is for developers who are coming from a relational universe where problems are modelled using entities and their relationships.</source>
          <target state="new">This is for developers who are coming from a relational universe where problems are modelled using entities and their relationships.</target>
        </trans-unit>
        <trans-unit id="d1a0c029-8cd7-4673-8249-2098238dd70f" xml:space="preserve">
          <source>While this approach is still useful for understanding the subject domain, it should be coupled with service-oriented thinking and blended with the behavior.</source>
          <target state="new">While this approach is still useful for understanding the subject domain, it should be coupled with service-oriented thinking and blended with the behavior.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>