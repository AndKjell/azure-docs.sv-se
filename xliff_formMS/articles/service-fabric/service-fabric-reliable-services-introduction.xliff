<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="8942eb20-be79-4c15-88ab-14b37a9829ad" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="8942eb20-be79-4c15-88ab-14b37a9829ad" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="fbf913d0-6715-4750-8445-18855de2ba56">
        <trans-unit id="3f352d85-bfe9-494d-a8a2-137271904981" xml:space="preserve">
          <source>Overview of the Service Fabric Reliable Service Programming Model</source>
          <target state="new">Overview of the Service Fabric Reliable Service Programming Model</target>
        </trans-unit>
        <trans-unit id="9acdcba3-6e88-4f2f-9acd-912cc718d622" xml:space="preserve">
          <source>Learn about Service Fabric's Reliable Service programming model, and get started writing your own services.</source>
          <target state="new">Learn about Service Fabric's Reliable Service programming model, and get started writing your own services.</target>
        </trans-unit>
        <trans-unit id="da7eb670-c803-46c7-ba84-e96b9fc38501" xml:space="preserve">
          <source>Service Fabric simplifies writing and managing reliable stateless and stateful services.</source>
          <target state="new">Service Fabric simplifies writing and managing reliable stateless and stateful services.</target>
        </trans-unit>
        <trans-unit id="181551fc-bcfa-4cb7-ab98-be4f0f5eb7bd" xml:space="preserve">
          <source>This document will talk about:</source>
          <target state="new">This document will talk about:</target>
        </trans-unit>
        <trans-unit id="4ce82d3f-649c-4ea0-9b00-60ff797cd463" xml:space="preserve">
          <source>The Reliable Service programming model for stateless and stateful services.</source>
          <target state="new">The Reliable Service programming model for stateless and stateful services.</target>
        </trans-unit>
        <trans-unit id="b10ba5eb-9af9-451a-b0ef-7308905261ca" xml:space="preserve">
          <source>The different choices you have to make when writing a reliable service.</source>
          <target state="new">The different choices you have to make when writing a reliable service.</target>
        </trans-unit>
        <trans-unit id="a523c0d8-42c9-4b0b-a341-bb2be72925c3" xml:space="preserve">
          <source>Some of the different scenarios and examples of when you would use Reliable Services and how they are written.</source>
          <target state="new">Some of the different scenarios and examples of when you would use Reliable Services and how they are written.</target>
        </trans-unit>
        <trans-unit id="1607a63e-4588-42d8-a561-46e93e28e288" xml:space="preserve">
          <source>Reliable Services is one of the programming models available on Service Fabric.</source>
          <target state="new">Reliable Services is one of the programming models available on Service Fabric.</target>
        </trans-unit>
        <trans-unit id="e94a87ef-cb94-475d-a24e-ab2e324a8fcb" xml:space="preserve">
          <source>For more information on the Reliable Actors programming model, check out <bpt id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;linkText&gt;</bpt>the introduction<ept id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;/linkText&gt;</ept><bpt id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;title&gt;</bpt><ept id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;/title&gt;</ept>.</source>
          <target state="new">For more information on the Reliable Actors programming model, check out <bpt id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;linkText&gt;</bpt>the introduction<ept id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;/linkText&gt;</ept><bpt id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;title&gt;</bpt><ept id="b7a2c4e5-e32e-4c3a-b251-c8cbf63e9f56">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="053ba8ea-e505-4fc0-ad7a-8a3a12570c6e" xml:space="preserve">
          <source>In Service Fabric, a service is composed of configuration, application code, and optionally state.</source>
          <target state="new">In Service Fabric, a service is composed of configuration, application code, and optionally state.</target>
        </trans-unit>
        <trans-unit id="59b0784d-ffa4-472e-98d3-813255d015c3" xml:space="preserve">
          <source>Service Fabric manages the lifetime of services from provisioning and deployment through upgrade and deletion via <bpt id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;linkText&gt;</bpt>Service Fabric application management<ept id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;/linkText&gt;</ept><bpt id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;title&gt;</bpt><ept id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;/title&gt;</ept>.</source>
          <target state="new">Service Fabric manages the lifetime of services from provisioning and deployment through upgrade and deletion via <bpt id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;linkText&gt;</bpt>Service Fabric application management<ept id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;/linkText&gt;</ept><bpt id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;title&gt;</bpt><ept id="a7feef77-2801-425f-8d8b-db8af5b43c46">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="1c62dfd4-67af-48c6-8a4d-c9842e5eec19" xml:space="preserve">
          <source>Reliable Services gives you a simple, powerful, top-level programming model to help you express what is important to your application.</source>
          <target state="new">Reliable Services gives you a simple, powerful, top-level programming model to help you express what is important to your application.</target>
        </trans-unit>
        <trans-unit id="e83a816c-3a93-4e07-be46-f26e33158b2b" xml:space="preserve">
          <source>With the Reliable Service programming model you get:</source>
          <target state="new">With the Reliable Service programming model you get:</target>
        </trans-unit>
        <trans-unit id="ae6a6228-300e-4bb6-94e6-eea7db158f24" xml:space="preserve">
          <source>For stateful services, the Reliable Service programming model allows you to consistently and reliably store your state right inside your service using Reliable Collections: a simple set of highly-available collection classes that will be familiar to anyone who's used C# collections.</source>
          <target state="new">For stateful services, the Reliable Service programming model allows you to consistently and reliably store your state right inside your service using Reliable Collections: a simple set of highly-available collection classes that will be familiar to anyone who's used C# collections.</target>
        </trans-unit>
        <trans-unit id="af411719-326b-40ad-9195-934391789b36" xml:space="preserve">
          <source>Traditionally, services needed external systems for reliable state management.</source>
          <target state="new">Traditionally, services needed external systems for reliable state management.</target>
        </trans-unit>
        <trans-unit id="5f8e6367-eb07-46d2-8887-885641534ff1" xml:space="preserve">
          <source>With Reliable Collections, you can store your state next to your compute with the same high-availability and reliability you've come to expect from highly-available external stores, and with the additional latency improvements co-locating the compute and the state provide.</source>
          <target state="new">With Reliable Collections, you can store your state next to your compute with the same high-availability and reliability you've come to expect from highly-available external stores, and with the additional latency improvements co-locating the compute and the state provide.</target>
        </trans-unit>
        <trans-unit id="57d7a7f8-caf7-4c0e-90a2-c4d2fa35a8f7" xml:space="preserve">
          <source>A simple model for running your own code that looks like programming models you are used to: your code has a well-defined entry point and easily managed lifecycle.</source>
          <target state="new">A simple model for running your own code that looks like programming models you are used to: your code has a well-defined entry point and easily managed lifecycle.</target>
        </trans-unit>
        <trans-unit id="203478b8-4aeb-430f-b4a1-2437f96526b0" xml:space="preserve">
          <source>A pluggable communication model - use the transport of your choice, like HTTP with <bpt id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;linkText&gt;</bpt>Web API<ept id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;/linkText&gt;</ept><bpt id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;title&gt;</bpt><ept id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;/title&gt;</ept>, WebSockets, custom TCP protocols, etc. Reliable Services provides some great out of the box options you can use, or allows you to provide your own.</source>
          <target state="new">A pluggable communication model - use the transport of your choice, like HTTP with <bpt id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;linkText&gt;</bpt>Web API<ept id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;/linkText&gt;</ept><bpt id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;title&gt;</bpt><ept id="d56e1706-abf6-4f54-b2c9-4491a07bea8d">&lt;/title&gt;</ept>, WebSockets, custom TCP protocols, etc. Reliable Services provides some great out of the box options you can use, or allows you to provide your own.</target>
        </trans-unit>
        <trans-unit id="26c9a15b-1128-4937-8b1b-e923b05a1775" xml:space="preserve">
          <source>Reliable Services in Service Fabric are different from services you may have written before.</source>
          <target state="new">Reliable Services in Service Fabric are different from services you may have written before.</target>
        </trans-unit>
        <trans-unit id="6dad3a19-b7d9-4548-9daa-e848dedbc3e2" xml:space="preserve">
          <source>Service Fabric provides reliability, availability, consistency, and scalability.</source>
          <target state="new">Service Fabric provides reliability, availability, consistency, and scalability.</target>
        </trans-unit>
        <trans-unit id="336388b0-2e54-4d26-bc86-1d1c14b5a09e" xml:space="preserve">
          <source>&lt;u&gt;Reliability&lt;/u&gt; - your service will stay up even in unreliable environments where your machines may fail or hit network issues.</source>
          <target state="new">&lt;u&gt;Reliability&lt;/u&gt; - your service will stay up even in unreliable environments where your machines may fail or hit network issues.</target>
        </trans-unit>
        <trans-unit id="c6664303-66c7-404f-ac1b-f0e0117deb20" xml:space="preserve">
          <source>&lt;u&gt;Availability&lt;/u&gt; - your service will be reachable and responsive (this doesn't mean that you can't have services which can't be found or reached from outside).</source>
          <target state="new">&lt;u&gt;Availability&lt;/u&gt; - your service will be reachable and responsive (this doesn't mean that you can't have services which can't be found or reached from outside).</target>
        </trans-unit>
        <trans-unit id="e48d7512-e492-40cc-a5d5-909ae05d0f0b" xml:space="preserve">
          <source>&lt;u&gt;Scalability&lt;/u&gt; – Services are decoupled from specific hardware and can grow or shrink as necessary through the addition or removal of hardware or virtual resources.</source>
          <target state="new">&lt;u&gt;Scalability&lt;/u&gt; – Services are decoupled from specific hardware and can grow or shrink as necessary through the addition or removal of hardware or virtual resources.</target>
        </trans-unit>
        <trans-unit id="40eb5021-f72f-4724-a21b-d8baa66f22f4" xml:space="preserve">
          <source>Services are easily partitioned (especially in the stateful case) to ensure that independent portions of the service can scale and respond to failures independently.</source>
          <target state="new">Services are easily partitioned (especially in the stateful case) to ensure that independent portions of the service can scale and respond to failures independently.</target>
        </trans-unit>
        <trans-unit id="c4a1e59c-a40e-49b2-bdec-9277456dc9f2" xml:space="preserve">
          <source>Finally, Service Fabric encourages services to be lightweight by allowing thousands of services to be provisioned within a single process, rather than requiring or dedicating entire OS instances to a single instance of a particular workload.</source>
          <target state="new">Finally, Service Fabric encourages services to be lightweight by allowing thousands of services to be provisioned within a single process, rather than requiring or dedicating entire OS instances to a single instance of a particular workload.</target>
        </trans-unit>
        <trans-unit id="87995f2d-ca2e-401f-a278-281ff0b9aac7" xml:space="preserve">
          <source>&lt;u&gt;Consistency&lt;/u&gt; - this means that any information stored in this service can be guaranteed consistent (this only applies to stateful services - more on this later)</source>
          <target state="new">&lt;u&gt;Consistency&lt;/u&gt; - this means that any information stored in this service can be guaranteed consistent (this only applies to stateful services - more on this later)</target>
        </trans-unit>
        <trans-unit id="03e66798-a82e-4c7e-ae11-45b198cca0fd" xml:space="preserve">
          <source>Whether your service is stateful or stateless, Reliable Services provide a simple lifecycle that lets you quickly plug your code in and get started.</source>
          <target state="new">Whether your service is stateful or stateless, Reliable Services provide a simple lifecycle that lets you quickly plug your code in and get started.</target>
        </trans-unit>
        <trans-unit id="af311975-db38-4b92-9782-90792b787a82" xml:space="preserve">
          <source>There's really just one or two methods that you need to implement in order to get your service up and running.</source>
          <target state="new">There's really just one or two methods that you need to implement in order to get your service up and running.</target>
        </trans-unit>
        <trans-unit id="130786e7-fbc4-4ed8-9a30-c83305e19a56" xml:space="preserve">
          <source>CreateCommunicationListener - This is where the service defines the communications stack that it wants to use.</source>
          <target state="new">CreateCommunicationListener - This is where the service defines the communications stack that it wants to use.</target>
        </trans-unit>
        <trans-unit id="2a39beda-9ef6-41cd-9ed4-9a2eca8401cc" xml:space="preserve">
          <source>The communication stack, such as <bpt id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;linkText&gt;</bpt>Web API<ept id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;/linkText&gt;</ept><bpt id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;title&gt;</bpt><ept id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;/title&gt;</ept>, is what defines the listening endpoint(s) for the service (how clients will reach it), as well as how those messages which show up end up interacting with the rest of the service code.</source>
          <target state="new">The communication stack, such as <bpt id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;linkText&gt;</bpt>Web API<ept id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;/linkText&gt;</ept><bpt id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;title&gt;</bpt><ept id="3e82764a-33b7-40cd-8c0b-fea00c56157b">&lt;/title&gt;</ept>, is what defines the listening endpoint(s) for the service (how clients will reach it), as well as how those messages which show up end up interacting with the rest of the service code.</target>
        </trans-unit>
        <trans-unit id="fcc82e45-f078-45c0-b251-8798b5cc4612" xml:space="preserve">
          <source>RunAsync - This is where your service runs its business logic.</source>
          <target state="new">RunAsync - This is where your service runs its business logic.</target>
        </trans-unit>
        <trans-unit id="231c4bf4-90e1-4f4d-a2f1-d73876ef76d9" xml:space="preserve">
          <source>The cancellation token that is provided is a signal for when that work should stop.</source>
          <target state="new">The cancellation token that is provided is a signal for when that work should stop.</target>
        </trans-unit>
        <trans-unit id="2277608b-5fa2-443d-b672-74452b77658d" xml:space="preserve">
          <source>For example, if you have a service that needs to constantly pull messages out of a ReliableQueue and process them, this would be where that work would happen.</source>
          <target state="new">For example, if you have a service that needs to constantly pull messages out of a ReliableQueue and process them, this would be where that work would happen.</target>
        </trans-unit>
        <trans-unit id="9ad92207-1709-4ab9-817e-2c9d3053a1eb" xml:space="preserve">
          <source>The major events in the lifecycle of a Reliable Service are as follows:</source>
          <target state="new">The major events in the lifecycle of a Reliable Service are as follows:</target>
        </trans-unit>
        <trans-unit id="fb807f25-d5cc-4655-8a71-93de0dcd8bce" xml:space="preserve">
          <source>The Service Object (the thing that derives from StatelessService or StatefulService) is constructed.</source>
          <target state="new">The Service Object (the thing that derives from StatelessService or StatefulService) is constructed.</target>
        </trans-unit>
        <trans-unit id="f6495fd3-b868-4d47-a4ca-7c06315d9f65" xml:space="preserve">
          <source>The CreateCommunicationListener method is called, giving the service a chance to return a communication listener of its choice.</source>
          <target state="new">The CreateCommunicationListener method is called, giving the service a chance to return a communication listener of its choice.</target>
        </trans-unit>
        <trans-unit id="3026ee4a-2a3a-444b-8b74-ccfde8a448e5" xml:space="preserve">
          <source>Note that this is optional, though most services will expose some endpoint directly.</source>
          <target state="new">Note that this is optional, though most services will expose some endpoint directly.</target>
        </trans-unit>
        <trans-unit id="b6e8fe97-e719-449f-b6f6-c860a3a75998" xml:space="preserve">
          <source>Once the communication listener is created it is opened</source>
          <target state="new">Once the communication listener is created it is opened</target>
        </trans-unit>
        <trans-unit id="61341ac7-5a35-48d9-b8c8-4f33ab4aad76" xml:space="preserve">
          <source>Communication listeners have a method called Open(), which is called at this point and which returns the listening address for the service.</source>
          <target state="new">Communication listeners have a method called Open(), which is called at this point and which returns the listening address for the service.</target>
        </trans-unit>
        <trans-unit id="e03188c9-5829-4bf5-8c85-2ae59f6f4ade" xml:space="preserve">
          <source>If your Reliable Service uses one of the built in ICommunicationListeners, then this is handled for you.</source>
          <target state="new">If your Reliable Service uses one of the built in ICommunicationListeners, then this is handled for you.</target>
        </trans-unit>
        <trans-unit id="88ad9805-9a69-4974-9d1a-753941d08e79" xml:space="preserve">
          <source>Once the communication listener is Open(), the RunAsync() call on the main service is called.</source>
          <target state="new">Once the communication listener is Open(), the RunAsync() call on the main service is called.</target>
        </trans-unit>
        <trans-unit id="35509d8b-bef6-4e71-88d8-baffccd92942" xml:space="preserve">
          <source>Note that RunAsync is optional - if the service does all its work directly in response to user calls only, then there is no need for it to implement RunAsync().</source>
          <target state="new">Note that RunAsync is optional - if the service does all its work directly in response to user calls only, then there is no need for it to implement RunAsync().</target>
        </trans-unit>
        <trans-unit id="6efd427f-fac7-4c8f-85ad-1810b5b61bfe" xml:space="preserve">
          <source>When the service is being shut down (either when it is deleted or just being moved from a particular location) the call order is the same, first Close() is called on the communication listener, then the cancellation token that was passed to RunAsync() is canceled.</source>
          <target state="new">When the service is being shut down (either when it is deleted or just being moved from a particular location) the call order is the same, first Close() is called on the communication listener, then the cancellation token that was passed to RunAsync() is canceled.</target>
        </trans-unit>
        <trans-unit id="61d2b143-e382-4baf-ae02-0d70adddaf2c" xml:space="preserve">
          <source>Knowing this programming model, let's take a quick look at two different services to see how these pieces fit together.</source>
          <target state="new">Knowing this programming model, let's take a quick look at two different services to see how these pieces fit together.</target>
        </trans-unit>
        <trans-unit id="6a9a5dfd-1694-49ce-ac2b-a21bced565c4" xml:space="preserve">
          <source>A stateless service is one where there is literally no state maintained within the service, or the state that is present is entirely disposable and does not require synchronization, replication, persistence, or high availability.</source>
          <target state="new">A stateless service is one where there is literally no state maintained within the service, or the state that is present is entirely disposable and does not require synchronization, replication, persistence, or high availability.</target>
        </trans-unit>
        <trans-unit id="5b1c42fb-2709-4216-894e-5c3a7aa11944" xml:space="preserve">
          <source>For example, consider a Calculator that has no memory, and which receives all terms and the operations to perform at once.</source>
          <target state="new">For example, consider a Calculator that has no memory, and which receives all terms and the operations to perform at once.</target>
        </trans-unit>
        <trans-unit id="97e73c88-5864-4711-812a-245f1fb7fa97" xml:space="preserve">
          <source>In this case, the RunAsync() of the service can be empty since there is no background task processing that the service needs to do.</source>
          <target state="new">In this case, the RunAsync() of the service can be empty since there is no background task processing that the service needs to do.</target>
        </trans-unit>
        <trans-unit id="ec744d44-853e-40cb-ba11-22efd1b66c3d" xml:space="preserve">
          <source>When the Calculator service is created it will return a CommunicationListener (for example <bpt id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;linkText&gt;</bpt>Web API<ept id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;/linkText&gt;</ept><bpt id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;title&gt;</bpt><ept id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;/title&gt;</ept>) which opens up a listening endpoint on some port.</source>
          <target state="new">When the Calculator service is created it will return a CommunicationListener (for example <bpt id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;linkText&gt;</bpt>Web API<ept id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;/linkText&gt;</ept><bpt id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;title&gt;</bpt><ept id="c657a767-dfe6-4e0f-9f0a-7aa25047f29f">&lt;/title&gt;</ept>) which opens up a listening endpoint on some port.</target>
        </trans-unit>
        <trans-unit id="675c31dd-912a-4d76-86f6-ef086a2b2b75" xml:space="preserve">
          <source>This listening endpoint will hook up to the different methods (ex: "Add(n1, n2)") which define the Calculator's public API.</source>
          <target state="new">This listening endpoint will hook up to the different methods (ex: "Add(n1, n2)") which define the Calculator's public API.</target>
        </trans-unit>
        <trans-unit id="892624ec-b91e-434e-b73d-ff88cbdcb05d" xml:space="preserve">
          <source>When a call is made from a client, the appropriate method is invoked, and the Calculator service performs the operations on the data provided and returns the result.</source>
          <target state="new">When a call is made from a client, the appropriate method is invoked, and the Calculator service performs the operations on the data provided and returns the result.</target>
        </trans-unit>
        <trans-unit id="5651d833-034b-485c-a31c-9914f311487f" xml:space="preserve">
          <source>It does not store any state.</source>
          <target state="new">It does not store any state.</target>
        </trans-unit>
        <trans-unit id="cfa3bac5-e906-4b7f-b049-95d6befcd24b" xml:space="preserve">
          <source>Not storing any internal state makes this example Calculator really simple.</source>
          <target state="new">Not storing any internal state makes this example Calculator really simple.</target>
        </trans-unit>
        <trans-unit id="f435bf8d-cda1-4153-a7b4-331f90ae5a04" xml:space="preserve">
          <source>However most services are not truly stateless - instead they externalize their state to some other store (for example, any web app that relies on keeping session state in a backing store or cache is not completely stateless).</source>
          <target state="new">However most services are not truly stateless - instead they externalize their state to some other store (for example, any web app that relies on keeping session state in a backing store or cache is not completely stateless).</target>
        </trans-unit>
        <trans-unit id="62b70a67-cfcb-4a9f-8d97-6940ab867398" xml:space="preserve">
          <source>A common example of how stateless services are used in Service Fabric is as a front-end that exposes the public-facing API for a web application.</source>
          <target state="new">A common example of how stateless services are used in Service Fabric is as a front-end that exposes the public-facing API for a web application.</target>
        </trans-unit>
        <trans-unit id="eb6a0d87-870a-408e-b37f-246686bbaf9a" xml:space="preserve">
          <source>The front-end service then talks to stateful services to complete a user's request.</source>
          <target state="new">The front-end service then talks to stateful services to complete a user's request.</target>
        </trans-unit>
        <trans-unit id="e43bf29f-57c1-4e7c-b8eb-afdfb8d37250" xml:space="preserve">
          <source>In this case, calls from clients are directed to a known port like 80 where the stateless service is listening.</source>
          <target state="new">In this case, calls from clients are directed to a known port like 80 where the stateless service is listening.</target>
        </trans-unit>
        <trans-unit id="e51140ce-8b8b-49b6-9189-86ab59d91f90" xml:space="preserve">
          <source>This stateless service receives the call and determines if the call is from a trusted party, as well as what service it is destined for.</source>
          <target state="new">This stateless service receives the call and determines if the call is from a trusted party, as well as what service it is destined for.</target>
        </trans-unit>
        <trans-unit id="76a257ad-084e-413f-8788-bd99349a1bc3" xml:space="preserve">
          <source>Then, the stateless service forwards the call to the correct partition of the stateful service, and waits for a response.</source>
          <target state="new">Then, the stateless service forwards the call to the correct partition of the stateful service, and waits for a response.</target>
        </trans-unit>
        <trans-unit id="0340d5d6-a2c0-45fc-9b84-a25d163d128c" xml:space="preserve">
          <source>When it receives a response, it replies back to the original client.</source>
          <target state="new">When it receives a response, it replies back to the original client.</target>
        </trans-unit>
        <trans-unit id="02d68e43-5599-404e-a3ac-d620801b84e7" xml:space="preserve">
          <source>A stateful service is one that must have some portion of state kept consistent and present in order for the service to function.</source>
          <target state="new">A stateful service is one that must have some portion of state kept consistent and present in order for the service to function.</target>
        </trans-unit>
        <trans-unit id="b0c7dee7-5b0d-414e-8aec-72cce61e8b68" xml:space="preserve">
          <source>Consider a service which constantly computes a rolling average of some value based on updates it is receiving.</source>
          <target state="new">Consider a service which constantly computes a rolling average of some value based on updates it is receiving.</target>
        </trans-unit>
        <trans-unit id="f4e728c0-8624-435b-ac8b-d9bd09680411" xml:space="preserve">
          <source>In order to do this, it must have both the current set of incoming requests which it needs to process as well as the current average.</source>
          <target state="new">In order to do this, it must have both the current set of incoming requests which it needs to process as well as the current average.</target>
        </trans-unit>
        <trans-unit id="b057932b-3802-43f9-a72a-5b06a17b43d7" xml:space="preserve">
          <source>Any service that retrieves, processes, and stores information in an external store (like Azure Blob or Table store today) is stateful - it just keeps its state in the external state store.</source>
          <target state="new">Any service that retrieves, processes, and stores information in an external store (like Azure Blob or Table store today) is stateful - it just keeps its state in the external state store.</target>
        </trans-unit>
        <trans-unit id="f213abb0-bddf-4341-8942-8e7103f6a295" xml:space="preserve">
          <source>Most services today store their state externally since the external store is what provides reliability, availability, scalability, and consistency for that state.</source>
          <target state="new">Most services today store their state externally since the external store is what provides reliability, availability, scalability, and consistency for that state.</target>
        </trans-unit>
        <trans-unit id="da1cebab-134a-4df3-8413-4f30cddb5602" xml:space="preserve">
          <source>In Service Fabric, stateful services aren't required to store their state externally because Service Fabric takes care of these requirements both for the service code and the service state.</source>
          <target state="new">In Service Fabric, stateful services aren't required to store their state externally because Service Fabric takes care of these requirements both for the service code and the service state.</target>
        </trans-unit>
        <trans-unit id="092ac8f7-1683-4e35-b6c3-ea5d8045a1e0" xml:space="preserve">
          <source>Let's say we wanted to write a service that took requests for a series of conversions that needed to be performed on an image, and the image that needed to be converted.  For this service it would return a CommunicationListener (let's suppose WebAPI) which opens up a communication port and allows submissions via an API like <bpt id="e9c6086b-8326-4c97-a1ef-890e815cc884">&lt;code&gt;</bpt>ConvertImage(Image i, IList&lt;Conversion&gt; conversions)<ept id="e9c6086b-8326-4c97-a1ef-890e815cc884">&lt;/code&gt;</ept>. In this API the service could take the information and store the request in a ReliableQueue, and then return some token to the client so it could keep track of the request (since the requests could take some time).</source>
          <target state="new">Let's say we wanted to write a service that took requests for a series of conversions that needed to be performed on an image, and the image that needed to be converted.  For this service it would return a CommunicationListener (let's suppose WebAPI) which opens up a communication port and allows submissions via an API like <bpt id="e9c6086b-8326-4c97-a1ef-890e815cc884">&lt;code&gt;</bpt>ConvertImage(Image i, IList&lt;Conversion&gt; conversions)<ept id="e9c6086b-8326-4c97-a1ef-890e815cc884">&lt;/code&gt;</ept>. In this API the service could take the information and store the request in a ReliableQueue, and then return some token to the client so it could keep track of the request (since the requests could take some time).</target>
        </trans-unit>
        <trans-unit id="1977a90d-e642-4016-b8c9-6488d7d84154" xml:space="preserve">
          <source>In this service the RunAsync could be more complex: the service would have a loop inside its RunAsync that pulls requests out of the ReliableQueue, performs the conversions listed, and stores the results in a ReliableDictionary so that when the client comes back they can get their converted images.</source>
          <target state="new">In this service the RunAsync could be more complex: the service would have a loop inside its RunAsync that pulls requests out of the ReliableQueue, performs the conversions listed, and stores the results in a ReliableDictionary so that when the client comes back they can get their converted images.</target>
        </trans-unit>
        <trans-unit id="ea974187-706c-4167-b914-058a266af379" xml:space="preserve">
          <source>In order to ensure that even if something fails the image isn't lost, this reliable service would pull out of the Queue, perform the conversions, and store the result in a Transaction so that the message is only actually removed from the queue and the results stored in the result dictionary when the conversions are complete.</source>
          <target state="new">In order to ensure that even if something fails the image isn't lost, this reliable service would pull out of the Queue, perform the conversions, and store the result in a Transaction so that the message is only actually removed from the queue and the results stored in the result dictionary when the conversions are complete.</target>
        </trans-unit>
        <trans-unit id="515fb612-890f-4cb4-9030-098c896a00c8" xml:space="preserve">
          <source>If something fails in the middle (like the machine this instance of the code is running on), the request remains in the queue waiting to be processed again.</source>
          <target state="new">If something fails in the middle (like the machine this instance of the code is running on), the request remains in the queue waiting to be processed again.</target>
        </trans-unit>
        <trans-unit id="e8f1934e-10d2-485f-8318-dcddb828cdfa" xml:space="preserve">
          <source>One thing to note about this service is that it sounds like a normal .NET service - the only difference is that the data structures being used (ReliableQueue and ReliableDictionary) are provided by Service Fabric and hence are made highly reliable, available, and consistent.</source>
          <target state="new">One thing to note about this service is that it sounds like a normal .NET service - the only difference is that the data structures being used (ReliableQueue and ReliableDictionary) are provided by Service Fabric and hence are made highly reliable, available, and consistent.</target>
        </trans-unit>
        <trans-unit id="653ad4ea-6c9c-4830-8388-283a1edc714b" xml:space="preserve">
          <source>If any of the following characterize your application service needs, then the Reliable Services APIs should be considered:</source>
          <target state="new">If any of the following characterize your application service needs, then the Reliable Services APIs should be considered:</target>
        </trans-unit>
        <trans-unit id="a947e92b-f03a-4984-87b1-e17d50264cd4" xml:space="preserve">
          <source>You need to provide application behavior across multiple units of state (e.g. Orders and Order Line Items)</source>
          <target state="new">You need to provide application behavior across multiple units of state (e.g. Orders and Order Line Items)</target>
        </trans-unit>
        <trans-unit id="6b8a0792-40f8-41a1-98bf-c4848b6508ba" xml:space="preserve">
          <source>Your application’s state can be naturally modeled as reliable dictionaries and queues</source>
          <target state="new">Your application’s state can be naturally modeled as reliable dictionaries and queues</target>
        </trans-unit>
        <trans-unit id="3b10d7e9-8987-44d7-9dc9-b01c8f1bd3d0" xml:space="preserve">
          <source>Your state needs to be highly available with low latency access</source>
          <target state="new">Your state needs to be highly available with low latency access</target>
        </trans-unit>
        <trans-unit id="e541f93f-2854-416f-9d0c-b77cb221fcc9" xml:space="preserve">
          <source>Your application needs to control the concurrency or granularity of transacted operations across one or more reliable collections</source>
          <target state="new">Your application needs to control the concurrency or granularity of transacted operations across one or more reliable collections</target>
        </trans-unit>
        <trans-unit id="d6975afb-bd9a-41da-b3c2-b9535b99ed19" xml:space="preserve">
          <source>You want to manage the communications or control the partitioning scheme for your service</source>
          <target state="new">You want to manage the communications or control the partitioning scheme for your service</target>
        </trans-unit>
        <trans-unit id="e4346fd0-0b26-464e-9131-a195bce944ab" xml:space="preserve">
          <source>Your code needs a free-threaded runtime environment</source>
          <target state="new">Your code needs a free-threaded runtime environment</target>
        </trans-unit>
        <trans-unit id="1db6344d-6777-4fbf-86b1-c4be69afa81d" xml:space="preserve">
          <source>Your application needs to dynamically create or destroy reliable dictionaries or queues at runtime</source>
          <target state="new">Your application needs to dynamically create or destroy reliable dictionaries or queues at runtime</target>
        </trans-unit>
        <trans-unit id="53b22b80-0a78-4142-969e-ca65ae26104d" xml:space="preserve">
          <source>You need to programmatically control Service Fabric provided backup and restore features for your service’s state*</source>
          <target state="new">You need to programmatically control Service Fabric provided backup and restore features for your service’s state*</target>
        </trans-unit>
        <trans-unit id="61e5771f-e195-4693-85ea-918c168e8239" xml:space="preserve">
          <source>Your application needs to maintain change history for its units of state*</source>
          <target state="new">Your application needs to maintain change history for its units of state*</target>
        </trans-unit>
        <trans-unit id="8eac49d7-e713-4192-87e6-a6761b681089" xml:space="preserve">
          <source>You wish to develop, or consume 3rd party developed, custom state providers*</source>
          <target state="new">You wish to develop, or consume 3rd party developed, custom state providers*</target>
        </trans-unit>
        <trans-unit id="f2490281-b066-4702-9a06-77983b9ac888" xml:space="preserve">
          <source>*Features available at SDK general availability</source>
          <target state="new">*Features available at SDK general availability</target>
        </trans-unit>
        <trans-unit id="08ee228f-cf2b-4123-889a-77311514e3de" xml:space="preserve">
          <source><bpt id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;linkText&gt;</bpt>Reliable Services Quick Start<ept id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;/linkText&gt;</ept><bpt id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;title&gt;</bpt><ept id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;linkText&gt;</bpt>Reliable Services Quick Start<ept id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;/linkText&gt;</ept><bpt id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;title&gt;</bpt><ept id="d52df8f5-a81e-441f-aedb-ac67759ba9b9">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="935f371d-c5d1-4d0a-aa54-dc6348993051" xml:space="preserve">
          <source><bpt id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;linkText&gt;</bpt>Check out Reliable Services advanced usage<ept id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;/linkText&gt;</ept><bpt id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;title&gt;</bpt><ept id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;linkText&gt;</bpt>Check out Reliable Services advanced usage<ept id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;/linkText&gt;</ept><bpt id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;title&gt;</bpt><ept id="fd664d3e-66b6-40f5-885c-3bc29afd6d00">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="dd6d3dfa-2ab7-49bd-8ec5-aeca13ddd5a6" xml:space="preserve">
          <source><bpt id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;linkText&gt;</bpt>Read the Reliable Actors programming model<ept id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;/linkText&gt;</ept><bpt id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;title&gt;</bpt><ept id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;linkText&gt;</bpt>Read the Reliable Actors programming model<ept id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;/linkText&gt;</ept><bpt id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;title&gt;</bpt><ept id="06465a1b-14b1-408e-b6d2-c6393d7bef5b">&lt;/title&gt;</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>