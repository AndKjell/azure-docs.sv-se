<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="62b61f3f-fcb8-45e5-8bcc-76b1e7666ce8" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="62b61f3f-fcb8-45e5-8bcc-76b1e7666ce8" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="880a9904-c739-4ec2-8eb5-6ea2cbdf47b4">
        <trans-unit id="cd5288c4-f0e5-4c99-a906-b1e1fd1f9dc2" xml:space="preserve">
          <source>Reliable Actors Timers and Reminders</source>
          <target state="new">Reliable Actors Timers and Reminders</target>
        </trans-unit>
        <trans-unit id="d2408849-e23a-41e7-b028-59ad3c65e3ad" xml:space="preserve">
          <source>Introduction to Timers and Reminders for Service Fabric Reliable Actors.</source>
          <target state="new">Introduction to Timers and Reminders for Service Fabric Reliable Actors.</target>
        </trans-unit>
        <trans-unit id="353a2a37-2695-4b69-b814-2aff84f1eabd" xml:space="preserve">
          <source>Actor timers provide a simple wrapper around .NET timers such that the callback methods respect the turn-based concurrency guarantees provided by the Actors runtime.</source>
          <target state="new">Actor timers provide a simple wrapper around .NET timers such that the callback methods respect the turn-based concurrency guarantees provided by the Actors runtime.</target>
        </trans-unit>
        <trans-unit id="c1dfd380-90ba-427c-8c79-a3108868043b" xml:space="preserve">
          <source>Actors can use the <bpt id="8a1bd37b-19a6-415b-92dc-2c68d5261372">&lt;code&gt;</bpt>RegisterTimer<ept id="8a1bd37b-19a6-415b-92dc-2c68d5261372">&lt;/code&gt;</ept> and <bpt id="f5a480fb-c0db-4efe-82ad-c2e6ac88fc37">&lt;code&gt;</bpt>UnregisterTimer<ept id="f5a480fb-c0db-4efe-82ad-c2e6ac88fc37">&lt;/code&gt;</ept> methods on their base class to register and unregister their timers.</source>
          <target state="new">Actors can use the <bpt id="8a1bd37b-19a6-415b-92dc-2c68d5261372">&lt;code&gt;</bpt>RegisterTimer<ept id="8a1bd37b-19a6-415b-92dc-2c68d5261372">&lt;/code&gt;</ept> and <bpt id="f5a480fb-c0db-4efe-82ad-c2e6ac88fc37">&lt;code&gt;</bpt>UnregisterTimer<ept id="f5a480fb-c0db-4efe-82ad-c2e6ac88fc37">&lt;/code&gt;</ept> methods on their base class to register and unregister their timers.</target>
        </trans-unit>
        <trans-unit id="33626735-39ee-443f-9b82-a08661276443" xml:space="preserve">
          <source>The example below shows the use of timer APIs.</source>
          <target state="new">The example below shows the use of timer APIs.</target>
        </trans-unit>
        <trans-unit id="a0e46de9-c5bb-4a54-bc11-51438d8030eb" xml:space="preserve">
          <source>The APIs are very similar to the .NET timer.</source>
          <target state="new">The APIs are very similar to the .NET timer.</target>
        </trans-unit>
        <trans-unit id="f2b9cee7-ee69-4e1b-b9e6-5bcf2d95192b" xml:space="preserve">
          <source>In the example below when the timer is due the <bpt id="30f076b1-77fa-4911-b193-c38c18fafe79">&lt;code&gt;</bpt>MoveObject<ept id="30f076b1-77fa-4911-b193-c38c18fafe79">&lt;/code&gt;</ept> method will be called by the Actors runtime and it is guaranteed to respect the turn-based concurrency, which means that no other actor methods or timer/reminder callbacks will be in progress until this callback completes execution.</source>
          <target state="new">In the example below when the timer is due the <bpt id="30f076b1-77fa-4911-b193-c38c18fafe79">&lt;code&gt;</bpt>MoveObject<ept id="30f076b1-77fa-4911-b193-c38c18fafe79">&lt;/code&gt;</ept> method will be called by the Actors runtime and it is guaranteed to respect the turn-based concurrency, which means that no other actor methods or timer/reminder callbacks will be in progress until this callback completes execution.</target>
        </trans-unit>
        <trans-unit id="c023bc6a-3432-4073-9e1e-6a4a8549f30e" xml:space="preserve">
          <source>The next period of the timer starts after the callback completes execution.</source>
          <target state="new">The next period of the timer starts after the callback completes execution.</target>
        </trans-unit>
        <trans-unit id="0ac793a1-eeaf-4d61-a832-6caef2133a96" xml:space="preserve">
          <source>This implies that the timer is stopped while the callback is executing and is started when the callback has completed.</source>
          <target state="new">This implies that the timer is stopped while the callback is executing and is started when the callback has completed.</target>
        </trans-unit>
        <trans-unit id="fe99661a-8875-4482-b34f-22b1643818a1" xml:space="preserve">
          <source>The Actors runtime saves the actor state when the callback completes if the Actor is a stateful actor like in the example above.</source>
          <target state="new">The Actors runtime saves the actor state when the callback completes if the Actor is a stateful actor like in the example above.</target>
        </trans-unit>
        <trans-unit id="decda4cf-426b-4b51-b083-5883aae49814" xml:space="preserve">
          <source>If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</source>
          <target state="new">If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</target>
        </trans-unit>
        <trans-unit id="55076270-f3b5-4703-b1bb-717a66c323c0" xml:space="preserve">
          <source>A callback method that does not modify the actor state can be registered as a read-only timer callback by specifying the Readonly attribute on the timer callback, as described in the section on <bpt id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;linkText&gt;</bpt>readonly methods<ept id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;/linkText&gt;</ept><bpt id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;title&gt;</bpt><ept id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;/title&gt;</ept>.</source>
          <target state="new">A callback method that does not modify the actor state can be registered as a read-only timer callback by specifying the Readonly attribute on the timer callback, as described in the section on <bpt id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;linkText&gt;</bpt>readonly methods<ept id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;/linkText&gt;</ept><bpt id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;title&gt;</bpt><ept id="c74c091f-4f95-446d-a949-6af979b2e486">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="369c2044-ae2e-424b-8c17-c7d5cffa3859" xml:space="preserve">
          <source>All timers are stopped when the actor is deactivated as part of garbage collection and no timer callbacks are invoked after that.</source>
          <target state="new">All timers are stopped when the actor is deactivated as part of garbage collection and no timer callbacks are invoked after that.</target>
        </trans-unit>
        <trans-unit id="6c7e3ac8-6eec-44c8-badb-11e7b236db06" xml:space="preserve">
          <source>Also, the Actors runtime does not retain any information about the timers that were running before deactivation.</source>
          <target state="new">Also, the Actors runtime does not retain any information about the timers that were running before deactivation.</target>
        </trans-unit>
        <trans-unit id="d8016894-eec0-44bc-a3b2-a4278dffd374" xml:space="preserve">
          <source>It is up to the actor to register any timers that it needs when it is reactivated in the future.</source>
          <target state="new">It is up to the actor to register any timers that it needs when it is reactivated in the future.</target>
        </trans-unit>
        <trans-unit id="a3284b27-702e-4e57-b28f-7c57a55aab25" xml:space="preserve">
          <source>For more information, please see the section on <bpt id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;linkText&gt;</bpt>actor garbage collection<ept id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;/linkText&gt;</ept><bpt id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;title&gt;</bpt><ept id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;/title&gt;</ept>.</source>
          <target state="new">For more information, please see the section on <bpt id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;linkText&gt;</bpt>actor garbage collection<ept id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;/linkText&gt;</ept><bpt id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;title&gt;</bpt><ept id="f94ce7cf-4beb-4c17-bf6c-5a2a5d39f38d">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="4c6f1f6a-7055-4cae-a83a-65eab146055f" xml:space="preserve">
          <source>Reminders are a mechanism to trigger persistent callbacks on an Actor at specified times.</source>
          <target state="new">Reminders are a mechanism to trigger persistent callbacks on an Actor at specified times.</target>
        </trans-unit>
        <trans-unit id="93868ad0-2cc2-429f-9b23-5a078774a898" xml:space="preserve">
          <source>Their functionality is similar to timers, but unlike timers reminders are triggered under all circumstances until the Reminder is explicitly unregistered by the Actor.</source>
          <target state="new">Their functionality is similar to timers, but unlike timers reminders are triggered under all circumstances until the Reminder is explicitly unregistered by the Actor.</target>
        </trans-unit>
        <trans-unit id="b96b56f8-7863-4665-adcf-3f6d2c9dccbe" xml:space="preserve">
          <source>Specifically, reminders are triggered across actor deactivations and failovers because the Actors runtime persists information about the actor's reminders.</source>
          <target state="new">Specifically, reminders are triggered across actor deactivations and failovers because the Actors runtime persists information about the actor's reminders.</target>
        </trans-unit>
        <trans-unit id="d080aa4d-5785-4beb-84c2-24d025088bfd" xml:space="preserve">
          <source>Reminders are supported for stateful actors only.</source>
          <target state="new">Reminders are supported for stateful actors only.</target>
        </trans-unit>
        <trans-unit id="36cf065f-42a6-435e-9e7f-59103cef9de7" xml:space="preserve">
          <source>Stateless actors cannot use reminders.</source>
          <target state="new">Stateless actors cannot use reminders.</target>
        </trans-unit>
        <trans-unit id="a299b755-713a-48db-b40f-1fcd2d81cec8" xml:space="preserve">
          <source>The actors state providers are responsible for storing information about the reminders that have been registered by actors.</source>
          <target state="new">The actors state providers are responsible for storing information about the reminders that have been registered by actors.</target>
        </trans-unit>
        <trans-unit id="2c7c10dc-cab5-4289-bf2a-4684690c402c" xml:space="preserve">
          <source>To register a reminder an actor calls the <bpt id="454ee558-121b-4bad-9dc7-949b32b4c43b">&lt;code&gt;</bpt>RegisterReminder<ept id="454ee558-121b-4bad-9dc7-949b32b4c43b">&lt;/code&gt;</ept> method provided on base class, as shown in the example below.</source>
          <target state="new">To register a reminder an actor calls the <bpt id="454ee558-121b-4bad-9dc7-949b32b4c43b">&lt;code&gt;</bpt>RegisterReminder<ept id="454ee558-121b-4bad-9dc7-949b32b4c43b">&lt;/code&gt;</ept> method provided on base class, as shown in the example below.</target>
        </trans-unit>
        <trans-unit id="18f82399-2d66-4f0d-9c14-72f545b408e3" xml:space="preserve">
          <source>In the example above, <bpt id="b2c122ae-d6c5-4417-8130-137b65528fa3">&lt;code&gt;</bpt>"Pay cell phone bill"<ept id="b2c122ae-d6c5-4417-8130-137b65528fa3">&lt;/code&gt;</ept> is the reminder name, which is a string that the actor uses to uniquely identify a reminder.</source>
          <target state="new">In the example above, <bpt id="b2c122ae-d6c5-4417-8130-137b65528fa3">&lt;code&gt;</bpt>"Pay cell phone bill"<ept id="b2c122ae-d6c5-4417-8130-137b65528fa3">&lt;/code&gt;</ept> is the reminder name, which is a string that the actor uses to uniquely identify a reminder.</target>
        </trans-unit>
        <trans-unit id="5250010e-e40a-478b-b9e4-423c7bdffcd8" xml:space="preserve">
          <source><bpt id="eed7ab95-9c97-463b-af92-4812169fba49">&lt;code&gt;</bpt>BitConverter.GetBytes(amountInDollars)<ept id="eed7ab95-9c97-463b-af92-4812169fba49">&lt;/code&gt;</ept> is the context that is associated with the reminder.</source>
          <target state="new"><bpt id="eed7ab95-9c97-463b-af92-4812169fba49">&lt;code&gt;</bpt>BitConverter.GetBytes(amountInDollars)<ept id="eed7ab95-9c97-463b-af92-4812169fba49">&lt;/code&gt;</ept> is the context that is associated with the reminder.</target>
        </trans-unit>
        <trans-unit id="493f3cea-a53e-4952-b356-d2a9b7f1625d" xml:space="preserve">
          <source>It will be passed back to the actor as an argument to the reminder callback, i.e. <bpt id="7f6b430a-e54e-4b67-9891-36de062642e8">&lt;code&gt;</bpt>IRemindable.ReceiveReminderAsync<ept id="7f6b430a-e54e-4b67-9891-36de062642e8">&lt;/code&gt;</ept>.</source>
          <target state="new">It will be passed back to the actor as an argument to the reminder callback, i.e. <bpt id="7f6b430a-e54e-4b67-9891-36de062642e8">&lt;code&gt;</bpt>IRemindable.ReceiveReminderAsync<ept id="7f6b430a-e54e-4b67-9891-36de062642e8">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="e6b26f56-6e65-4a28-87b2-446b3199d39d" xml:space="preserve">
          <source>Actors that use reminders must implement <bpt id="b5c13cd4-b5fe-41c0-8db4-631ce6c46eca">&lt;code&gt;</bpt>IRemindable<ept id="b5c13cd4-b5fe-41c0-8db4-631ce6c46eca">&lt;/code&gt;</ept> interface, as shown in the example below.</source>
          <target state="new">Actors that use reminders must implement <bpt id="b5c13cd4-b5fe-41c0-8db4-631ce6c46eca">&lt;code&gt;</bpt>IRemindable<ept id="b5c13cd4-b5fe-41c0-8db4-631ce6c46eca">&lt;/code&gt;</ept> interface, as shown in the example below.</target>
        </trans-unit>
        <trans-unit id="fd539e57-79f6-4058-bea7-748c5251d9a8" xml:space="preserve">
          <source>When a reminder is triggered, Fabric Actors runtime will invoke <bpt id="a5d5a1a9-4092-4031-a677-c957c8343efe">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="a5d5a1a9-4092-4031-a677-c957c8343efe">&lt;/code&gt;</ept> method on the Actor.</source>
          <target state="new">When a reminder is triggered, Fabric Actors runtime will invoke <bpt id="a5d5a1a9-4092-4031-a677-c957c8343efe">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="a5d5a1a9-4092-4031-a677-c957c8343efe">&lt;/code&gt;</ept> method on the Actor.</target>
        </trans-unit>
        <trans-unit id="0a155852-3dfe-4753-b7f6-cdd282a6b69b" xml:space="preserve">
          <source>An actor can register multiple reminders and the <bpt id="eac50ced-7be1-43cf-aa87-561d6dea5d93">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="eac50ced-7be1-43cf-aa87-561d6dea5d93">&lt;/code&gt;</ept> method is invoked any time any of those reminders is triggered.</source>
          <target state="new">An actor can register multiple reminders and the <bpt id="eac50ced-7be1-43cf-aa87-561d6dea5d93">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="eac50ced-7be1-43cf-aa87-561d6dea5d93">&lt;/code&gt;</ept> method is invoked any time any of those reminders is triggered.</target>
        </trans-unit>
        <trans-unit id="6efb08ad-87c8-4b6f-8963-f44cf82409fb" xml:space="preserve">
          <source>The actor can use the reminder name that is passed in to the <bpt id="3d0a3670-b7e3-4626-971e-203d02a8799b">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="3d0a3670-b7e3-4626-971e-203d02a8799b">&lt;/code&gt;</ept> method to figure out which reminder was triggered.</source>
          <target state="new">The actor can use the reminder name that is passed in to the <bpt id="3d0a3670-b7e3-4626-971e-203d02a8799b">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="3d0a3670-b7e3-4626-971e-203d02a8799b">&lt;/code&gt;</ept> method to figure out which reminder was triggered.</target>
        </trans-unit>
        <trans-unit id="487a65c5-6f5f-4633-82bc-e2d3c1330a6f" xml:space="preserve">
          <source>The Actors runtime saves the actor state when the <bpt id="55b7cf77-91ec-47a4-b73f-7a2fda687338">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="55b7cf77-91ec-47a4-b73f-7a2fda687338">&lt;/code&gt;</ept> call completes.</source>
          <target state="new">The Actors runtime saves the actor state when the <bpt id="55b7cf77-91ec-47a4-b73f-7a2fda687338">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="55b7cf77-91ec-47a4-b73f-7a2fda687338">&lt;/code&gt;</ept> call completes.</target>
        </trans-unit>
        <trans-unit id="d21850de-8d0b-4c0f-a68e-6f5e1083b0d5" xml:space="preserve">
          <source>If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</source>
          <target state="new">If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</target>
        </trans-unit>
        <trans-unit id="af833f0b-6933-4b0e-9203-2c079dae7e34" xml:space="preserve">
          <source>To specify that the state need not be saved upon completion of the reminder callback, the <bpt id="ec51ffa1-47b2-42bf-819a-16ff7b542e20">&lt;code&gt;</bpt>ActorReminderAttributes.ReadOnly<ept id="ec51ffa1-47b2-42bf-819a-16ff7b542e20">&lt;/code&gt;</ept> flag can be set in the <bpt id="00a482ba-9338-48af-af87-5265dbe780ae">&lt;code&gt;</bpt>attributes<ept id="00a482ba-9338-48af-af87-5265dbe780ae">&lt;/code&gt;</ept> parameter when the <bpt id="55c4bd13-c048-4a15-9a3c-9642f0033ead">&lt;code&gt;</bpt>RegisterReminder<ept id="55c4bd13-c048-4a15-9a3c-9642f0033ead">&lt;/code&gt;</ept> method is called to create the reminder.</source>
          <target state="new">To specify that the state need not be saved upon completion of the reminder callback, the <bpt id="ec51ffa1-47b2-42bf-819a-16ff7b542e20">&lt;code&gt;</bpt>ActorReminderAttributes.ReadOnly<ept id="ec51ffa1-47b2-42bf-819a-16ff7b542e20">&lt;/code&gt;</ept> flag can be set in the <bpt id="00a482ba-9338-48af-af87-5265dbe780ae">&lt;code&gt;</bpt>attributes<ept id="00a482ba-9338-48af-af87-5265dbe780ae">&lt;/code&gt;</ept> parameter when the <bpt id="55c4bd13-c048-4a15-9a3c-9642f0033ead">&lt;code&gt;</bpt>RegisterReminder<ept id="55c4bd13-c048-4a15-9a3c-9642f0033ead">&lt;/code&gt;</ept> method is called to create the reminder.</target>
        </trans-unit>
        <trans-unit id="722fede8-4528-45e7-b44c-b6f893a78d45" xml:space="preserve">
          <source>To unregister a reminder, the <bpt id="dd86bb0c-008d-4b73-ac01-ea40271ebed2">&lt;code&gt;</bpt>UnregisterReminder<ept id="dd86bb0c-008d-4b73-ac01-ea40271ebed2">&lt;/code&gt;</ept> method should be called, as shown in the example below.</source>
          <target state="new">To unregister a reminder, the <bpt id="dd86bb0c-008d-4b73-ac01-ea40271ebed2">&lt;code&gt;</bpt>UnregisterReminder<ept id="dd86bb0c-008d-4b73-ac01-ea40271ebed2">&lt;/code&gt;</ept> method should be called, as shown in the example below.</target>
        </trans-unit>
        <trans-unit id="3b163a4e-6ff3-4802-bddc-d2f2d32f5890" xml:space="preserve">
          <source>As shown above, the <bpt id="e2314158-0770-47f6-a31e-af26e5ca70e4">&lt;code&gt;</bpt>UnregisterReminder<ept id="e2314158-0770-47f6-a31e-af26e5ca70e4">&lt;/code&gt;</ept> method accepts an <bpt id="b94c859b-3748-4675-8d33-b34b61457db0">&lt;code&gt;</bpt>IActorReminder<ept id="b94c859b-3748-4675-8d33-b34b61457db0">&lt;/code&gt;</ept> interface.</source>
          <target state="new">As shown above, the <bpt id="e2314158-0770-47f6-a31e-af26e5ca70e4">&lt;code&gt;</bpt>UnregisterReminder<ept id="e2314158-0770-47f6-a31e-af26e5ca70e4">&lt;/code&gt;</ept> method accepts an <bpt id="b94c859b-3748-4675-8d33-b34b61457db0">&lt;code&gt;</bpt>IActorReminder<ept id="b94c859b-3748-4675-8d33-b34b61457db0">&lt;/code&gt;</ept> interface.</target>
        </trans-unit>
        <trans-unit id="5f99885d-ece2-4e0a-a25c-ec17a83166c0" xml:space="preserve">
          <source>The actor base class supports a <bpt id="e0dc4fc5-edd1-4ff1-ac50-d99c65d9ec4c">&lt;code&gt;</bpt>GetReminder<ept id="e0dc4fc5-edd1-4ff1-ac50-d99c65d9ec4c">&lt;/code&gt;</ept> method that can be used to retrieve the <bpt id="990c0a04-0414-4d79-a9eb-e27acc3f13a7">&lt;code&gt;</bpt>IActorReminder<ept id="990c0a04-0414-4d79-a9eb-e27acc3f13a7">&lt;/code&gt;</ept> interface by passing in the reminder name.</source>
          <target state="new">The actor base class supports a <bpt id="e0dc4fc5-edd1-4ff1-ac50-d99c65d9ec4c">&lt;code&gt;</bpt>GetReminder<ept id="e0dc4fc5-edd1-4ff1-ac50-d99c65d9ec4c">&lt;/code&gt;</ept> method that can be used to retrieve the <bpt id="990c0a04-0414-4d79-a9eb-e27acc3f13a7">&lt;code&gt;</bpt>IActorReminder<ept id="990c0a04-0414-4d79-a9eb-e27acc3f13a7">&lt;/code&gt;</ept> interface by passing in the reminder name.</target>
        </trans-unit>
        <trans-unit id="a731dbd3-39f2-4bd2-9f2b-6d474053b0a5" xml:space="preserve">
          <source>This is convenient because the actor does not need to persist the <bpt id="a3a89c8f-795e-48d3-843d-c31ab87169e2">&lt;code&gt;</bpt>IActorReminder<ept id="a3a89c8f-795e-48d3-843d-c31ab87169e2">&lt;/code&gt;</ept> interface that was returned from the <bpt id="05e56932-6ecb-40fb-8d68-e1ce7b949211">&lt;code&gt;</bpt>RegisterReminder<ept id="05e56932-6ecb-40fb-8d68-e1ce7b949211">&lt;/code&gt;</ept> method call.</source>
          <target state="new">This is convenient because the actor does not need to persist the <bpt id="a3a89c8f-795e-48d3-843d-c31ab87169e2">&lt;code&gt;</bpt>IActorReminder<ept id="a3a89c8f-795e-48d3-843d-c31ab87169e2">&lt;/code&gt;</ept> interface that was returned from the <bpt id="05e56932-6ecb-40fb-8d68-e1ce7b949211">&lt;code&gt;</bpt>RegisterReminder<ept id="05e56932-6ecb-40fb-8d68-e1ce7b949211">&lt;/code&gt;</ept> method call.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>