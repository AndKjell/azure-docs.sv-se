<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="a4cc981a-f187-4732-82f6-d64dfe3f2d71" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="a4cc981a-f187-4732-82f6-d64dfe3f2d71" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="3a633c5a-d3f8-4e6c-976e-d9687830ba76">
        <trans-unit id="3d5f5706-67e2-4530-a20b-451b7c714c91" xml:space="preserve">
          <source>Reliable Actors Smart Cache design pattern</source>
          <target state="new">Reliable Actors Smart Cache design pattern</target>
        </trans-unit>
        <trans-unit id="4806cce4-e57c-48da-8c4a-00198d14f564" xml:space="preserve">
          <source>Design pattern on how to use Reliable Actors as caching infrastructure on web-based applications</source>
          <target state="new">Design pattern on how to use Reliable Actors as caching infrastructure on web-based applications</target>
        </trans-unit>
        <trans-unit id="9c41cdf8-551c-43a9-a4d9-29e1d8fd5fd3" xml:space="preserve">
          <source>The combination of a web tier, caching tier, storage tier, and occasionally a worker tier are pretty much the standard parts of today’s applications.</source>
          <target state="new">The combination of a web tier, caching tier, storage tier, and occasionally a worker tier are pretty much the standard parts of today’s applications.</target>
        </trans-unit>
        <trans-unit id="d3b49e6f-d458-4cfd-a621-d20d608ad3a4" xml:space="preserve">
          <source>The caching tier is usually vital to performance and may, in fact, be comprised of multiple tiers itself.</source>
          <target state="new">The caching tier is usually vital to performance and may, in fact, be comprised of multiple tiers itself.</target>
        </trans-unit>
        <trans-unit id="020974f3-9e4c-4cf6-9a81-2333dfa4614c" xml:space="preserve">
          <source>Many caches are simple key-value pairs while other systems like <bpt id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;linkText&gt;</bpt>Redis<ept id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;/linkText&gt;</ept><bpt id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;title&gt;</bpt><ept id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;/title&gt;</ept> that are used as caches offer richer semantics.</source>
          <target state="new">Many caches are simple key-value pairs while other systems like <bpt id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;linkText&gt;</bpt>Redis<ept id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;/linkText&gt;</ept><bpt id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;title&gt;</bpt><ept id="8fad1e74-4272-4a4e-b239-7a339b4b1e52">&lt;/title&gt;</ept> that are used as caches offer richer semantics.</target>
        </trans-unit>
        <trans-unit id="97461216-cdd1-44cf-854e-599abf422f31" xml:space="preserve">
          <source>Still, any special, caching tier will be limited in semantics and more importantly it is yet another tier to manage.</source>
          <target state="new">Still, any special, caching tier will be limited in semantics and more importantly it is yet another tier to manage.</target>
        </trans-unit>
        <trans-unit id="29146d98-ebcc-42b6-95a6-0a962d687cbc" xml:space="preserve">
          <source>What if instead, objects just kept state in local variables and these objects can be snapshotted or persisted to a durable store automatically?</source>
          <target state="new">What if instead, objects just kept state in local variables and these objects can be snapshotted or persisted to a durable store automatically?</target>
        </trans-unit>
        <trans-unit id="69d4d484-4c06-4bb9-b6d3-9adf4f70492b" xml:space="preserve">
          <source>Furthermore, rich collections such as lists, sorted sets, queues, and any other custom type for that matter are simply modelled as member variables and methods.</source>
          <target state="new">Furthermore, rich collections such as lists, sorted sets, queues, and any other custom type for that matter are simply modelled as member variables and methods.</target>
        </trans-unit>
        <trans-unit id="33fc84a3-8c0f-4f88-8fd0-396e55d93779" xml:space="preserve">
          <source><bpt id="c66461d6-c75f-4135-a85d-73bbb60e77b3">&lt;linkText&gt;</bpt><ept id="c66461d6-c75f-4135-a85d-73bbb60e77b3">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="c66461d6-c75f-4135-a85d-73bbb60e77b3">&lt;linkText&gt;</bpt><ept id="c66461d6-c75f-4135-a85d-73bbb60e77b3">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="b1098b52-76a7-4d59-8a5e-bb629cab0156" xml:space="preserve">
          <source>Take leader boards as an example—a Leaderboard object needs to maintain a sorted list of players and their scores so that we can query it. For example for the "Top 100 Players" or to find a player’s position in the leader board relative to +- N players above and below him/her. A typical solution with traditional tools would require ‘GET’ing the Leaderboard object (collection which supports inserting a new tuple&lt;Player, Points&gt; named Score), sorting it, and finally ‘PUT’ing it back to the cache. We would probably LOCK (GETLOCK, PUTLOCK) the Leaderboard object for consistency.
Let’s have an actor-based solution where state and behaviour are together. There are two options:</source>
          <target state="new">Take leader boards as an example—a Leaderboard object needs to maintain a sorted list of players and their scores so that we can query it. For example for the "Top 100 Players" or to find a player’s position in the leader board relative to +- N players above and below him/her. A typical solution with traditional tools would require ‘GET’ing the Leaderboard object (collection which supports inserting a new tuple&lt;Player, Points&gt; named Score), sorting it, and finally ‘PUT’ing it back to the cache. We would probably LOCK (GETLOCK, PUTLOCK) the Leaderboard object for consistency.
Let’s have an actor-based solution where state and behaviour are together. There are two options:</target>
        </trans-unit>
        <trans-unit id="be8033bf-2d78-4cc1-8044-633cfd3d0898" xml:space="preserve">
          <source>Implement the Leaderboard Collection as part of the actor,</source>
          <target state="new">Implement the Leaderboard Collection as part of the actor,</target>
        </trans-unit>
        <trans-unit id="60955533-c889-4ddf-8104-0bad9f653863" xml:space="preserve">
          <source>Or use the actor as an interface to the collection that we can keep in a member variable.</source>
          <target state="new">Or use the actor as an interface to the collection that we can keep in a member variable.</target>
        </trans-unit>
        <trans-unit id="353ccaf4-ecc4-4e93-98ff-4748b4d022cd" xml:space="preserve">
          <source>First let’s have a look at what the a interface may look like:</source>
          <target state="new">First let’s have a look at what the a interface may look like:</target>
        </trans-unit>
        <trans-unit id="76eb7221-2c23-4c34-bb96-28a701887b97" xml:space="preserve">
          <source>Next, we implement this interface and use the latter option and encapsulate this collection's behaviour in the actor:</source>
          <target state="new">Next, we implement this interface and use the latter option and encapsulate this collection's behaviour in the actor:</target>
        </trans-unit>
        <trans-unit id="8238feaa-cca0-4bee-a1ba-26f89986b42c" xml:space="preserve">
          <source>The state member of the class provides the state of the actor, in the sample code above it also provides methods to read/write data.</source>
          <target state="new">The state member of the class provides the state of the actor, in the sample code above it also provides methods to read/write data.</target>
        </trans-unit>
        <trans-unit id="7ab6db8c-084f-416b-944c-50407180aafb" xml:space="preserve">
          <source>No data shipping, no locks, just manipulating remote objects in a distributed runtime, servicing multiple clients as if they were single objects in a single application servicing only one client.</source>
          <target state="new">No data shipping, no locks, just manipulating remote objects in a distributed runtime, servicing multiple clients as if they were single objects in a single application servicing only one client.</target>
        </trans-unit>
        <trans-unit id="092531ed-f9a6-4166-bd9d-32eecc621589" xml:space="preserve">
          <source>Here is the sample client:</source>
          <target state="new">Here is the sample client:</target>
        </trans-unit>
        <trans-unit id="36d4c05f-520c-4a0a-8dd4-8397039ea2d4" xml:space="preserve">
          <source>The output looks like this:</source>
          <target state="new">The output looks like this:</target>
        </trans-unit>
        <trans-unit id="d4283807-c7c5-45f0-8073-f49e944923f4" xml:space="preserve">
          <source>It may feel like the example above could create a bottleneck in the Leaderboard instance.</source>
          <target state="new">It may feel like the example above could create a bottleneck in the Leaderboard instance.</target>
        </trans-unit>
        <trans-unit id="3660a51e-0389-4f81-bb9a-5b9588e53a68" xml:space="preserve">
          <source>What if, for instance, we are planning to support hundreds and thousands of players?</source>
          <target state="new">What if, for instance, we are planning to support hundreds and thousands of players?</target>
        </trans-unit>
        <trans-unit id="e5e357ae-60d9-4697-bd90-dbc930abd067" xml:space="preserve">
          <source>One way to deal with that might be to introduce stateless aggregators that would act like a buffer—hold the partial scores (say subtotals) and then periodically send them to the Leaderboard actor, which can maintain the final Leaderboard.</source>
          <target state="new">One way to deal with that might be to introduce stateless aggregators that would act like a buffer—hold the partial scores (say subtotals) and then periodically send them to the Leaderboard actor, which can maintain the final Leaderboard.</target>
        </trans-unit>
        <trans-unit id="8f96f10f-0df0-4975-9c81-d606576fff6f" xml:space="preserve">
          <source>We will discuss this “aggregation” technique in more detail later.</source>
          <target state="new">We will discuss this “aggregation” technique in more detail later.</target>
        </trans-unit>
        <trans-unit id="e8175d30-a967-4443-8a82-73042675654d" xml:space="preserve">
          <source>Also, we do not have to consider mutexes, semaphores, or other concurrency constructs traditionally required by correctly behaving concurrent programs.</source>
          <target state="new">Also, we do not have to consider mutexes, semaphores, or other concurrency constructs traditionally required by correctly behaving concurrent programs.</target>
        </trans-unit>
        <trans-unit id="cc905ac0-181e-4420-9fc0-472d872d39c4" xml:space="preserve">
          <source>Below is another cache example that demonstrates the rich semantics one can implement with actors.</source>
          <target state="new">Below is another cache example that demonstrates the rich semantics one can implement with actors.</target>
        </trans-unit>
        <trans-unit id="63d331a2-3b70-48d6-8e46-3613ac7750a4" xml:space="preserve">
          <source>This time we implement the logic of the Priority Queue (lower the number, higher the priority) as part of the Actor implementation.</source>
          <target state="new">This time we implement the logic of the Priority Queue (lower the number, higher the priority) as part of the Actor implementation.</target>
        </trans-unit>
        <trans-unit id="e8ae5b22-4238-451c-a45a-c7e4a2eda173" xml:space="preserve">
          <source>The interface for IJobQueue looks like below:</source>
          <target state="new">The interface for IJobQueue looks like below:</target>
        </trans-unit>
        <trans-unit id="114d6173-3670-4acc-b7b4-7d26d02ab57e" xml:space="preserve">
          <source>We also need to define the Job item:</source>
          <target state="new">We also need to define the Job item:</target>
        </trans-unit>
        <trans-unit id="b7d35521-8dc7-4620-90b9-16d47a68bbfc" xml:space="preserve">
          <source>Finally, we implement the IJobQueue interface in the grain.</source>
          <target state="new">Finally, we implement the IJobQueue interface in the grain.</target>
        </trans-unit>
        <trans-unit id="091ab7f6-b535-417b-ba29-82095bfca187" xml:space="preserve">
          <source>Note that we omitted the implementation details of the priority queue here for clarity.</source>
          <target state="new">Note that we omitted the implementation details of the priority queue here for clarity.</target>
        </trans-unit>
        <trans-unit id="4f730fc0-5fda-4b1e-a998-f17a88541584" xml:space="preserve">
          <source>A sample implementation can be found in the accompanying samples.</source>
          <target state="new">A sample implementation can be found in the accompanying samples.</target>
        </trans-unit>
        <trans-unit id="764b10bd-b4ee-424c-aa5f-6bfa3955dbb1" xml:space="preserve">
          <source>The output looks like this:</source>
          <target state="new">The output looks like this:</target>
        </trans-unit>
        <trans-unit id="2b41ba19-cfd9-4ed1-9f07-3f78324f3407" xml:space="preserve">
          <source>In the samples above, Leaderboard and JobQueue, we used two different techniques:</source>
          <target state="new">In the samples above, Leaderboard and JobQueue, we used two different techniques:</target>
        </trans-unit>
        <trans-unit id="1d6f152c-ac10-4258-984d-a3daef587a84" xml:space="preserve">
          <source>In the Leaderboard sample we encapsulated a Leaderboard object as a private member variable in the actor and merely provided an interface to this object – both to its state and functionality.</source>
          <target state="new">In the Leaderboard sample we encapsulated a Leaderboard object as a private member variable in the actor and merely provided an interface to this object – both to its state and functionality.</target>
        </trans-unit>
        <trans-unit id="dd809645-0646-45cb-b924-ae36c8525b65" xml:space="preserve">
          <source>On the other hand, in the JobQueue sample we implemented the actor as a priority queue itself rather than referencing another object defined elsewhere.</source>
          <target state="new">On the other hand, in the JobQueue sample we implemented the actor as a priority queue itself rather than referencing another object defined elsewhere.</target>
        </trans-unit>
        <trans-unit id="f2d2284f-7c41-4a3a-9742-072d6afb18ce" xml:space="preserve">
          <source>Actors provide flexibility for the developer to define rich object structures as part the actors or reference object graphs outside of the actors.</source>
          <target state="new">Actors provide flexibility for the developer to define rich object structures as part the actors or reference object graphs outside of the actors.</target>
        </trans-unit>
        <trans-unit id="c1144c16-ae2b-490b-9e2e-24c91f7049c0" xml:space="preserve">
          <source>In caching terms actors can write-behind or write-through, or we can use different techniques at a member variable granularity.</source>
          <target state="new">In caching terms actors can write-behind or write-through, or we can use different techniques at a member variable granularity.</target>
        </trans-unit>
        <trans-unit id="515a6403-f1f8-4d50-a3d6-f56c31df5820" xml:space="preserve">
          <source>In other words, we have full control over what to persist and when to persist.</source>
          <target state="new">In other words, we have full control over what to persist and when to persist.</target>
        </trans-unit>
        <trans-unit id="8e2baf8e-3ff9-46c2-afab-6791e7b3eed2" xml:space="preserve">
          <source>We don’t have to persist transient state or state that we can build from saved state.</source>
          <target state="new">We don’t have to persist transient state or state that we can build from saved state.</target>
        </trans-unit>
        <trans-unit id="d985de32-381a-496b-9224-b3bce4cf6099" xml:space="preserve">
          <source>And how about populating these actors caches then?</source>
          <target state="new">And how about populating these actors caches then?</target>
        </trans-unit>
        <trans-unit id="b4e00dde-7140-4e3b-a2b7-c66bcd4bdfaa" xml:space="preserve">
          <source>There are number of ways to achieve this.</source>
          <target state="new">There are number of ways to achieve this.</target>
        </trans-unit>
        <trans-unit id="11a8f023-6a33-4c7c-ab7b-f6521a236c05" xml:space="preserve">
          <source>Actors provide virtual methods called OnActivateAsync() and OnDectivateAsync() to let us know when an instance of the actor is activated and deactivated.</source>
          <target state="new">Actors provide virtual methods called OnActivateAsync() and OnDectivateAsync() to let us know when an instance of the actor is activated and deactivated.</target>
        </trans-unit>
        <trans-unit id="19008d7a-0b6a-44d2-bccc-ed4f03d15741" xml:space="preserve">
          <source>Note that the actor is activated on demand when a first request is sent to it.</source>
          <target state="new">Note that the actor is activated on demand when a first request is sent to it.</target>
        </trans-unit>
        <trans-unit id="ea4bb809-fb02-43a3-8149-6eec13e6d592" xml:space="preserve">
          <source>We can use OnActivateAsync() to populate state on-demand as in read-through, perhaps from an external stable store.</source>
          <target state="new">We can use OnActivateAsync() to populate state on-demand as in read-through, perhaps from an external stable store.</target>
        </trans-unit>
        <trans-unit id="425ed657-b7c9-4f11-ae72-60c5f18fe1b3" xml:space="preserve">
          <source>Or we can populate state on a timer, say an Exchange Rate actor that provides the conversion function based on the latest currency rates.</source>
          <target state="new">Or we can populate state on a timer, say an Exchange Rate actor that provides the conversion function based on the latest currency rates.</target>
        </trans-unit>
        <trans-unit id="6d0a1f85-07cb-4ef9-9d42-8cbac7915aa5" xml:space="preserve">
          <source>This actor can populate its state from an external service periodically, say every 5 seconds, and use the state for the conversion function.</source>
          <target state="new">This actor can populate its state from an external service periodically, say every 5 seconds, and use the state for the conversion function.</target>
        </trans-unit>
        <trans-unit id="58fe1f44-972a-4923-8fea-f6da2a198f9d" xml:space="preserve">
          <source>See the example below:</source>
          <target state="new">See the example below:</target>
        </trans-unit>
        <trans-unit id="e8a0be81-2385-43b4-af67-ab7abd6c081b" xml:space="preserve">
          <source>Essentially Smart Cache provides:</source>
          <target state="new">Essentially Smart Cache provides:</target>
        </trans-unit>
        <trans-unit id="75d43aa5-73f8-435a-806b-9e79dfc7df52" xml:space="preserve">
          <source>High throughput/low latency by service requests from memory.</source>
          <target state="new">High throughput/low latency by service requests from memory.</target>
        </trans-unit>
        <trans-unit id="5de6d2e2-edc3-4579-ad02-fdb5b000ae68" xml:space="preserve">
          <source>Single-instance routing and single-threaded serialization of requests to an item with no contention on persistent store.</source>
          <target state="new">Single-instance routing and single-threaded serialization of requests to an item with no contention on persistent store.</target>
        </trans-unit>
        <trans-unit id="1f462237-109c-4c9a-a62b-b20e3660a970" xml:space="preserve">
          <source>Semantic operations, for example, Enqueue(Job item).</source>
          <target state="new">Semantic operations, for example, Enqueue(Job item).</target>
        </trans-unit>
        <trans-unit id="357949d1-7db9-4772-a3d3-61362d9dc2f5" xml:space="preserve">
          <source>Easy-to-implement write-through or write-behind.</source>
          <target state="new">Easy-to-implement write-through or write-behind.</target>
        </trans-unit>
        <trans-unit id="2854818e-eff7-48aa-8adb-63f9e6106738" xml:space="preserve">
          <source>Automatic eviction of LRU (Least Recently Used) items (resource management).</source>
          <target state="new">Automatic eviction of LRU (Least Recently Used) items (resource management).</target>
        </trans-unit>
        <trans-unit id="5288302a-14e1-448b-8b7e-3753dac65508" xml:space="preserve">
          <source>Automatic elasticity and reliability.</source>
          <target state="new">Automatic elasticity and reliability.</target>
        </trans-unit>
        <trans-unit id="67506f24-4ba3-49e1-9274-ec14a535b575" xml:space="preserve">
          <source><bpt id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;/linkText&gt;</ept><bpt id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;title&gt;</bpt><ept id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;/linkText&gt;</ept><bpt id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;title&gt;</bpt><ept id="ee506b83-9ddd-4b33-a384-571d4c80b0f6">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="1eaf1dc0-f711-4118-ab03-ffbfa17551d1" xml:space="preserve">
          <source><bpt id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;linkText&gt;</bpt>Pattern: Resource Governance<ept id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;/linkText&gt;</ept><bpt id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;title&gt;</bpt><ept id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;linkText&gt;</bpt>Pattern: Resource Governance<ept id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;/linkText&gt;</ept><bpt id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;title&gt;</bpt><ept id="2bf9ac7c-6e38-4992-a126-7b1aa512ce92">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="74308480-5225-455d-96bd-575af17732b9" xml:space="preserve">
          <source><bpt id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;/linkText&gt;</ept><bpt id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;title&gt;</bpt><ept id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;/linkText&gt;</ept><bpt id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;title&gt;</bpt><ept id="edc31692-7549-4909-831b-ea0c9557af0e">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="226f02dd-16be-4eb3-91a6-1be9bd0b86a9" xml:space="preserve">
          <source><bpt id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;/linkText&gt;</ept><bpt id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;title&gt;</bpt><ept id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;/linkText&gt;</ept><bpt id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;title&gt;</bpt><ept id="b8d57d44-3627-48e5-987c-24df75cfd430">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="20ba866a-8b9b-4d55-b612-183a39144abf" xml:space="preserve">
          <source><bpt id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;linkText&gt;</bpt>Pattern: Distributed Computation<ept id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;/linkText&gt;</ept><bpt id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;title&gt;</bpt><ept id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;linkText&gt;</bpt>Pattern: Distributed Computation<ept id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;/linkText&gt;</ept><bpt id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;title&gt;</bpt><ept id="00ac647c-f49c-44ee-b82b-1b1fca2f7d65">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="a641627c-c6a9-4ed7-894e-164570a61f5c" xml:space="preserve">
          <source><bpt id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;/linkText&gt;</ept><bpt id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;title&gt;</bpt><ept id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;/linkText&gt;</ept><bpt id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;title&gt;</bpt><ept id="62491909-ce6e-4b38-bbe1-de127fcd3cd4">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="21452605-ddf4-4df1-b8fe-ba0dfecf1d58" xml:space="preserve">
          <source><bpt id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;/linkText&gt;</ept><bpt id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;title&gt;</bpt><ept id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;/linkText&gt;</ept><bpt id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;title&gt;</bpt><ept id="3450c096-d52a-4bb7-9fb7-1dcd42d18079">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="78b688ed-a23a-4ccd-85c3-3140e455dfd8" xml:space="preserve">
          <source>./media/service-fabric-reliable-actors-pattern-smart-cache/smartcache-arch.png</source>
          <target state="new">./media/service-fabric-reliable-actors-pattern-smart-cache/smartcache-arch.png</target>
        </trans-unit>
      </group>
      <group id="70a9ac8f-e463-4f56-a2ec-81a1f4c2feb7" />
    </body>
  </file>
</xliff>