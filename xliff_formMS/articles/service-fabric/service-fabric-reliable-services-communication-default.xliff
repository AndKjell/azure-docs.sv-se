<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="2ef8ec87-ab96-4e99-ae08-773eb836ace9" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="2ef8ec87-ab96-4e99-ae08-773eb836ace9" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="19d2b06c-dc6c-4dc1-b9be-1dbaf0bbaa00">
        <trans-unit id="dbd28d08-fe40-4487-b02b-1f2d5c89ccc9" xml:space="preserve">
          <source>Default communication stack provided by Service Fabric</source>
          <target state="new">Default communication stack provided by Service Fabric</target>
        </trans-unit>
        <trans-unit id="361ea508-4657-4130-99a2-18ca5a22eac5" xml:space="preserve">
          <source>This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.</source>
          <target state="new">This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.</target>
        </trans-unit>
        <trans-unit id="1c24ec90-43dc-4b05-95b2-b7c9fc1564ce" xml:space="preserve">
          <source>For service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.</source>
          <target state="new">For service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.</target>
        </trans-unit>
        <trans-unit id="7b73baa5-221f-48b1-97b3-d2d35ed1ce01" xml:space="preserve">
          <source>Please update to the latest nuget packges to get the features mentioned below.</source>
          <target state="new">Please update to the latest nuget packges to get the features mentioned below.</target>
        </trans-unit>
        <trans-unit id="475760da-895f-49da-8aba-5fefef0f3cc5" xml:space="preserve">
          <source>The default communication listener for the service is implemented in the <bpt id="f62f4829-6da6-453a-92b1-6df82dc927b0">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="f62f4829-6da6-453a-92b1-6df82dc927b0">&lt;/code&gt;</ept> class</source>
          <target state="new">The default communication listener for the service is implemented in the <bpt id="f62f4829-6da6-453a-92b1-6df82dc927b0">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="f62f4829-6da6-453a-92b1-6df82dc927b0">&lt;/code&gt;</ept> class</target>
        </trans-unit>
        <trans-unit id="ef4db7fc-3c82-43f5-9d95-d69309ba4233" xml:space="preserve">
          <source>The methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the <bpt id="27241b8c-b2cf-4068-9e56-6f0d23dfe7b4">&lt;code&gt;</bpt>IService<ept id="27241b8c-b2cf-4068-9e56-6f0d23dfe7b4">&lt;/code&gt;</ept> interface.</source>
          <target state="new">The methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the <bpt id="27241b8c-b2cf-4068-9e56-6f0d23dfe7b4">&lt;code&gt;</bpt>IService<ept id="27241b8c-b2cf-4068-9e56-6f0d23dfe7b4">&lt;/code&gt;</ept> interface.</target>
        </trans-unit>
        <trans-unit id="8f2b0b81-06ab-4600-ab3b-717ea85f31de" xml:space="preserve">
          <source>The service can then just instantiate the <bpt id="7450839d-4bfd-434a-9dc2-30d957ae74f1">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="7450839d-4bfd-434a-9dc2-30d957ae74f1">&lt;/code&gt;</ept> object and return it in the [<bpt id="ec85f8f2-ed03-4258-92a2-9e913dcf74e1">&lt;code&gt;</bpt>CreateCommunicationListener<ept id="ec85f8f2-ed03-4258-92a2-9e913dcf74e1">&lt;/code&gt;</ept> method](service-fabric-reliable-services-communication.md).</source>
          <target state="new">The service can then just instantiate the <bpt id="7450839d-4bfd-434a-9dc2-30d957ae74f1">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="7450839d-4bfd-434a-9dc2-30d957ae74f1">&lt;/code&gt;</ept> object and return it in the [<bpt id="ec85f8f2-ed03-4258-92a2-9e913dcf74e1">&lt;code&gt;</bpt>CreateCommunicationListener<ept id="ec85f8f2-ed03-4258-92a2-9e913dcf74e1">&lt;/code&gt;</ept> method](service-fabric-reliable-services-communication.md).</target>
        </trans-unit>
        <trans-unit id="ac517a27-ea1d-459a-a124-9cc148d2101e" xml:space="preserve">
          <source>For example, the HelloWorld service code to setup this communication stack may be defined as follows.</source>
          <target state="new">For example, the HelloWorld service code to setup this communication stack may be defined as follows.</target>
        </trans-unit>
        <trans-unit id="02fb2822-aa16-4ee2-bbba-d464fbff0eb1" xml:space="preserve">
          <source>The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net <bpt id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;linkText&gt;</bpt>DataContractSerializer<ept id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;/linkText&gt;</ept><bpt id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;title&gt;</bpt><ept id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;/title&gt;</ept>.</source>
          <target state="new">The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net <bpt id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;linkText&gt;</bpt>DataContractSerializer<ept id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;/linkText&gt;</ept><bpt id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;title&gt;</bpt><ept id="fc2fa220-206c-4ac9-a691-bef3b7749aa5">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="4b340871-c727-4435-93b1-d511cf999797" xml:space="preserve">
          <source>For clients to communicate to services using the <bpt id="38635c7f-fc07-47e9-9a8a-d94d6e6d7d6b">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="38635c7f-fc07-47e9-9a8a-d94d6e6d7d6b">&lt;/code&gt;</ept>, the framework provides a <bpt id="b93c6f36-378c-450e-9608-eb4ffa5c4637">&lt;code&gt;</bpt>ServiceProxy<ept id="b93c6f36-378c-450e-9608-eb4ffa5c4637">&lt;/code&gt;</ept> class.</source>
          <target state="new">For clients to communicate to services using the <bpt id="38635c7f-fc07-47e9-9a8a-d94d6e6d7d6b">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="38635c7f-fc07-47e9-9a8a-d94d6e6d7d6b">&lt;/code&gt;</ept>, the framework provides a <bpt id="b93c6f36-378c-450e-9608-eb4ffa5c4637">&lt;code&gt;</bpt>ServiceProxy<ept id="b93c6f36-378c-450e-9608-eb4ffa5c4637">&lt;/code&gt;</ept> class.</target>
        </trans-unit>
        <trans-unit id="8d50c89f-a98a-4994-887e-7c6199da8785" xml:space="preserve">
          <source>Clients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.</source>
          <target state="new">Clients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.</target>
        </trans-unit>
        <trans-unit id="3334db98-0915-4352-8ba4-b80f2a75563f" xml:space="preserve">
          <source>The communication framework takes care of propagating exceptions thrown at the service to the client.</source>
          <target state="new">The communication framework takes care of propagating exceptions thrown at the service to the client.</target>
        </trans-unit>
        <trans-unit id="31138d8d-23f7-45be-aef3-5156f7f0bcfa" xml:space="preserve">
          <source>So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.</source>
          <target state="new">So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>