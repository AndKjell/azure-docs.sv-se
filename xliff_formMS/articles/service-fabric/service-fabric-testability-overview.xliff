<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="aa14859b-2c02-4f21-ac98-f9a9d584b143" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="aa14859b-2c02-4f21-ac98-f9a9d584b143" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="416c3d09-b3ce-488c-bdff-eec899525466">
        <trans-unit id="c11635c7-4c69-4d73-831a-c89755b64063" xml:space="preserve">
          <source>Testability Overview</source>
          <target state="new">Testability Overview</target>
        </trans-unit>
        <trans-unit id="c306bd9a-bafb-4349-ae1d-e0a84dacbb6c" xml:space="preserve">
          <source>This article describes the testability feature in Microsoft Azure Service Fabric.</source>
          <target state="new">This article describes the testability feature in Microsoft Azure Service Fabric.</target>
        </trans-unit>
        <trans-unit id="df60391a-d1bd-4de6-b5cd-4e37e5ab9acb" xml:space="preserve">
          <source>Testability is a suite of tools specifically designed for testing services built on Microsoft Azure Service Fabric.</source>
          <target state="new">Testability is a suite of tools specifically designed for testing services built on Microsoft Azure Service Fabric.</target>
        </trans-unit>
        <trans-unit id="0bdbbe33-41ac-4ad3-88b0-c2c31fa12178" xml:space="preserve">
          <source>The tools allow the developer to easily induce meaningful faults and run test scenarios to exercise and validate the numerous different states and transitions a service will experience throughout its lifetime, all in a controlled and safe manner.</source>
          <target state="new">The tools allow the developer to easily induce meaningful faults and run test scenarios to exercise and validate the numerous different states and transitions a service will experience throughout its lifetime, all in a controlled and safe manner.</target>
        </trans-unit>
        <trans-unit id="71dda004-c5e5-40dd-b46f-c78dd0422f81" xml:space="preserve">
          <source>Tesability provides Actions and Scenarios that allow the above to happen.</source>
          <target state="new">Tesability provides Actions and Scenarios that allow the above to happen.</target>
        </trans-unit>
        <trans-unit id="de93d610-926d-4af5-b175-dafcababfc21" xml:space="preserve">
          <source>Actions are the individual faults targeting a service for testing it.</source>
          <target state="new">Actions are the individual faults targeting a service for testing it.</target>
        </trans-unit>
        <trans-unit id="a44d33f2-0f64-41f5-a671-d1d71736ce2f" xml:space="preserve">
          <source>A service developer can use these as building blocks to write complicated scenarios.</source>
          <target state="new">A service developer can use these as building blocks to write complicated scenarios.</target>
        </trans-unit>
        <trans-unit id="c9116049-0a43-40ef-88b8-19e48cc9082c" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="4f28f314-a8eb-42b1-a1f8-2a2a782cd212" xml:space="preserve">
          <source>Restart a node to simulate a any number of situations where a machine or VM is rebooted.</source>
          <target state="new">Restart a node to simulate a any number of situations where a machine or VM is rebooted.</target>
        </trans-unit>
        <trans-unit id="5e8b2549-a546-4f85-b7bc-7ceb9eae5d69" xml:space="preserve">
          <source>Move a replica of your stateful service to simulate load balancing, failover, or application upgrade.</source>
          <target state="new">Move a replica of your stateful service to simulate load balancing, failover, or application upgrade.</target>
        </trans-unit>
        <trans-unit id="208ae811-1b3b-4a5a-9bf0-16b3bc241721" xml:space="preserve">
          <source>Invoke quorum loss on a stateful service to create a situation where write operations can't proceed because there aren't enough "back-up" or "secondary" replicas to accept new data.</source>
          <target state="new">Invoke quorum loss on a stateful service to create a situation where write operations can't proceed because there aren't enough "back-up" or "secondary" replicas to accept new data.</target>
        </trans-unit>
        <trans-unit id="36ae2229-c4ba-4d7b-a10b-a7553807cd1e" xml:space="preserve">
          <source>Invoke data loss on a stateful service to create a situation where all in-memory state is completely wiped out.</source>
          <target state="new">Invoke data loss on a stateful service to create a situation where all in-memory state is completely wiped out.</target>
        </trans-unit>
        <trans-unit id="a37c35d1-1da8-4d20-99a5-127ca9510a95" xml:space="preserve">
          <source>Scenarios are complete tests that are composed of one or more actions, and since actions are simply PowerShell commands and C# functions, they can take any shape or form: long-running services, PowerShell commands, command line applications, and so forth.</source>
          <target state="new">Scenarios are complete tests that are composed of one or more actions, and since actions are simply PowerShell commands and C# functions, they can take any shape or form: long-running services, PowerShell commands, command line applications, and so forth.</target>
        </trans-unit>
        <trans-unit id="b7547c0f-c57e-48cd-8f95-3e610771c890" xml:space="preserve">
          <source>In Testability we provide two scenarios out of the box:</source>
          <target state="new">In Testability we provide two scenarios out of the box:</target>
        </trans-unit>
        <trans-unit id="b0369520-4be0-41a3-bb06-3217a6b1bab7" xml:space="preserve">
          <source>Chaos Test</source>
          <target state="new">Chaos Test</target>
        </trans-unit>
        <trans-unit id="14cde8bc-1040-4012-9992-f104805a4d93" xml:space="preserve">
          <source>Failover Test</source>
          <target state="new">Failover Test</target>
        </trans-unit>
        <trans-unit id="b80f28af-8f09-4cc9-a6ef-0e65cef559fb" xml:space="preserve">
          <source>Testability exposes both PowerShell and C# APIs.</source>
          <target state="new">Testability exposes both PowerShell and C# APIs.</target>
        </trans-unit>
        <trans-unit id="1c020acf-748e-491b-9c56-29a3e8640873" xml:space="preserve">
          <source>This allows the service developer to have greater agility with scripting of PowerShell and greater control with C# APIs as and when needed.</source>
          <target state="new">This allows the service developer to have greater agility with scripting of PowerShell and greater control with C# APIs as and when needed.</target>
        </trans-unit>
        <trans-unit id="9d0792a2-5f4c-4b17-b416-e568bef1d50e" xml:space="preserve">
          <source>Service Fabric makes the job of writing and managing distributed scalable applications significantly easier.</source>
          <target state="new">Service Fabric makes the job of writing and managing distributed scalable applications significantly easier.</target>
        </trans-unit>
        <trans-unit id="671af110-b24a-4cd3-8bcd-497a407ef72b" xml:space="preserve">
          <source>Testability component in Service Fabric is aimed at making testing a distributed application similarly easier.</source>
          <target state="new">Testability component in Service Fabric is aimed at making testing a distributed application similarly easier.</target>
        </trans-unit>
        <trans-unit id="df373ec5-61d7-45fa-8190-d3a8538204a8" xml:space="preserve">
          <source>There are three main issues that need to be solved while testing:</source>
          <target state="new">There are three main issues that need to be solved while testing:</target>
        </trans-unit>
        <trans-unit id="069683ac-3ef7-4787-bd0b-1d0db6aa423d" xml:space="preserve">
          <source>Simulating/Generating failures that might occur in the real world scenarios: One of the important aspects of Service Fabric is that it allows distributed applications to recover from various failures.</source>
          <target state="new">Simulating/Generating failures that might occur in the real world scenarios: One of the important aspects of Service Fabric is that it allows distributed applications to recover from various failures.</target>
        </trans-unit>
        <trans-unit id="9079d208-8b53-4523-bfe9-7f2937c73653" xml:space="preserve">
          <source>However, in order to test that the application is able to recover from these failures we need a mechanism to simulate/generate these real world failures in a controlled test environment.</source>
          <target state="new">However, in order to test that the application is able to recover from these failures we need a mechanism to simulate/generate these real world failures in a controlled test environment.</target>
        </trans-unit>
        <trans-unit id="1c47982e-5b85-43af-86ba-8e68a187825b" xml:space="preserve">
          <source>The ability to generate the correlated failures: While the basic failures in the system like network failure, machine failures are easy to produce individually.</source>
          <target state="new">The ability to generate the correlated failures: While the basic failures in the system like network failure, machine failures are easy to produce individually.</target>
        </trans-unit>
        <trans-unit id="f85a093a-3be8-41a7-b3bf-745027c42491" xml:space="preserve">
          <source>Generating the significant number of scenarios that can happen in the real world as a result of the interactions of these individual failures is non-trivial.</source>
          <target state="new">Generating the significant number of scenarios that can happen in the real world as a result of the interactions of these individual failures is non-trivial.</target>
        </trans-unit>
        <trans-unit id="bc7dd5a2-1b28-40a3-9898-42a231f5dedc" xml:space="preserve">
          <source>Unified experience across various levels of development and deployment: There are many fault injection systems that provide the ability to do various types of failures.</source>
          <target state="new">Unified experience across various levels of development and deployment: There are many fault injection systems that provide the ability to do various types of failures.</target>
        </trans-unit>
        <trans-unit id="ccf3e73a-8658-439d-8100-581e57357d1d" xml:space="preserve">
          <source>However, the experience in all of these is jagged when moving from one box developer scenarios to running the same tests in large tests environments to using them for test in production.</source>
          <target state="new">However, the experience in all of these is jagged when moving from one box developer scenarios to running the same tests in large tests environments to using them for test in production.</target>
        </trans-unit>
        <trans-unit id="8117ce86-fcfa-4361-b6a6-3e994169b2e3" xml:space="preserve">
          <source>While there are many mechanisms to solve the above mentioned problems, a system that does the same with required guarantees - all the way from one box developer environment to test in production clusters -  is missing.</source>
          <target state="new">While there are many mechanisms to solve the above mentioned problems, a system that does the same with required guarantees - all the way from one box developer environment to test in production clusters -  is missing.</target>
        </trans-unit>
        <trans-unit id="c897a167-8886-4536-a6fa-1ff284963cef" xml:space="preserve">
          <source>The Testability component allows the application developers to concentrate on testing test their business logic.</source>
          <target state="new">The Testability component allows the application developers to concentrate on testing test their business logic.</target>
        </trans-unit>
        <trans-unit id="85faa431-d3d0-4a9a-ba96-c3e37c2ff6c5" xml:space="preserve">
          <source>The testability feature provides all the capabilities needed to test the interaction of the service with the underlying distributed system.</source>
          <target state="new">The testability feature provides all the capabilities needed to test the interaction of the service with the underlying distributed system.</target>
        </trans-unit>
        <trans-unit id="1cfb4c43-1800-445c-be7b-f219325e8a9a" xml:space="preserve">
          <source>In order to test the robustness of a distributed system against failures, we need a mechanism to generate failures.</source>
          <target state="new">In order to test the robustness of a distributed system against failures, we need a mechanism to generate failures.</target>
        </trans-unit>
        <trans-unit id="750153e5-d123-4f2a-8451-3afe4c3b02c2" xml:space="preserve">
          <source>While in theory generating a failure like a node down seems easy, it starts hitting the same set of consistency problems that Service Fabric is trying to solve.</source>
          <target state="new">While in theory generating a failure like a node down seems easy, it starts hitting the same set of consistency problems that Service Fabric is trying to solve.</target>
        </trans-unit>
        <trans-unit id="c8d888ca-95cd-4228-92e6-f41789158985" xml:space="preserve">
          <source>As an example if we want to shutdown a node, the required workflow is the following:</source>
          <target state="new">As an example if we want to shutdown a node, the required workflow is the following:</target>
        </trans-unit>
        <trans-unit id="a55d142f-2820-44ad-9d78-5479f4ef58cb" xml:space="preserve">
          <source>From the client issue a shutdown node request.</source>
          <target state="new">From the client issue a shutdown node request.</target>
        </trans-unit>
        <trans-unit id="69ca4d37-27e0-4e96-8038-06215a487ac9" xml:space="preserve">
          <source>Send the request to the right node.</source>
          <target state="new">Send the request to the right node.</target>
        </trans-unit>
        <trans-unit id="55367513-991f-4bfd-a01c-8c09ce37c6be" xml:space="preserve">
          <source>If the node is not found it should fail.</source>
          <target state="new">If the node is not found it should fail.</target>
        </trans-unit>
        <trans-unit id="4d82ac6d-81be-411e-8083-bb05197fa8d8" xml:space="preserve">
          <source>If the node is found it should return only if the node is shutdown.</source>
          <target state="new">If the node is found it should return only if the node is shutdown.</target>
        </trans-unit>
        <trans-unit id="9aeb103d-39f4-4bc7-94d1-a753a26ec1e7" xml:space="preserve">
          <source>From a test perspective, it needs to know that when this failure is induced the failure actually happens in order to verify the failure.</source>
          <target state="new">From a test perspective, it needs to know that when this failure is induced the failure actually happens in order to verify the failure.</target>
        </trans-unit>
        <trans-unit id="89a907c7-ac14-4380-bc17-15a1075a273d" xml:space="preserve">
          <source>The guarantee that windows fabric provides is that either the node will go down or is already down when the command reached the node.</source>
          <target state="new">The guarantee that windows fabric provides is that either the node will go down or is already down when the command reached the node.</target>
        </trans-unit>
        <trans-unit id="f30b44f5-e373-4d8e-864f-29eecaab8e67" xml:space="preserve">
          <source>In either case the test should be able to correctly reason about the state and succeed or fail in its validation correctly.</source>
          <target state="new">In either case the test should be able to correctly reason about the state and succeed or fail in its validation correctly.</target>
        </trans-unit>
        <trans-unit id="d9b809e4-581f-4360-ac6d-341f0f2576b6" xml:space="preserve">
          <source>A system implemented outside of Service Fabric to do the same set of failures could hit a plethora of network, hardware and software issues, which would prevent it from providing the above stated guarantees.</source>
          <target state="new">A system implemented outside of Service Fabric to do the same set of failures could hit a plethora of network, hardware and software issues, which would prevent it from providing the above stated guarantees.</target>
        </trans-unit>
        <trans-unit id="be8070e1-142a-4f90-8ed8-04676d83aa19" xml:space="preserve">
          <source>In the presence of the issues stated before, Service Fabric will reconfigure the cluster state to work around the issues and hence the Testability would still be able to give the right set of guarantees.</source>
          <target state="new">In the presence of the issues stated before, Service Fabric will reconfigure the cluster state to work around the issues and hence the Testability would still be able to give the right set of guarantees.</target>
        </trans-unit>
        <trans-unit id="127aad1b-40d7-4dc4-987a-cd84e880e367" xml:space="preserve">
          <source>While simulating a real world failure consistently is tough to start with, the ability to generate correlated failures is even tougher.</source>
          <target state="new">While simulating a real world failure consistently is tough to start with, the ability to generate correlated failures is even tougher.</target>
        </trans-unit>
        <trans-unit id="a5be52d7-b3e4-4116-a318-12df1dd33699" xml:space="preserve">
          <source>For example a data loss happens in a stateful persisted service when the following happens:</source>
          <target state="new">For example a data loss happens in a stateful persisted service when the following happens:</target>
        </trans-unit>
        <trans-unit id="f76fcae8-979c-4dee-9f47-55bdaaf70a80" xml:space="preserve">
          <source>Only a write quorum of the replicas are caught up on replication.</source>
          <target state="new">Only a write quorum of the replicas are caught up on replication.</target>
        </trans-unit>
        <trans-unit id="3f399e2b-e86a-4a98-8499-ac54106e8099" xml:space="preserve">
          <source>All the secondary replicas lag behind the primary.</source>
          <target state="new">All the secondary replicas lag behind the primary.</target>
        </trans-unit>
        <trans-unit id="185122c7-b828-4322-bac2-ad5ce66f91ad" xml:space="preserve">
          <source>The write quorum goes down because of the replicas going down (due to code package or node going down).</source>
          <target state="new">The write quorum goes down because of the replicas going down (due to code package or node going down).</target>
        </trans-unit>
        <trans-unit id="e1706562-dcc4-4c84-864d-0ba3817e8d29" xml:space="preserve">
          <source>The write quorum not being able to come back up because the data for the replicas is lost (due to disk corruption or machine reimage).</source>
          <target state="new">The write quorum not being able to come back up because the data for the replicas is lost (due to disk corruption or machine reimage).</target>
        </trans-unit>
        <trans-unit id="192c8921-7d62-4e52-8f3e-1e99544a05ef" xml:space="preserve">
          <source>These correlated failure do happen (even though not as frequently as individual failures) in the real world.</source>
          <target state="new">These correlated failure do happen (even though not as frequently as individual failures) in the real world.</target>
        </trans-unit>
        <trans-unit id="96d28296-cead-4a60-8d1c-c2665a7c69ea" xml:space="preserve">
          <source>The ability to test for these scenarios before they happen in production is critical.</source>
          <target state="new">The ability to test for these scenarios before they happen in production is critical.</target>
        </trans-unit>
        <trans-unit id="3744c549-2687-4a70-b04b-37433c4f1ed3" xml:space="preserve">
          <source>More so the ability to simulate these in production workload in controlled circumstances (middle of the day with all engineers on deck) is much preferred than it happening for the first time in production at 2:00 a. m.</source>
          <target state="new">More so the ability to simulate these in production workload in controlled circumstances (middle of the day with all engineers on deck) is much preferred than it happening for the first time in production at 2:00 a. m.</target>
        </trans-unit>
        <trans-unit id="e278f7b9-0757-44c2-bb54-ec2af3df62df" xml:space="preserve">
          <source>in the morning.</source>
          <target state="new">in the morning.</target>
        </trans-unit>
        <trans-unit id="4b69928a-0db1-4a93-855d-ab333b5685d8" xml:space="preserve">
          <source>The practice traditionally has been to create three different sets of experiences, one for development environment, one for tests and one for production.</source>
          <target state="new">The practice traditionally has been to create three different sets of experiences, one for development environment, one for tests and one for production.</target>
        </trans-unit>
        <trans-unit id="5b0b6853-ef33-4edd-ac8d-d1133bf2cbd9" xml:space="preserve">
          <source>The model was:</source>
          <target state="new">The model was:</target>
        </trans-unit>
        <trans-unit id="82b24ba4-7544-461c-8e74-075da3b5e17e" xml:space="preserve">
          <source>In the development environment produce state transitions that allow unit tests of individual methods.</source>
          <target state="new">In the development environment produce state transitions that allow unit tests of individual methods.</target>
        </trans-unit>
        <trans-unit id="cd0c47f4-f012-40fb-949b-4457048a1012" xml:space="preserve">
          <source>In the test environment produce failures to allow end to end tests exercising various failure scenarios.</source>
          <target state="new">In the test environment produce failures to allow end to end tests exercising various failure scenarios.</target>
        </trans-unit>
        <trans-unit id="52a4fe3b-d4a8-4f70-ac8d-3f3cd68040f3" xml:space="preserve">
          <source>Keep the production environment pristine disallowing any non-natural failures and to ensure there is extremely quick human response to failure.</source>
          <target state="new">Keep the production environment pristine disallowing any non-natural failures and to ensure there is extremely quick human response to failure.</target>
        </trans-unit>
        <trans-unit id="7fb129f1-501c-4d6d-be43-f4e34c3b8b65" xml:space="preserve">
          <source>In Service Fabric through the Testability module and service, we are proposing to turn this around as use the same methodology from developer environment to production.</source>
          <target state="new">In Service Fabric through the Testability module and service, we are proposing to turn this around as use the same methodology from developer environment to production.</target>
        </trans-unit>
        <trans-unit id="1354117c-de91-40c1-8fa3-19a47cf2a8d0" xml:space="preserve">
          <source>There are two ways to achieve this:</source>
          <target state="new">There are two ways to achieve this:</target>
        </trans-unit>
        <trans-unit id="551f2b1c-523b-4c10-98a0-bba1c9238e9a" xml:space="preserve">
          <source>In order to induce controlled failures use the Testability APIs from a one box environment all the way to production clusters.</source>
          <target state="new">In order to induce controlled failures use the Testability APIs from a one box environment all the way to production clusters.</target>
        </trans-unit>
        <trans-unit id="8d0b1149-e73f-44fc-b741-8a71b425f294" xml:space="preserve">
          <source>To give the cluster a fever which causes automatic induction of failures, use the Testability service to generate automatic failures.</source>
          <target state="new">To give the cluster a fever which causes automatic induction of failures, use the Testability service to generate automatic failures.</target>
        </trans-unit>
        <trans-unit id="6bddaf66-8b34-47f4-a2ed-0b8e62c879f0" xml:space="preserve">
          <source>Controlling the rate of failures through configuration allows the same service to be tested differently in different environments.</source>
          <target state="new">Controlling the rate of failures through configuration allows the same service to be tested differently in different environments.</target>
        </trans-unit>
        <trans-unit id="d4b6466b-d34b-4c0b-ad58-b25df8eecf38" xml:space="preserve">
          <source>With Service Fabric, though the scale of failures would be different in the different environments the actual mechanism would be identical.</source>
          <target state="new">With Service Fabric, though the scale of failures would be different in the different environments the actual mechanism would be identical.</target>
        </trans-unit>
        <trans-unit id="46856672-914f-486f-a143-120ce7136b2e" xml:space="preserve">
          <source>This allows for a much quicker code to deployment pipeline and the ability to test the services while still being under real world load.</source>
          <target state="new">This allows for a much quicker code to deployment pipeline and the ability to test the services while still being under real world load.</target>
        </trans-unit>
        <trans-unit id="7c6d37fd-2d1e-4435-9933-b6cf7777bed2" xml:space="preserve">
          <source>The various testability features are present in the System.Fabric.Testability.dll.</source>
          <target state="new">The various testability features are present in the System.Fabric.Testability.dll.</target>
        </trans-unit>
        <trans-unit id="5f6d46f9-0e39-43cd-9565-23692ce867c1" xml:space="preserve">
          <source>This dll can be found in the Microsoft.ServiceFabric.Testability.nupack nuget package.</source>
          <target state="new">This dll can be found in the Microsoft.ServiceFabric.Testability.nupack nuget package.</target>
        </trans-unit>
        <trans-unit id="aec5cb95-6108-4d75-9c2a-e47832f6474f" xml:space="preserve">
          <source>In order to use the Testability features, include the nuget package in as a reference in your project.</source>
          <target state="new">In order to use the Testability features, include the nuget package in as a reference in your project.</target>
        </trans-unit>
        <trans-unit id="797a5502-3dab-4d60-9dab-351d5f32ef18" xml:space="preserve">
          <source>To use the Testability PowerShell an installation of the runtime MSI is required.</source>
          <target state="new">To use the Testability PowerShell an installation of the runtime MSI is required.</target>
        </trans-unit>
        <trans-unit id="1d816277-eb1d-4687-9062-7fecb75f94c7" xml:space="preserve">
          <source>Once the MSI is installed, the ServiceFabricTestability PowerShell module is auto loaded for developers to use.</source>
          <target state="new">Once the MSI is installed, the ServiceFabricTestability PowerShell module is auto loaded for developers to use.</target>
        </trans-unit>
        <trans-unit id="6cb5ef73-641c-40f1-82a8-582d699d8132" xml:space="preserve">
          <source>To create truly cloud scale services, the ability to ensure that services can withstand real world failures before being deployed (and also while in production deployment) is very critical.</source>
          <target state="new">To create truly cloud scale services, the ability to ensure that services can withstand real world failures before being deployed (and also while in production deployment) is very critical.</target>
        </trans-unit>
        <trans-unit id="f1fdb89a-c6b5-4cd9-bd6d-692881b9ab32" xml:space="preserve">
          <source>Also in the services world today, the ability to quickly innovate and move code to production is very important.</source>
          <target state="new">Also in the services world today, the ability to quickly innovate and move code to production is very important.</target>
        </trans-unit>
        <trans-unit id="5f500f7d-3e29-4876-9649-2bc853236c81" xml:space="preserve">
          <source>The Testability feature in Service Fabric allows service developers to do the above precisely.</source>
          <target state="new">The Testability feature in Service Fabric allows service developers to do the above precisely.</target>
        </trans-unit>
        <trans-unit id="0894c5b6-d297-4cc0-9039-c29dfa56b97a" xml:space="preserve">
          <source><bpt id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;linkText&gt;</bpt>Testability Actions<ept id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;/linkText&gt;</ept><bpt id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;title&gt;</bpt><ept id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;linkText&gt;</bpt>Testability Actions<ept id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;/linkText&gt;</ept><bpt id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;title&gt;</bpt><ept id="9d47ccdd-3e02-4993-a3c8-9c65861b8238">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="7a1267b4-523e-421e-b39e-d3436912e834" xml:space="preserve">
          <source><bpt id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;linkText&gt;</bpt>Testability Scenarios<ept id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;/linkText&gt;</ept><bpt id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;title&gt;</bpt><ept id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;linkText&gt;</bpt>Testability Scenarios<ept id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;/linkText&gt;</ept><bpt id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;title&gt;</bpt><ept id="de22b04b-cb68-4d92-8247-19f79bde4ca7">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="70769257-cd68-4231-85e1-7694855d9207" xml:space="preserve">
          <source>How to test your service</source>
          <target state="new">How to test your service</target>
        </trans-unit>
        <trans-unit id="65340b29-9eaf-4c46-ac7e-4aeec8f7f15a" xml:space="preserve">
          <source><bpt id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;linkText&gt;</bpt>Simulate failures during service workloads<ept id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;/linkText&gt;</ept><bpt id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;title&gt;</bpt><ept id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;linkText&gt;</bpt>Simulate failures during service workloads<ept id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;/linkText&gt;</ept><bpt id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;title&gt;</bpt><ept id="0aa1b58b-a06e-48e6-b702-634e776ecc2f">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="f70d7ed5-7d9e-4dc3-bba8-6c32e465eb27" xml:space="preserve">
          <source><bpt id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;linkText&gt;</bpt>Service to service communication failures<ept id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;/linkText&gt;</ept><bpt id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;title&gt;</bpt><ept id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;linkText&gt;</bpt>Service to service communication failures<ept id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;/linkText&gt;</ept><bpt id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;title&gt;</bpt><ept id="8475a5a4-9434-4a3c-9702-a057d5a1f9f2">&lt;/title&gt;</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>