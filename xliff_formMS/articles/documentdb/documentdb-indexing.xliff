<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="a77f543f-b0ea-487f-8d80-ae52cbace8c1" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="a77f543f-b0ea-487f-8d80-ae52cbace8c1" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="40fb52f1-6ae1-42a2-8012-8311f20c18c1">
        <trans-unit id="b9ee1799-22bc-4637-b022-479cbd3dc54b" xml:space="preserve">
          <source>Automatic Indexing in DocumentDB | Microsoft Azure</source>
          <target state="new">Automatic Indexing in DocumentDB | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="acbaf8e4-9e8b-4e26-8e27-19f949a66ee7" xml:space="preserve">
          <source>Learn about how automatic indexing works in Azure DocumentDB.</source>
          <target state="new">Learn about how automatic indexing works in Azure DocumentDB.</target>
        </trans-unit>
        <trans-unit id="4f813c68-6b03-4fb1-8334-c81384d51f28" xml:space="preserve">
          <source>This article is excerpted from the <bpt id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;linkText&gt;</bpt>"Schema-Agnostic Indexing with Azure DocumentDB"<ept id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;/linkText&gt;</ept><bpt id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;title&gt;</bpt><ept id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;/title&gt;</ept> paper, which will be presented at the <bpt id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;linkText&gt;</bpt>41st Internal Conference on Very Large Databases<ept id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;/linkText&gt;</ept><bpt id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;title&gt;</bpt><ept id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;/title&gt;</ept> between August 31 - September 4, 2015, and is an introduction into how indexing works in Azure DocumentDB.</source>
          <target state="new">This article is excerpted from the <bpt id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;linkText&gt;</bpt>"Schema-Agnostic Indexing with Azure DocumentDB"<ept id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;/linkText&gt;</ept><bpt id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;title&gt;</bpt><ept id="557303a1-f57c-4989-a435-ec4fda19d5b9">&lt;/title&gt;</ept> paper, which will be presented at the <bpt id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;linkText&gt;</bpt>41st Internal Conference on Very Large Databases<ept id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;/linkText&gt;</ept><bpt id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;title&gt;</bpt><ept id="ad35cde8-123e-4c75-b361-34c49f003ef1">&lt;/title&gt;</ept> between August 31 - September 4, 2015, and is an introduction into how indexing works in Azure DocumentDB.</target>
        </trans-unit>
        <trans-unit id="fc820d7f-077e-41ec-bfd9-c3acb3c2f543" xml:space="preserve">
          <source>After reading this, you will be answer the following questions:</source>
          <target state="new">After reading this, you will be answer the following questions:</target>
        </trans-unit>
        <trans-unit id="02ca4b7d-5c01-4ee6-85b0-71445318b6c1" xml:space="preserve">
          <source>How does DocumentDB infer the schema from a JSON document?</source>
          <target state="new">How does DocumentDB infer the schema from a JSON document?</target>
        </trans-unit>
        <trans-unit id="01926faf-17db-4d46-aecc-6098c1ee8012" xml:space="preserve">
          <source>How does DocumentDB build an index across disparate docuemnts?</source>
          <target state="new">How does DocumentDB build an index across disparate docuemnts?</target>
        </trans-unit>
        <trans-unit id="25f33177-bd59-4585-a898-0832d9434431" xml:space="preserve">
          <source>How does DocumentDB perform automatic indexing at scale?</source>
          <target state="new">How does DocumentDB perform automatic indexing at scale?</target>
        </trans-unit>
        <trans-unit id="8660b74a-7470-41cc-ba32-37c5f8b48824" xml:space="preserve">
          <source><bpt id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;linkText&gt;</bpt>Microsoft Azure DocumentDB<ept id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;/linkText&gt;</ept><bpt id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;title&gt;</bpt><ept id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;/title&gt;</ept> is a true schema-free database purpose built for JSON.</source>
          <target state="new"><bpt id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;linkText&gt;</bpt>Microsoft Azure DocumentDB<ept id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;/linkText&gt;</ept><bpt id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;title&gt;</bpt><ept id="e8f8ad7e-6eec-4406-bc7e-8f4f8dffbc5b">&lt;/title&gt;</ept> is a true schema-free database purpose built for JSON.</target>
        </trans-unit>
        <trans-unit id="fbaa0f91-0002-476d-a907-9603a968b749" xml:space="preserve">
          <source>It does not expect or require any schema or secondary index definitions to index data at scale.</source>
          <target state="new">It does not expect or require any schema or secondary index definitions to index data at scale.</target>
        </trans-unit>
        <trans-unit id="2d4021f9-594f-42c9-94de-47c54a0886da" xml:space="preserve">
          <source>This allows you to quickly define and iterate on application data models using DocumentDB.</source>
          <target state="new">This allows you to quickly define and iterate on application data models using DocumentDB.</target>
        </trans-unit>
        <trans-unit id="8cd5c802-4c8b-4b9f-a1bf-3e3fcbd7653e" xml:space="preserve">
          <source>As you add documents to a collection, DocumentDB automatically indexes all document properties so they are available for you to query.</source>
          <target state="new">As you add documents to a collection, DocumentDB automatically indexes all document properties so they are available for you to query.</target>
        </trans-unit>
        <trans-unit id="daaaacc0-1f46-4727-b81d-b2841316a4e5" xml:space="preserve">
          <source>Automatic indexing allows you to store documents belonging to completely arbitrary schemas without worrying about schemas or secondary indexes.</source>
          <target state="new">Automatic indexing allows you to store documents belonging to completely arbitrary schemas without worrying about schemas or secondary indexes.</target>
        </trans-unit>
        <trans-unit id="98b943f4-323a-4872-a1e9-ca078813a507" xml:space="preserve">
          <source>With a goal to eliminate the impedance mismatch between the database and the application programming models, DocumentDB exploits the simplicity of JSON and its lack of a schema specification.</source>
          <target state="new">With a goal to eliminate the impedance mismatch between the database and the application programming models, DocumentDB exploits the simplicity of JSON and its lack of a schema specification.</target>
        </trans-unit>
        <trans-unit id="713abe49-ecdb-4e5e-878c-54e23affeb30" xml:space="preserve">
          <source>It makes no assumptions about the documents and allows documents within a DocumentDB collection to vary in schema, in addition to the instance specific values.</source>
          <target state="new">It makes no assumptions about the documents and allows documents within a DocumentDB collection to vary in schema, in addition to the instance specific values.</target>
        </trans-unit>
        <trans-unit id="b04103b3-910a-4309-9e97-0dee9555c302" xml:space="preserve">
          <source>In contrast to other document databases, DocumentDB’s database engine operates directly at the level of JSON grammar, remaining agnostic to the concept of a document schema and blurring the boundary between the structure and instance values of documents.</source>
          <target state="new">In contrast to other document databases, DocumentDB’s database engine operates directly at the level of JSON grammar, remaining agnostic to the concept of a document schema and blurring the boundary between the structure and instance values of documents.</target>
        </trans-unit>
        <trans-unit id="d04dcdfd-36c9-463b-9983-48cb9cf2c808" xml:space="preserve">
          <source>This, in-turn, enables it to automatically index documents without requiring schema or secondary indexes.</source>
          <target state="new">This, in-turn, enables it to automatically index documents without requiring schema or secondary indexes.</target>
        </trans-unit>
        <trans-unit id="4200535e-ca6c-4680-8878-01e5805e8ec5" xml:space="preserve">
          <source>The indexing in DocumentDB takes advantage of the fact that JSON grammar allows documents to be <bpt id="46dfcfdd-5a09-4e6d-ae92-13481353cb4a">&lt;strong&gt;</bpt>represented as trees<ept id="46dfcfdd-5a09-4e6d-ae92-13481353cb4a">&lt;/strong&gt;</ept>.</source>
          <target state="new">The indexing in DocumentDB takes advantage of the fact that JSON grammar allows documents to be <bpt id="46dfcfdd-5a09-4e6d-ae92-13481353cb4a">&lt;strong&gt;</bpt>represented as trees<ept id="46dfcfdd-5a09-4e6d-ae92-13481353cb4a">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="7321309b-b730-43fe-8008-b7e43b95de17" xml:space="preserve">
          <source>For a JSON document to be represented as a tree, a dummy root node needs to be created which parents the rest of the actual nodes in the document underneath.</source>
          <target state="new">For a JSON document to be represented as a tree, a dummy root node needs to be created which parents the rest of the actual nodes in the document underneath.</target>
        </trans-unit>
        <trans-unit id="ed8e37ff-fc50-42da-ab5a-b7b123228f89" xml:space="preserve">
          <source>Each label including the array indices in a JSON document becomes a node of the tree.</source>
          <target state="new">Each label including the array indices in a JSON document becomes a node of the tree.</target>
        </trans-unit>
        <trans-unit id="a31cd375-1d86-4765-9bef-649daf310a2f" xml:space="preserve">
          <source>The figure below illustrates an example JSON document and its corresponding tree representation.</source>
          <target state="new">The figure below illustrates an example JSON document and its corresponding tree representation.</target>
        </trans-unit>
        <trans-unit id="3ae54387-028c-4054-add1-1ae6a77c1687" xml:space="preserve">
          <source>Since JSON is self-describing i.e. each document includes both schema (metadata) and data, e.g. <bpt id="0ec8df69-6971-45f0-8848-7dec68c69f61">&lt;code&gt;</bpt>{"locationId", 5, "city": "Moscow"}<ept id="0ec8df69-6971-45f0-8848-7dec68c69f61">&lt;/code&gt;</ept> reveals that there are two properties <bpt id="51309a54-a3f5-4a4b-89c4-c73645f81bcb">&lt;code&gt;</bpt>locationId<ept id="51309a54-a3f5-4a4b-89c4-c73645f81bcb">&lt;/code&gt;</ept> and <bpt id="1f56243b-791c-4b5b-a80d-fe0b628ce617">&lt;code&gt;</bpt>city<ept id="1f56243b-791c-4b5b-a80d-fe0b628ce617">&lt;/code&gt;</ept>, and that they have a numeric and string property values.</source>
          <target state="new">Since JSON is self-describing i.e. each document includes both schema (metadata) and data, e.g. <bpt id="0ec8df69-6971-45f0-8848-7dec68c69f61">&lt;code&gt;</bpt>{"locationId", 5, "city": "Moscow"}<ept id="0ec8df69-6971-45f0-8848-7dec68c69f61">&lt;/code&gt;</ept> reveals that there are two properties <bpt id="51309a54-a3f5-4a4b-89c4-c73645f81bcb">&lt;code&gt;</bpt>locationId<ept id="51309a54-a3f5-4a4b-89c4-c73645f81bcb">&lt;/code&gt;</ept> and <bpt id="1f56243b-791c-4b5b-a80d-fe0b628ce617">&lt;code&gt;</bpt>city<ept id="1f56243b-791c-4b5b-a80d-fe0b628ce617">&lt;/code&gt;</ept>, and that they have a numeric and string property values.</target>
        </trans-unit>
        <trans-unit id="a7c125fd-554f-412e-80a2-a31298e828c9" xml:space="preserve">
          <source>DocumentDB is able to infer the schema of documents and index them when they are inserted or replaced, without you ever having to define schemas or secondary indexes.</source>
          <target state="new">DocumentDB is able to infer the schema of documents and index them when they are inserted or replaced, without you ever having to define schemas or secondary indexes.</target>
        </trans-unit>
        <trans-unit id="2dd54ea3-088f-47da-be40-18ba606d4db3" xml:space="preserve">
          <source><bpt id="c4716233-b7ab-4af3-91ed-633308086292">&lt;strong&gt;</bpt>JSON Documents as Trees:<ept id="c4716233-b7ab-4af3-91ed-633308086292">&lt;/strong&gt;</ept></source>
          <target state="new"><bpt id="c4716233-b7ab-4af3-91ed-633308086292">&lt;strong&gt;</bpt>JSON Documents as Trees:<ept id="c4716233-b7ab-4af3-91ed-633308086292">&lt;/strong&gt;</ept></target>
        </trans-unit>
        <trans-unit id="d96d480b-98bc-4ca7-bc73-08e27755cfe7" xml:space="preserve">
          <source><bpt id="758a012f-ca43-47b3-b235-5ffc634759c1">&lt;linkText&gt;</bpt>Documents as Trees<ept id="758a012f-ca43-47b3-b235-5ffc634759c1">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="758a012f-ca43-47b3-b235-5ffc634759c1">&lt;linkText&gt;</bpt>Documents as Trees<ept id="758a012f-ca43-47b3-b235-5ffc634759c1">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="c2a56c51-2c39-4767-835a-d0c0796002f7" xml:space="preserve">
          <source>For example, in the example shown above:</source>
          <target state="new">For example, in the example shown above:</target>
        </trans-unit>
        <trans-unit id="cad02ba6-83ee-47bd-bdc3-b5f6ccbdc486" xml:space="preserve">
          <source>The JSON property <bpt id="68a47d45-8411-44f5-8a0c-909e46f3f2e8">&lt;code&gt;</bpt>{"headquarters": "Belgium"}<ept id="68a47d45-8411-44f5-8a0c-909e46f3f2e8">&lt;/code&gt;</ept> property in the above example corresponds to the path/headquarters/Belgium.</source>
          <target state="new">The JSON property <bpt id="68a47d45-8411-44f5-8a0c-909e46f3f2e8">&lt;code&gt;</bpt>{"headquarters": "Belgium"}<ept id="68a47d45-8411-44f5-8a0c-909e46f3f2e8">&lt;/code&gt;</ept> property in the above example corresponds to the path/headquarters/Belgium.</target>
        </trans-unit>
        <trans-unit id="158ea795-cb08-4342-9d0f-3744c248fc7c" xml:space="preserve">
          <source>The JSON array <bpt id="44366d0f-5e2b-4a48-bc88-f3951f28c96b">&lt;code&gt;</bpt>{"exports": [{"city": “Moscow"}<ept id="44366d0f-5e2b-4a48-bc88-f3951f28c96b">&lt;/code&gt;</ept>, <bpt id="4580d939-886a-4964-bdd3-b742eb33789e">&lt;code&gt;</bpt>{"city": Athens"}]}<ept id="4580d939-886a-4964-bdd3-b742eb33789e">&lt;/code&gt;</ept> corresponds to the paths <bpt id="ccaa8d78-018e-4cad-b421-e1bfdbf028ea">&lt;code&gt;</bpt>/exports/[]/city/Moscow<ept id="ccaa8d78-018e-4cad-b421-e1bfdbf028ea">&lt;/code&gt;</ept> and <bpt id="a1739d57-d359-43c6-9661-2ec03b95fa0e">&lt;code&gt;</bpt>/exports/[]/city/Athens<ept id="a1739d57-d359-43c6-9661-2ec03b95fa0e">&lt;/code&gt;</ept>.</source>
          <target state="new">The JSON array <bpt id="44366d0f-5e2b-4a48-bc88-f3951f28c96b">&lt;code&gt;</bpt>{"exports": [{"city": “Moscow"}<ept id="44366d0f-5e2b-4a48-bc88-f3951f28c96b">&lt;/code&gt;</ept>, <bpt id="4580d939-886a-4964-bdd3-b742eb33789e">&lt;code&gt;</bpt>{"city": Athens"}]}<ept id="4580d939-886a-4964-bdd3-b742eb33789e">&lt;/code&gt;</ept> corresponds to the paths <bpt id="ccaa8d78-018e-4cad-b421-e1bfdbf028ea">&lt;code&gt;</bpt>/exports/[]/city/Moscow<ept id="ccaa8d78-018e-4cad-b421-e1bfdbf028ea">&lt;/code&gt;</ept> and <bpt id="a1739d57-d359-43c6-9661-2ec03b95fa0e">&lt;code&gt;</bpt>/exports/[]/city/Athens<ept id="a1739d57-d359-43c6-9661-2ec03b95fa0e">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="0af20098-477b-496f-8b01-5003f2505c8d" xml:space="preserve">
          <source>With automatic indexing, (1) every path in a document tree is indexed (unless the developer has explicitly configured the indexing policy to exclude certain path patterns).</source>
          <target state="new">With automatic indexing, (1) every path in a document tree is indexed (unless the developer has explicitly configured the indexing policy to exclude certain path patterns).</target>
        </trans-unit>
        <trans-unit id="94ef8b83-df09-4600-98e6-2a83381bfea8" xml:space="preserve">
          <source>(2) Each update of a document to a DocumentDB collection leads to update of the structure of the index (i.e., causes addition or removal of nodes).</source>
          <target state="new">(2) Each update of a document to a DocumentDB collection leads to update of the structure of the index (i.e., causes addition or removal of nodes).</target>
        </trans-unit>
        <trans-unit id="8b3dba94-42af-40d2-929b-d240f1f1115e" xml:space="preserve">
          <source>One of the primary requirements of automatic indexing of documents is to ensure that the cost to index and query a document with deeply nested structure, say 10 levels, is the same as that of a flat JSON document consisting of key-value pairs just one level deep.</source>
          <target state="new">One of the primary requirements of automatic indexing of documents is to ensure that the cost to index and query a document with deeply nested structure, say 10 levels, is the same as that of a flat JSON document consisting of key-value pairs just one level deep.</target>
        </trans-unit>
        <trans-unit id="e3bcc665-66b6-4b02-80f3-6264edd65f4f" xml:space="preserve">
          <source>Therefore a normalized path representation is the foundation upon which both automatic indexing and query subsystems are built.</source>
          <target state="new">Therefore a normalized path representation is the foundation upon which both automatic indexing and query subsystems are built.</target>
        </trans-unit>
        <trans-unit id="6bd2b007-e831-43cc-9c81-9f96534b84a9" xml:space="preserve">
          <source>An important implication of treating both the schema and instance values uniformly in terms of paths is that logically, just like the individual documents, an index of the two documents shown that keeps a map between paths and the document ids containing that path can also be represented as a tree.</source>
          <target state="new">An important implication of treating both the schema and instance values uniformly in terms of paths is that logically, just like the individual documents, an index of the two documents shown that keeps a map between paths and the document ids containing that path can also be represented as a tree.</target>
        </trans-unit>
        <trans-unit id="20455f9e-68ef-4532-abb7-0096420cfcc6" xml:space="preserve">
          <source>DocumentDB uses this fact to build an index tree which is constructed out of the union of all of the trees representing individual documents within the collection.</source>
          <target state="new">DocumentDB uses this fact to build an index tree which is constructed out of the union of all of the trees representing individual documents within the collection.</target>
        </trans-unit>
        <trans-unit id="90c03969-431b-422d-948b-e4cdbe449778" xml:space="preserve">
          <source>The index tree in DocumentDB collections grows over time as new documents get added or updated to the collection.</source>
          <target state="new">The index tree in DocumentDB collections grows over time as new documents get added or updated to the collection.</target>
        </trans-unit>
        <trans-unit id="85e89b63-f29b-4294-97ea-88a724134852" xml:space="preserve">
          <source><bpt id="9893f978-ed1f-4b2b-b849-e0b0976d8450">&lt;strong&gt;</bpt>DocumentDB Index as a Tree:<ept id="9893f978-ed1f-4b2b-b849-e0b0976d8450">&lt;/strong&gt;</ept></source>
          <target state="new"><bpt id="9893f978-ed1f-4b2b-b849-e0b0976d8450">&lt;strong&gt;</bpt>DocumentDB Index as a Tree:<ept id="9893f978-ed1f-4b2b-b849-e0b0976d8450">&lt;/strong&gt;</ept></target>
        </trans-unit>
        <trans-unit id="5072d4e4-aa3f-4825-9f93-65579f7cbd32" xml:space="preserve">
          <source><bpt id="67081dfc-3871-4c96-b3b5-b28a21612b39">&lt;linkText&gt;</bpt>Index as a Tree<ept id="67081dfc-3871-4c96-b3b5-b28a21612b39">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="67081dfc-3871-4c96-b3b5-b28a21612b39">&lt;linkText&gt;</bpt>Index as a Tree<ept id="67081dfc-3871-4c96-b3b5-b28a21612b39">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="a9063417-20fe-4306-8296-9a00d85b71ff" xml:space="preserve">
          <source>Despite being schema-free, DocumentDB’s SQL and JavaScript query languages provide relational projections and filters, hierarchical navigation across documents, and invocation of UDFs written entirely in JavaScript.</source>
          <target state="new">Despite being schema-free, DocumentDB’s SQL and JavaScript query languages provide relational projections and filters, hierarchical navigation across documents, and invocation of UDFs written entirely in JavaScript.</target>
        </trans-unit>
        <trans-unit id="4d486dd4-7f4d-4312-8bf8-096f8a6d3944" xml:space="preserve">
          <source>The DocumentDB’s query runtime is able to support these queries since it can operate directly against this index tree representation of the data.</source>
          <target state="new">The DocumentDB’s query runtime is able to support these queries since it can operate directly against this index tree representation of the data.</target>
        </trans-unit>
        <trans-unit id="2cc924fd-a56f-4006-aa29-34d7a7bb874b" xml:space="preserve">
          <source>The default indexing policy automatically indexes all properties of all documents and provides consistent queries (meaning the index is updated synchronously with the document write).</source>
          <target state="new">The default indexing policy automatically indexes all properties of all documents and provides consistent queries (meaning the index is updated synchronously with the document write).</target>
        </trans-unit>
        <trans-unit id="dfdede16-b099-487b-83d7-66402e3d3b55" xml:space="preserve">
          <source>How does DocumentDB support consistent updates to the index tree at scale?</source>
          <target state="new">How does DocumentDB support consistent updates to the index tree at scale?</target>
        </trans-unit>
        <trans-unit id="95e22240-7c44-4a47-8bf4-3aa4f8d40356" xml:space="preserve">
          <source>DocumentDB uses write optimized, lock free, and log structured index maintenance techniques.</source>
          <target state="new">DocumentDB uses write optimized, lock free, and log structured index maintenance techniques.</target>
        </trans-unit>
        <trans-unit id="7208f1eb-224b-4be6-ab00-e8fa87142029" xml:space="preserve">
          <source>This means that DocumentDB can support a sustained volume of fast writes while still serving consistent queries.</source>
          <target state="new">This means that DocumentDB can support a sustained volume of fast writes while still serving consistent queries.</target>
        </trans-unit>
        <trans-unit id="7661dc31-b589-4546-bd07-ef3628d1fa0d" xml:space="preserve">
          <source>DocumentDB’s indexing is designed for storage efficiency and to handle multi-tenancy.</source>
          <target state="new">DocumentDB’s indexing is designed for storage efficiency and to handle multi-tenancy.</target>
        </trans-unit>
        <trans-unit id="666b2c8a-cd5c-4126-bb5b-cc1373184293" xml:space="preserve">
          <source>For cost effectiveness, the on-disk storage overhead of the index is low and predictable.</source>
          <target state="new">For cost effectiveness, the on-disk storage overhead of the index is low and predictable.</target>
        </trans-unit>
        <trans-unit id="5c3d2040-277b-49bc-96db-12fd6eb1cd55" xml:space="preserve">
          <source>Index updates are also performed within the budget of system resources allocated per DocumentDB collection.</source>
          <target state="new">Index updates are also performed within the budget of system resources allocated per DocumentDB collection.</target>
        </trans-unit>
        <trans-unit id="fed56350-c3eb-4eea-81be-aaef954dc2b9" xml:space="preserve">
          <source>Download <bpt id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;linkText&gt;</bpt>"Schema-Agnostic Indexing with Azure DocumentDB"<ept id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;/linkText&gt;</ept><bpt id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;title&gt;</bpt><ept id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;/title&gt;</ept>, to be presented at the 41st Internal Conference on Very Large Databases, August 31 - September 4, 2015.</source>
          <target state="new">Download <bpt id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;linkText&gt;</bpt>"Schema-Agnostic Indexing with Azure DocumentDB"<ept id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;/linkText&gt;</ept><bpt id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;title&gt;</bpt><ept id="6547f489-c92e-4ef2-8e43-c1e3057fa323">&lt;/title&gt;</ept>, to be presented at the 41st Internal Conference on Very Large Databases, August 31 - September 4, 2015.</target>
        </trans-unit>
        <trans-unit id="60ff3562-b29a-4d69-a565-bb68aa84e3b0" xml:space="preserve">
          <source><bpt id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;linkText&gt;</bpt>Query with DocumentDB SQL<ept id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;/linkText&gt;</ept><bpt id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;title&gt;</bpt><ept id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;linkText&gt;</bpt>Query with DocumentDB SQL<ept id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;/linkText&gt;</ept><bpt id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;title&gt;</bpt><ept id="89f639c2-d4f6-4fe8-8904-24358cf92a72">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="96302090-3ff9-489d-957a-a55f9a6bb355" xml:space="preserve">
          <source>Learn about how to customize the DocumentDB index <bpt id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;linkText&gt;</bpt>here<ept id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;/linkText&gt;</ept><bpt id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;title&gt;</bpt><ept id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;/title&gt;</ept></source>
          <target state="new">Learn about how to customize the DocumentDB index <bpt id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;linkText&gt;</bpt>here<ept id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;/linkText&gt;</ept><bpt id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;title&gt;</bpt><ept id="6494cd00-db81-4acf-8a3d-ad7e5fd4fe22">&lt;/title&gt;</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>